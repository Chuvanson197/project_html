{"version":3,"sources":["serviceWorker.js","utils/createOperation.js","api/auth/authApi.js","utils/apiService.js","utils/createResourceHandler.js","modules/layout/store/index.js","modules/languageSwitcher/store/index.js","modules/project/store/index.js","modules/customer/store/index.js","modules/member/store/index.js","modules/setting/store/index.js","reducers/layoutReducer.js","reducers/authReducer.js","store/index.js","languageProvider/entries/en_US.js","languageProvider/entries/vi_VN.js","languageProvider/index.js","actions/layout.js","actions/auth.js","pages/LoadingPage.js","hocs/RouteNormal.js","hocs/RouteWithManager.js","hocs/RouteWithAdmin.js","modules/dashbroad/Gantt/Gantt.js","pages/Dashbroad.page.js","components/Content/HeaderTitle.js","modules/project/projects/components/ProjectsList.js","components/Notification/Error.js","components/Notification/Success.js","modules/project/createProject/components/CreateProject.js","hocs/WithRole.js","pages/Projects.page.js","modules/member/memberDiagram/MemberDiagram.js","utils/roles.js","modules/project/addMember/components/AddMemberModal.js","modules/project/updateProject/components/UpdateProjectDrawer.js","modules/project/updateMember/components/UpdateMemberDrawer.js","modules/project/projectDetails/components/ProjectDetail.js","components/Button/BackButton.js","pages/ProjectDetail.page.js","modules/project/projectMemberHistory/components/TableMemberHistory.js","modules/project/projectMemberHistory/components/ProjectMemberHistory.js","pages/ProjectMemberHistory.page.js","pages/Login.page.js","utils/searchColumn.js","modules/member/editMember/components/EditMember.js","modules/member/listMember/components/Members.js","utils/modal.config.js","modules/member/createMember/components/CreateMember.js","pages/ListMember.page.js","modules/customer/createCustomer/components/CreateCustomerModal.js","modules/customer/customers/components/CustomersTable.js","pages/Customers.page.js","pages/NotFound.js","pages/CallbackOAuth.js","modules/user/editUser/components/UpdateUserDrawer.js","modules/user/users/components/UsersTable.js","pages/User.page.js","modules/setting/createCustomField/CreateCustomField.js","modules/setting/updateCustomField/UpdateCustomFieldDrawer.js","modules/setting/tableCustomFields/TableCustomFields.js","modules/setting/firstSettingCustomField/firstSettingCustomField.js","pages/Setting.page.js","modules/customer/updateCustomer/components/UpdateCustomerDrawer.js","modules/customer/customerDetail/customerDetail.js","pages/CustomerDetail.page.js","AppRoutes.js","modules/languageSwitcher/components/options.js","modules/languageSwitcher/components/LanguagaSwitcher.js","modules/layout/components/Header.js","modules/layout/components/CustomMenu.js","modules/layout/components/Sider.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","actions","process","payload","dispatch","getState","a","execute","startAction","successAction","failAction","result","params","response","status","data","authApi","login","accessCode","axios","post","withCredentials","userLogin","refreshLogin","get","refreshToken","logout","staff_code","expresIn","localStorage","getItem","now","Date","parseInt","getTime","res","statusCode","Cookies","set","access_token","secure","path","Api","GET","option","param","headers","then","POST","body","PUT","put","DELETE","delete","CreateResourceHandler","moduleName","apiActions","reducerActions","defaultState","initialState","loading","forEach","value","stateName","undefined","lastState","initialReducerActions","actionName","state","slice","createSlice","reducers","exportApiActions","createOperation","api","method","reducer","store","createResourceHandler","selectedItem","selectedSubMenu","isCollapsed","locale","list","project","members","joinedMembers","createProjectResult","updateProjectResult","removeProjectResult","addMemberResult","updateMemberResult","removeMemberResult","apiUrl","customer","projectsOfCustomer","createCustomerResult","updateCustomerResult","removeCustomerResult","createMemberResult","customfields","customfield","createCustomFieldResult","removeCustomFieldResult","getCustomFieldResult","updateCustomFieldResult","createAssigneeProjectResult","removeAssigneeProjectResult","initState","isShow","isLogin","user","history","createBrowserHistory","routeMiddleware","routerMiddleware","rootReducer","combineReducers","router","routerReducer","layout","action","type","layoutSlider","layoutSliderReducer","languageSwitcher","languageSwitcherReducer","auth","projects","projectsReducer","customers","customersReducer","membersReducer","setting","settingReducer","configureStore","middleware","getDefaultMiddleware","serializableCheck","devTools","EnLang","messages","antd","antdEn","appLocaleData","AppLocale","en","Enlang","vi","antdVi","addLocaleData","dispatchHideLayout","dispatchShowLayout","dispatchLogin","console","log","LoadingPage","props","useDispatch","useEffect","remove","push","userInfo","jwtDecode","setItem","exp","search","override","css","style","backgroundColor","width","height","paddingTop","display","flexDirection","justifyContent","alignItems","color","marginRight","sizeUnit","size","RouteNormal","Component","component","rest","checkAuth","useSelector","render","RouteWithManager","checkRole","renderRoute","RouteWithAdmin","Gantt","tasks","intl","ganttContainer","gantt","config","scale_unit","xml_date","showLightbox","id","templates","tooltip_text","start","end","task","formatMessage","text","tooltip_date_format","columns","name","label","align","date_scale","init","clearAll","parse","ref","input","DashbroadPage","RangePicker","useState","setData","moment","subtract","setValue","mode","setMode","colors","length","startTime","_d","format","endTime","filter","start_time","end_time","map","end_date","start_date","readonly","layoutActions","selectItem","projectActions","getProjects","className","Group","defaultValue","onChange","e","target","Button","placeholder","onPanelChange","defaultProps","injectIntl","propTypes","title","PropTypes","oneOfType","string","shape","isRequired","HeaderTitle","React","memo","Fragment","Title","level","styles","listItem","ProjectsList","itemLayout","dataSource","renderItem","item","Item","onClick","onSelectProject","active","Meta","marginLeft","description","Paragraph","margin","ErrorNotification","message","notification","open","fontWeight","duration","icon","SuccessNotification","formItemLayout","labelCol","span","wrapperCol","listStatus","CreateProject","visible","close","form","selectedCustomer","createProject","getCustomers","customerDetail","setCustomerDetail","getCustomersError","getCustomersErrors","customersList","customerLoading","createProjectError","createProjectErrors","createProjectCleanData","createProjectCleanError","customerActions","getCustomersCleanError","handleSubmit","validateFields","err","values","customer_id","estimated","setTimeout","reload","cancelText","onCancel","maskClosable","footer","key","justify","onConfirm","okText","onSubmit","marginBottom","Text","validateStatus","getFieldError","getFieldDecorator","rules","required","allowClear","Option","autoClearSearchValue","onSelect","handleSelect","notFoundContent","column","email","phone_number","address","CreateProjectForm","create","WithRole","includes","addCustomerButton","ButtonAdd","handleCreateModal","ProjectsPage","getProjectsError","getProjectsErrors","setVisible","getProjectsCleanError","useCallback","gutter","defaultActiveKey","TabPane","tab","paragraph","rows","MemberDiagram","engine","createEngine","listPo","listPm","listBrse","listComtor","listDev","model","DiagramModel","listAssigneeUnDefault","assigneeProject","member_be_link_id","listAssignee","member","role","nodePoTitle","DefaultNodeModel","locked","setPosition","po","index","node","full_name","addNode","nodePmTitle","pm","nodeBrseTitle","brse","nodeComtorTitle","comtor","nodeDevTitle","dev","allNode","getModels","linkAssignee","member_link_id","options","portOut","addOutPort","listPoLink","portIn","addInPort","linkPO","link","addLink","listPmLink","linkPM","addAll","listBrseLink","linkBRSE","linkComtor","nodeLink","nodeBeLink","linkNode","setModel","centered","placement","zoomToFit","roles","descItem","AddMemberModal","selectedMember","getMembers","getJoinedMembers","getProject","addMember","getMembersError","memberLoading","addMemberError","addMemberErrors","memberDetail","setMemberDetail","disabledLink","setDisabledLink","addMemberCleanError","addMemberCleanData","memberActions","cleanError","project_id","time_in","time_out","assignee","modal","showSearch","setFieldsValue","getFieldsValue","disabled","joinedMember","member_detail","min","max","step","AddMemberForm","drawerBody","drawerFooter","deletedCustomerMsg","UpdateProjectDrawer","updateProject","onClose","drawerVisible","updateProjectError","updateProjectErrors","updateProjectCleanError","updateProjectCleanData","customField","indexCustomField","idInfoCustomField","Object","keys","hidden","initialValue","find","obj","require","UpdateProjectForm","UpdateMemberDrawer","updateMember","updateMemberError","updateMemberErrors","updateMemberCleanError","updateMemberCleanData","effort","member_status","oldBody","JSON","stringify","paddingBottom","UpdateMemberForm","ButtonEditProject","handleEditProjectDrawer","ButtonEditMember","handleControlMemberDrawer","record","ButtonDeleteMember","handleConfirmDelete","ButtonAddMember","handleAddMemberModal","ProjectDetail","removeMember","setDrawerVisible","memberDrawerVisible","setMemberDrawerVisible","openAddModal","setOpenAddModal","selectMember","removeMemberError","removeMemberErrors","getProjectError","getProjectErrors","getJoinedMembersError","getJoinedMembersErrors","getProjectCleanError","getJoinedMembersCleanError","removeMemberCleanData","dataIndex","date","total","fontSize","str","href","rowKey","pagination","BackButton","onBack","ButtonRemoveProject","removeProject","removeProjectError","removeProjectErrors","getJoinedMembersCleanData","getProjectCleanData","removeProjectCleanData","removeProjectCleanError","back","TableMemberHistory","datePicker","ProjectMemberHistory","getMemberHistory","startOf","endOf","dateRange","setDateRange","getMemberHistoryError","getMemberHistoryErrors","getMemberHistoryCleanError","ProjectMemberHistoryPage","LoginPage","responseGoogle","reponse","clientId","buttonText","onSuccess","onFailure","cookiePolicy","searchColumn","currValue","replace","normalize","toLowerCase","EditMember","EditMemberForm","handleEditSelected","Members","dataItem","setDataItem","removeMemberCleanError","keyboard","closable","CreateMember","createMember","createMemberError","createMemberErrors","createMemberCleanError","createMemberCleanData","modalConfig","CreateMemberForm","ListMemberPage","openCreateModal","setOpenCreateModal","searchInput","setSearchInput","getMembersErrors","filteredData","setFilteredData","getMembersCleanError","createNewMember","offset","CreateCustomerModal","getCutomers","addCustomer","createCustomerError","createCustomerErrors","createCustomerCleanError","createCustomerCleanData","listCustomer","CreateCustomerForm","CustomersTable","onRow","onSelectCustomer","container","ButtonCreateCustomer","CustomersPage","createCustomer","removeCustomer","NotFound","CallbackOAuth","token","hash","split","deletedUserMsg","listRole","permission","UpdateUserDrawer","userChange","setUserChange","newRole","UpdateUserForm","UsersTable","users","table","UsersPage","formShape","createCustomField","func","bool","buttonSubmit","FormCreateCustomfield","getCustomFields","global","valueTypes","settingActions","getValueTypes","setDefaultValue","createCustomFieldError","createCustomFieldErrors","createCustomFieldCleanData","createCustomFieldCleanError","is_global","handleChangeInput","re","regex","help","textTransform","TextArea","valuePropName","UpdateCustomFieldDrawer","updateCustomField","removeAssigneeProject","createAssigneeProject","updateCustomFieldError","updateCustomFieldErrors","removeAssigneeProjectError","removeAssigneeProjectErrors","createAssigneeProjectError","createAssigneeProjectErrors","arrRemove","setArrRemove","arrCreate","setArrCreate","updateCustomFieldCleanError","updateCustomFieldCleanData","removeAssigneeProjectCleanError","createAssigneeProjectCleanError","infocustomField","bodyCreateAssignee","idCustomField","bodyRemoveAssignee","onDeselect","created","listProject","reduce","accumulator","currentValue","removed","UpdateCustomFieldForm","ButtonEditCustomField","ButtonDeleteCustomField","removeCustomField","TableCustomFields","removeCustomFieldError","removeCustomFieldErrors","i","removeCustomFieldCleanData","removeCustomFieldCleanError","handleDelete","EditableCell","editable","children","handleSave","validateCell","restProps","getBaseCustomFields","validate","setValidate","save","childNode","onPressEnter","onBlur","FirstSettingCustomField","baseCustomFields","globalCustomFields","setGlobalCustomFields","setDataSource","count","setCount","validateError","setValidateError","row","newData","findIndex","splice","fieldName","boolean","cloneValidateCell","error","onCell","valueType","float","listCustomField","rowClassName","components","cell","marginTop","default_value","value_type","addCustomFieldButton","addGlobalCustomFieldButton","ButtonCreateCustomField","ButtonCreateGlobalCustomField","SettingPage","getCustomFieldsError","getCustomFieldsErrors","visibleCustomField","setVisibleCustomField","visibleGlobalCustomField","setVisibleGlobalCustomField","setCustomField","globalCustomField","setGlobalCustomField","getCustomFieldsCleanError","dataGlobal","UpdateCustomer","getCustomer","updateCustomerError","updateCustomerErrors","updateCustomerCleanError","updateCustomer","UpdateCustomerForm","ButtonEditCustomer","handleEditCustomerDrawer","CustomerDetail","joinedProjects","UpdateCustomerDrawer","updateCustomerCleanData","ButtonRemoveCustomer","removeCustomerError","removeCustomerErrors","getProjectsByCustomer","removeCustomerCleanData","removeCustomerCleanError","AppRoutes","Dashboard","exact","ProjectPage","Customerpage","languageOptions","LanguageSwitcher","switchLanguage","handleChangeLanguage","header","trigger","leftContents","rightContents","Header","layoutCheck","setCollapse","CustomMenu","to","typeIcon","SubMenu","sider","menu","menu_collapse","logo","user_collapse","Sider","dispacth","collapsible","collapsed","theme","selectedKeys","openKeys","onOpenChange","selectSubMenu","handleSelectSubMenu","clear","App","currentAppLocale","content","padding","Content","ReactDOM","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de18f5c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default ({ actions = {}, process = () => {} }) => (payload) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const execute = async () => {\r\n    const { startAction, successAction, failAction } = actions;\r\n\r\n    startAction && dispatch(startAction(payload));\r\n    try {\r\n      const result = await process({ payload, dispatch, getState });\r\n\r\n      successAction && dispatch(successAction({ result, params: payload }));\r\n\r\n      return result;\r\n    } catch (error) {\r\n      if (error.response && error.response.status) {\r\n        return failAction && dispatch(failAction(error.response.data));\r\n      }\r\n      return failAction && dispatch(failAction(error));\r\n    }\r\n  };\r\n\r\n  return execute();\r\n};\r\n","import axios from 'axios';\r\n\r\nconst login = async (accessCode) => {\r\n  let userLogin = await axios.post(\r\n    `${process.env.REACT_APP_API}/auth/login`,\r\n    { accessCode },\r\n    { withCredentials: true }\r\n  );\r\n  return userLogin;\r\n};\r\n\r\nconst refreshLogin = async () => {\r\n  let userLogin = await axios.get(`${process.env.REACT_APP_API}/auth/refreshLogin`, {\r\n    withCredentials: true\r\n  });\r\n  return userLogin;\r\n};\r\n\r\nconst refreshToken = async () => {\r\n  let refreshToken = await axios.get(`${process.env.REACT_APP_API}/auth/refreshToken`, {\r\n    withCredentials: true\r\n  });\r\n  return refreshToken;\r\n};\r\n\r\nconst logout = async (staff_code) =>\r\n  axios.post(\r\n    `${process.env.REACT_APP_API}/auth/logout`,\r\n    { staff_code },\r\n    {\r\n      withCredentials: true\r\n    }\r\n  );\r\n\r\nexport const authApi = {\r\n  login,\r\n  refreshLogin,\r\n  refreshToken,\r\n  logout\r\n};\r\n","import axios from 'axios';\r\nimport { authApi } from '../api/auth/authApi';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst getHeaders = () => ({});\r\n\r\nconst refreshToken = async () => {\r\n  let expresIn = localStorage.getItem('expresIn');\r\n  let now = new Date();\r\n  if (expresIn && parseInt(expresIn) < now.getTime()) {\r\n    let res = await authApi.refreshToken();\r\n    if (res.data.statusCode !== 400) {\r\n      Cookies.set('access-token', res.data.access_token, { secure: false, path: '/' });\r\n    }\r\n  }\r\n};\r\n\r\nconst apiGet = async (payload) => {\r\n  const option = payload && payload.option ? payload.option : {};\r\n  await refreshToken();\r\n  return axios\r\n    .get(\r\n      payload && payload.param\r\n        ? `${process.env.REACT_APP_API}/${payload.path}/${payload.param}`\r\n        : `${process.env.REACT_APP_API}/${payload.path}`,\r\n      {\r\n        ...option,\r\n        headers: getHeaders(),\r\n        withCredentials: true\r\n      }\r\n    )\r\n    .then((res) => res.data);\r\n};\r\n\r\nconst apiPost = async (payload) => {\r\n  const body = payload && payload.body ? payload.body : {};\r\n  const option = payload && payload.option ? payload.option : {};\r\n  await refreshToken();\r\n  return axios\r\n    .post(\r\n      payload.param\r\n        ? `${process.env.REACT_APP_API}/${payload.path}/${payload.param}`\r\n        : `${process.env.REACT_APP_API}/${payload.path}`,\r\n      body,\r\n      {\r\n        ...option,\r\n        headers: getHeaders(),\r\n        withCredentials: true\r\n      }\r\n    )\r\n    .then((res) => res.data);\r\n};\r\n\r\nconst apiPut = async (payload) => {\r\n  const body = payload && payload.body ? payload.body : {};\r\n  const option = payload && payload.option ? payload.option : {};\r\n  await refreshToken();\r\n  return axios\r\n    .put(\r\n      payload.param\r\n        ? `${process.env.REACT_APP_API}/${payload.path}/${payload.param}`\r\n        : `${process.env.REACT_APP_API}/${payload.path}`,\r\n      body,\r\n      {\r\n        ...option,\r\n        headers: getHeaders(),\r\n        withCredentials: true\r\n      }\r\n    )\r\n    .then((res) => res.data);\r\n};\r\n\r\nconst apiDelete = async (payload) => {\r\n  const body = payload && payload.body ? payload.body : {};\r\n  const option = payload && payload.option ? payload.option : {};\r\n  await refreshToken();\r\n  return axios\r\n    .delete(\r\n      payload.param\r\n        ? `${process.env.REACT_APP_API}/${payload.path}/${payload.param}`\r\n        : `${process.env.REACT_APP_API}/${payload.path}`,\r\n      {\r\n        data: body,\r\n        ...option,\r\n        headers: getHeaders(),\r\n        withCredentials: true\r\n      }\r\n    )\r\n    .then((res) => res.data);\r\n};\r\n\r\nconst Api = {\r\n  GET: apiGet,\r\n  POST: apiPost,\r\n  PUT: apiPut,\r\n  DELETE: apiDelete\r\n};\r\n\r\nexport default Api;\r\n","import { createSlice } from 'redux-starter-kit';\r\nimport createOperation from './createOperation';\r\nimport api from './apiService';\r\n\r\n/**\r\n * // name of module\r\n * @param moduleName : string\r\n * // provide api action list you want generate\r\n * // parm method include ['GET', 'POST', 'PUT', 'DELETE']\r\n * @param apiActions : arrayOf[\r\n *   {actionName: string, stateName: string, method: string}\r\n * ]\r\n * // provide reducer actions list you want generate\r\n * @param reducerActions: arrayOf[{actionName: string, stateName: string}]\r\n * // provide default value for state if need\r\n * @param defaultState: object\r\n */\r\n\r\nconst CreateResourceHandler = (\r\n  moduleName,\r\n  apiActions = [],\r\n  reducerActions = [],\r\n  defaultState = {}\r\n) => {\r\n  let initialState = {\r\n    loading: false\r\n  };\r\n  apiActions.forEach((value) => {\r\n    const lastState = initialState;\r\n    initialState = {\r\n      ...lastState,\r\n      [value.stateName]: undefined\r\n    };\r\n  });\r\n  reducerActions.forEach((value) => {\r\n    const lastState = initialState;\r\n    initialState = {\r\n      ...lastState,\r\n      [value.stateName]: undefined\r\n    };\r\n  });\r\n  if (defaultState) {\r\n    const lastState = initialState;\r\n    initialState = {\r\n      ...lastState,\r\n      ...defaultState\r\n    };\r\n  }\r\n\r\n  let initialReducerActions = {};\r\n  apiActions.forEach((value) => {\r\n    const lastReducer = initialReducerActions;\r\n    initialReducerActions = {\r\n      ...lastReducer,\r\n      [`${value.actionName}Started`]: (state) => ({\r\n        ...state,\r\n        loading: true,\r\n        [`${value.actionName}Error`]: false,\r\n        [`${value.actionName}Errors`]: null\r\n      }),\r\n      [`${value.actionName}Success`]: (state, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        [value.stateName]: payload.result\r\n      }),\r\n      [`${value.actionName}Failed`]: (state, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        [`${value.actionName}Errors`]: payload,\r\n        [`${value.actionName}Error`]: true\r\n      }),\r\n      [`${value.actionName}CleanError`]: (state) => ({\r\n        ...state,\r\n        [`${value.actionName}Errors`]: null,\r\n        [`${value.actionName}Error`]: false\r\n      }),\r\n      [`${value.actionName}CleanData`]: (state) => ({\r\n        ...state,\r\n        [value.stateName]: null\r\n      })\r\n    };\r\n  });\r\n  reducerActions.forEach((value) => {\r\n    const lastReducer = initialReducerActions;\r\n    initialReducerActions = {\r\n      ...lastReducer,\r\n      [value.actionName]: (state, { payload }) => ({\r\n        ...state,\r\n        [value.stateName]: payload\r\n      })\r\n    };\r\n  });\r\n\r\n  const slice = createSlice({\r\n    slice: moduleName,\r\n    initialState,\r\n    reducers: initialReducerActions\r\n  });\r\n\r\n  let exportApiActions = {};\r\n  apiActions.forEach((value) => {\r\n    const lastExportActions = exportApiActions;\r\n    exportApiActions = {\r\n      ...lastExportActions,\r\n      [value.actionName]: createOperation({\r\n        actions: {\r\n          startAction: slice.actions[`${value.actionName}Started`],\r\n          successAction: slice.actions[`${value.actionName}Success`],\r\n          failAction: slice.actions[`${value.actionName}Failed`]\r\n        },\r\n        process: ({ payload }) => api[value.method](payload)\r\n      })\r\n    };\r\n  });\r\n\r\n  return {\r\n    reducer: slice.reducer,\r\n    actions: { ...slice.actions, ...exportApiActions }\r\n  };\r\n};\r\n\r\nexport default CreateResourceHandler;\r\n","import createResourceHandler from '../../../utils/createResourceHandler';\r\n\r\nconst reducerActions = [\r\n  {\r\n    actionName: 'selectItem',\r\n    stateName: 'selectedItem'\r\n  },\r\n  {\r\n    actionName: 'selectSubMenu',\r\n    stateName: 'selectedSubMenu'\r\n  },\r\n  {\r\n    actionName: 'setCollapse',\r\n    stateName: 'isCollapsed'\r\n  }\r\n];\r\nconst defaultState = {\r\n  selectedItem: [],\r\n  selectedSubMenu: [],\r\n  isCollapsed: false\r\n};\r\n\r\nconst store = createResourceHandler('layout', [], reducerActions, defaultState);\r\n\r\nexport const { actions, reducer } = store;\r\n","import createResourceHandler from '../../../utils/createResourceHandler';\r\n\r\nconst reducerActions = [\r\n  {\r\n    actionName: 'switchLanguage',\r\n    stateName: 'locale'\r\n  }\r\n];\r\nconst defaultState = {\r\n  locale: 'vi'\r\n};\r\n\r\nconst store = createResourceHandler('languageSwitcher', [], reducerActions, defaultState);\r\n\r\nexport const { actions, reducer } = store;\r\n","import createResourceHandler from '../../../utils/createResourceHandler';\r\n\r\nconst apiActions = [\r\n  {\r\n    actionName: 'getProjects',\r\n    stateName: 'list',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'getProject',\r\n    stateName: 'project',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'createProject',\r\n    stateName: 'createProjectResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'updateProject',\r\n    stateName: 'updateProjectResult',\r\n    method: 'PUT'\r\n  },\r\n  {\r\n    actionName: 'removeProject',\r\n    stateName: 'removeProjectResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'getJoinedMembers',\r\n    stateName: 'joinedMembers',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'addMember',\r\n    stateName: 'addMemberResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'removeMember',\r\n    stateName: 'removeMemberResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'updateMember',\r\n    stateName: 'updateMemberResult',\r\n    method: 'PUT'\r\n  },\r\n  {\r\n    actionName: 'getMemberHistory',\r\n    stateName: 'members',\r\n    method: 'POST'\r\n  }\r\n];\r\n\r\nconst reducerActions = [];\r\n\r\nconst defaultState = {\r\n  list: [],\r\n  project: null,\r\n  members: null,\r\n  joinedMembers: null,\r\n  createProjectResult: null,\r\n  updateProjectResult: null,\r\n  removeProjectResult: null,\r\n  addMemberResult: null,\r\n  updateMemberResult: null,\r\n  removeMemberResult: null\r\n};\r\n\r\nconst store = createResourceHandler('projects', apiActions, reducerActions, defaultState);\r\n\r\nexport const { actions, reducer } = store;\r\n","import createResourceHandler from '../../../utils/createResourceHandler';\r\n\r\nconst apiActions = [\r\n  {\r\n    actionName: 'getCustomers',\r\n    stateName: 'list',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'getProjectsByCustomer',\r\n    stateName: 'projectsOfCustomer',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'getCustomer',\r\n    stateName: 'customer',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'createCustomer',\r\n    stateName: 'createCustomerResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'updateCustomer',\r\n    stateName: 'updateCustomerResult',\r\n    apiUrl: 'customers',\r\n    method: 'PUT'\r\n  },\r\n  {\r\n    actionName: 'removeCustomer',\r\n    stateName: 'removeCustomerResult',\r\n    method: 'POST'\r\n  },\r\n];\r\n\r\nconst reducerActions = [\r\n  {\r\n    actionName: 'cleanGetCustomersError',\r\n    stateName: 'getCustomersError'\r\n  }\r\n];\r\n\r\nconst defaultState = {\r\n  list: [],\r\n  customer: null,\r\n  projectsOfCustomer:[], \r\n  createCustomerResult: null,\r\n  updateCustomerResult: null,\r\n  removeCustomerResult: null\r\n};\r\n\r\nconst store = createResourceHandler('customers', apiActions, reducerActions, defaultState);\r\n\r\nexport const { actions, reducer } = store;\r\n","import createResourceHandler from '../../../utils/createResourceHandler';\r\n\r\nconst apiActions = [\r\n  {\r\n    actionName: 'getMembers',\r\n    stateName: 'list',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'createMember',\r\n    stateName: 'createMemberResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'updateMember',\r\n    stateName: 'updateMemberResult',\r\n    apiUrl: 'members',\r\n    method: 'PUT'\r\n  },\r\n  {\r\n    actionName: 'removeMember',\r\n    stateName: 'removeMemberResult',\r\n    method: 'POST'\r\n  },\r\n];\r\n\r\nconst reducerActions = [\r\n  {\r\n    actionName: 'cleanGetMembersError',\r\n    stateName: 'getMembersError'\r\n  }\r\n];\r\n\r\nconst defaultState = {\r\n  list: [],\r\n  createMemberResult: null,\r\n  updateMemberResult: null,\r\n  removeMemberResult: null,\r\n};\r\n\r\nconst store = createResourceHandler('members', apiActions, reducerActions, defaultState);\r\n\r\nexport const { actions, reducer } = store;\r\n","import createResourceHandler from '../../../utils/createResourceHandler';\r\n\r\nconst apiActions = [\r\n  {\r\n    actionName: 'getValueTypes',\r\n    stateName: 'valueTypes',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'getBaseCustomFields',\r\n    stateName: 'baseCustomFields',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'createCustomField',\r\n    stateName: 'createCustomFieldResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'getCustomFields',\r\n    stateName: 'customfields',\r\n    method: 'GET'\r\n  },\r\n  {\r\n    actionName: 'removeCustomField',\r\n    stateName: 'removeCustomFieldResult',\r\n    method: 'DELETE'\r\n  },\r\n  {\r\n    actionName: 'updateCustomField',\r\n    stateName: 'updateCustomFieldResult',\r\n    method: 'PUT'\r\n  },\r\n  {\r\n    actionName: 'createAssigneeProject',\r\n    stateName: 'createAssigneeProjectResult',\r\n    method: 'POST'\r\n  },\r\n  {\r\n    actionName: 'removeAssigneeProject',\r\n    stateName: 'removeAssigneeProjectResult',\r\n    method: 'DELETE'\r\n  },\r\n];\r\n\r\nconst reducerActions = [\r\n  {\r\n    actionName: 'cleanCustomFieldError',\r\n    stateName: 'getCustomFieldError'\r\n  }\r\n];\r\n\r\nconst defaultState = {\r\n  customfields: [],\r\n  customfield: null,\r\n  createCustomFieldResult: null,\r\n  removeCustomFieldResult: null,\r\n  getCustomFieldResult: null,\r\n  updateCustomFieldResult: null,\r\n  createAssigneeProjectResult: null,\r\n  removeAssigneeProjectResult: null\r\n};\r\n\r\nconst store = createResourceHandler('setting', apiActions, reducerActions, defaultState);\r\n\r\nexport const { actions, reducer } = store;\r\n","const initState = {\r\n  isShow: true\r\n};\r\n\r\nexport const layoutReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'HIDE_LAYOUT':\r\n      return {\r\n        ...state,\r\n        isShow: false\r\n      };\r\n    case 'SHOW_LAYOUT':\r\n      return {\r\n        ...state,\r\n        isShow: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initState = {\r\n  isLogin: false,\r\n  user: {}\r\n};\r\n\r\nexport const authReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        isLogin: true,\r\n        user: action.user\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { configureStore, getDefaultMiddleware, combineReducers } from 'redux-starter-kit';\r\nimport { routerReducer, routerMiddleware } from 'react-router-redux';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport { reducer as layoutSliderReducer } from '../modules/layout/store';\r\nimport { reducer as languageSwitcherReducer } from '../modules/languageSwitcher/store';\r\nimport { reducer as projectsReducer } from '../modules/project/store';\r\nimport { reducer as customersReducer } from '../modules/customer/store';\r\nimport { reducer as membersReducer } from '../modules/member/store';\r\nimport { reducer as settingReducer } from '../modules/setting/store';\r\n\r\nimport { layoutReducer } from '../reducers/layoutReducer';\r\nimport { authReducer } from '../reducers/authReducer';\r\n\r\n\r\nexport const history = createBrowserHistory();\r\nconst routeMiddleware = routerMiddleware(history);\r\n\r\nexport const rootReducer = combineReducers({\r\n  router: routerReducer,\r\n  layout: layoutReducer,\r\n  layoutSlider: layoutSliderReducer,\r\n  languageSwitcher: languageSwitcherReducer,\r\n  auth: authReducer,\r\n  projects: projectsReducer,\r\n  customers: customersReducer,\r\n  members: membersReducer,\r\n  setting: settingReducer\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [routeMiddleware, ...getDefaultMiddleware({ serializableCheck: false })],\r\n  devTools: process.env.NODE_ENV !== 'production'\r\n});\r\n\r\nexport default store;\r\n","import antdEn from 'antd/lib/locale-provider/en_US';\r\nimport appLocaleData from 'react-intl/locale-data/en';\r\nimport enMessages from '../locales/en_US';\r\n\r\nconst EnLang = {\r\n  messages: {\r\n    ...enMessages\r\n  },\r\n  antd: antdEn,\r\n  locale: 'en-US',\r\n  data: appLocaleData\r\n};\r\n\r\nexport default EnLang;\r\n","import antdVi from 'antd/lib/locale-provider/vi_VN';\r\nimport appLocaleData from 'react-intl/locale-data/vi';\r\nimport viMessages from '../locales/vi_VN';\r\n\r\nconst ViLang = {\r\n  messages: {\r\n    ...viMessages\r\n  },\r\n  antd: antdVi,\r\n  locale: 'vi-VN',\r\n  data: appLocaleData\r\n};\r\n\r\nexport default ViLang;\r\n","import Enlang from './entries/en_US';\r\nimport Vilang from './entries/vi_VN';\r\n\r\nimport { addLocaleData } from 'react-intl';\r\n\r\nconst AppLocale = {\r\n  en: Enlang,\r\n  vi: Vilang\r\n};\r\naddLocaleData(AppLocale.en.data);\r\naddLocaleData(AppLocale.vi.data);\r\n\r\nexport default AppLocale;\r\n","const hideLayout = 'HIDE_LAYOUT';\r\nconst showLayout = 'SHOW_LAYOUT';\r\n\r\nexport const dispatchHideLayout = (dispatch) => {\r\n  dispatch({ type: hideLayout });\r\n};\r\n\r\nexport const dispatchShowLayout = (dispatch) => {\r\n  dispatch({ type: showLayout });\r\n};\r\n","const login = 'LOGIN';\r\n\r\nexport const dispatchLogin = (dispatch, user) => {\r\n  console.log('user', user);\r\n  dispatch({ type: login, user });\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { SyncLoader } from 'react-spinners';\r\nimport { css } from '@emotion/core';\r\nimport jwtDecode from 'jwt-decode';\r\nimport Cookies from 'js-cookie';\r\nimport { Row } from 'antd';\r\n\r\nimport { dispatchHideLayout, dispatchShowLayout } from '../actions/layout';\r\nimport { dispatchLogin } from '../actions/auth';\r\nimport { authApi } from '../api/auth/authApi';\r\n\r\nfunction LoadingPage(props) {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatchHideLayout(dispatch);\r\n\r\n    authApi.refreshLogin().then((userLogin) => {\r\n      if (userLogin.data.statusCode === 400) {\r\n        Cookies.remove('access-token', { path: '/' });\r\n        props.history.push('/login');\r\n      } else {\r\n        const userInfo = jwtDecode(userLogin.data.access_token);\r\n        localStorage.setItem('expresIn', userInfo.exp * 1000);\r\n        Cookies.set('access-token', userLogin.data.access_token, { secure: false, path: '/' });\r\n        dispatchShowLayout(dispatch);\r\n        dispatchLogin(dispatch, { ...userInfo });\r\n      }\r\n    });\r\n    // eslint-disable-next-line react/destructuring-assignment\r\n  }, [dispatch, props.location.search, props.history]);\r\n\r\n  const override = css`\r\n    display: block;\r\n\r\n    color: red;\r\n  `;\r\n\r\n  return (\r\n    <Row\r\n      style={{\r\n        backgroundColor: '#fff',\r\n        width: '100vw',\r\n        height: '100vh',\r\n        paddingTop: 100,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n      }}>\r\n      <h2 style={{ color: '#747CDD', marginRight: 10 }}>Loading</h2>\r\n      <SyncLoader css={override} sizeUnit=\"px\" size={10} color=\"#747CDD\" />\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default LoadingPage;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport LoadingPage from '../pages/LoadingPage';\r\n\r\nfunction RouteNormal({ component: Component, ...rest }) {\r\n  const user = useSelector((state) => state.auth);\r\n  const checkAuth = user.isLogin;\r\n  return (\r\n    <>\r\n      {checkAuth ? (\r\n        <Route {...rest} render={(props) => <Component {...props}></Component>} />\r\n      ) : (\r\n        <Route {...rest} component={LoadingPage} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RouteNormal;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport LoadingPage from '../pages/LoadingPage';\r\n\r\nfunction RouteWithManager({ component: Component, ...rest }) {\r\n  const user = useSelector((state) => state.auth);\r\n  const checkAuth = user.isLogin;\r\n  const checkRole = user.user.type === 'manager' || user.user.type === 'admin';\r\n  const renderRoute = (props) => {\r\n    if (checkRole) {\r\n      return <Component {...props}></Component>;\r\n    }\r\n    return <p>Ban khong co quyen truy cap</p>;\r\n  };\r\n  return (\r\n    <>\r\n      {checkAuth ? (\r\n        <Route {...rest} render={(props) => renderRoute(props)}></Route>\r\n      ) : (\r\n        <Route {...rest} component={LoadingPage}></Route>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RouteWithManager;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport LoadingPage from '../pages/LoadingPage';\r\n\r\nfunction RouteWithAdmin({ component: Component, ...rest }) {\r\n  const user = useSelector((state) => state.auth);\r\n  const checkAuth = user.isLogin;\r\n  const checkRole = user.user.type === 'admin';\r\n  const renderRoute = (props) => {\r\n    if (checkRole) {\r\n      return <Component {...props}></Component>;\r\n    }\r\n    return <p>Ban khong co quyen</p>;\r\n  };\r\n  return (\r\n    <>\r\n      {checkAuth ? (\r\n        <Route {...rest} render={(props) => renderRoute(props)}></Route>\r\n      ) : (\r\n        <Route {...rest} component={LoadingPage}></Route>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RouteWithAdmin;\r\n","import React, { useEffect } from 'react';\r\nimport { gantt } from 'dhtmlx-gantt';\r\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\r\nimport 'dhtmlx-gantt/codebase/ext/dhtmlxgantt_tooltip.js';\r\n\r\nconst Gantt = ({ tasks, intl }) => {\r\n  let ganttContainer = null\r\n  useEffect(() => {\r\n    gantt.config = {\r\n      ...gantt.config,\r\n      scale_unit: 'month',\r\n      xml_date: \"%Y-%m-%d %H:%i\"\r\n    };\r\n    gantt.showLightbox = function (id) {\r\n      return null\r\n    }\r\n  }, [])\r\n  //fix language\r\n  useEffect(() => {\r\n    gantt.templates.tooltip_text = function (start, end, task) {\r\n      return `<b>${intl.formatMessage({ id: 'dashboard.projectName' })}:</b> ` + task.text + `<br/><b>${intl.formatMessage({ id: 'dashboard.startTime' })}:</b> `\r\n        + gantt.templates.tooltip_date_format(start)\r\n        + `<br/><b>${intl.formatMessage({ id: 'dashboard.endTime' })}:</b> `\r\n        + gantt.templates.tooltip_date_format(end);\r\n    };\r\n    gantt.config = {\r\n      ...gantt.config,\r\n      columns: [\r\n        { name: \"text\", label: intl.formatMessage({ id: 'dashboard.projectName' }), align: \"center\", width: \"*\" },\r\n        { name: \"start_date\", label: intl.formatMessage({ id: 'dashboard.startTime' }), align: \"center\", width: \"*\" },\r\n        { name: \"end_date\", label: intl.formatMessage({ id: 'dashboard.endTime' }), align: \"center\", width: \"*\" },\r\n      ],\r\n      date_scale: intl.formatMessage({ id: 'dashboard.config.scale' }),\r\n    }\r\n    gantt.init(ganttContainer);\r\n  }, [intl, ganttContainer])\r\n  //config\r\n  useEffect(() => {\r\n    gantt.clearAll();\r\n    gantt.init(ganttContainer);\r\n    gantt.parse(tasks);\r\n    gantt.render();\r\n  }, [ganttContainer, tasks])\r\n  return (\r\n    <div\r\n      ref={(input) => { ganttContainer = input }}\r\n      style={{ width: '100%', height: '100%' }}\r\n    ></div>\r\n  );\r\n}\r\nexport default Gantt;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Gantt from \"../modules/dashbroad/Gantt/Gantt\";\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as projectActions } from '../modules/project/store';\r\nimport moment from 'moment';\r\nimport { DatePicker, Radio } from 'antd';\r\nimport '../assets/styles/gantt/main.scss';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\n\r\nconst propTypes = {\r\n  history: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired\r\n\r\n};\r\n\r\nconst defaultProps = {};\r\nconst DashbroadPage = ({ history, intl }) => {\r\n  const dispatch = useDispatch();\r\n  const { RangePicker } = DatePicker;\r\n  const [data, setData] = useState({ data: null })\r\n  const [value, setValue] = useState([moment(new Date()).subtract(3, 'months'), moment(new Date())])\r\n  const [mode, setMode] = useState(['month', 'month'])\r\n  const { list } = useSelector(\r\n    (state) => state.projects\r\n  );\r\n  const { user } = useSelector(\r\n    (state) => state.auth\r\n  );\r\n  //hanlde when change time on monthpicker\r\n  const handlePanelChange = (value, mode) => {\r\n    setValue(value);\r\n    setMode([mode[0] === 'date' ? 'month' : mode[0], mode[1] === 'date' ? 'month' : mode[1]]);\r\n  }\r\n  //handle when change time on fast selector 3 months, 6 months, 1 year\r\n  const handleChange = (e) => {\r\n    setValue([moment(new Date()).subtract(e.target.value, 'months'), moment(new Date())])\r\n  }\r\n  //reload time space when change on buttons\r\n  useEffect(() => {\r\n    let colors = [\"#99cc00\", \"#BDC667\", \"#3C6174\", \"#0672AA\", \"#77966D\", \"#56282D\", \"#cc0000\", \"#0000ff\", \"#00ffcc\"];\r\n    if (value.length > 0) {\r\n      let startTime = moment(value[0]._d).format('YYYYMM');\r\n      let endTime = moment(value[1]._d).format('YYYYMM');\r\n      const result = list.filter(project =>\r\n        !(parseInt(moment(new Date(parseInt(project.start_time))).format('YYYYMM')) > parseInt(endTime) ||\r\n          parseInt(moment(new Date(parseInt(project.end_time))).format('YYYYMM')) < parseInt(startTime))\r\n      )\r\n      setData({ data: null })\r\n      setData({\r\n        data: result.map(project => {\r\n          return {\r\n            id: project.id, text: project.name,\r\n            end_date: moment(parseInt(project.end_time, 10)).format('YYYY-MM-DD'),\r\n            start_date: moment(parseInt(project.start_time, 10)).format('YYYY-MM-DD'),\r\n            readonly: true,\r\n            color: colors[project.id % colors.length],\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }, [value, list])\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['dashboard']));\r\n    user.type === \"admin\" ?\r\n      dispatch(\r\n        projectActions.getProjects({\r\n          path: 'projects'\r\n        })\r\n      ) : dispatch(\r\n        projectActions.getProjects({\r\n          path: `projects/byUser/${user.staff_code}`\r\n        })\r\n      );\r\n  }, [dispatch, user]);\r\n  return (\r\n    <div>\r\n      <div className=\"zoom-bar\">\r\n        <div className=\"tool-bar\">\r\n          <div>\r\n            <Radio.Group defaultValue=\"3\" onChange={handleChange}>\r\n              <Radio.Button value=\"3\"><FormattedMessage id=\"dashboard.threeMonths\" /></Radio.Button>\r\n              <Radio.Button value=\"6\"><FormattedMessage id=\"dashboard.sixMonths\" /></Radio.Button>\r\n              <Radio.Button value=\"12\"><FormattedMessage id=\"dashboard.oneYear\" /></Radio.Button>\r\n            </Radio.Group>\r\n          </div>\r\n          <div>\r\n            <RangePicker\r\n              placeholder={['Start month', 'End month']}\r\n              format=\"YYYY-MM\"\r\n              mode={mode}\r\n              value={value}\r\n              onPanelChange={handlePanelChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {data.data &&\r\n        <div className=\"gantt-container\">\r\n          {data.data && <Gantt\r\n            tasks={data}\r\n            intl={intl}\r\n          />}\r\n        </div>}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nDashbroadPage.propTypes = propTypes;\r\n\r\nDashbroadPage.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(DashbroadPage, {});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Typography, Divider } from 'antd';\r\n\r\nconst propTypes = {\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]).isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst HeaderTitle = React.memo(({ title }) => (\r\n  <React.Fragment>\r\n    <Typography.Title level={2}>{title}</Typography.Title>\r\n    <Divider />\r\n  </React.Fragment>\r\n));\r\n\r\nHeaderTitle.propTypes = propTypes;\r\n\r\nHeaderTitle.defaultProps = defaultProps;\r\n\r\nexport default HeaderTitle;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { history } from '../../../../store';\r\nimport moment from 'moment';\r\nimport { css } from 'emotion';\r\n\r\nimport { List, Skeleton, Typography, Row, Tag } from 'antd';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nconst propTypes = {\r\n  list: PropTypes.arrayOf(PropTypes.shape({})).isRequired\r\n};\r\n\r\nconst styles = {\r\n  title: css`\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n  `,\r\n  listItem: css`\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: #f1f1f1;\r\n    }\r\n  `\r\n};\r\n\r\nconst ProjectsList = ({ list }) => {\r\n  const onSelectProject = (item) => {\r\n    history.push(`/project/detail/${item.id}`);\r\n  };\r\n\r\n  return (\r\n    <List\r\n      itemLayout=\"horizontal\"\r\n      dataSource={list}\r\n      renderItem={(item) => (\r\n        <List.Item onClick={() => onSelectProject(item)} className={styles.listItem}>\r\n          <Skeleton loading={false} active>\r\n            <List.Item.Meta\r\n              title={\r\n                <Row style={{ marginLeft: 5 }} className={styles.title}>\r\n                  {item.name}\r\n                </Row>\r\n              }\r\n              description={\r\n                <Row style={{ marginLeft: 5 }}>\r\n                  <Typography.Paragraph style={{ margin: 0 }}>\r\n                  <FormattedMessage id=\"projects.getProjects.customer\" />:&nbsp;{item.customer.name}\r\n                  </Typography.Paragraph>\r\n                  <Typography.Paragraph style={{ margin: 0 }}>\r\n                    <FormattedMessage id=\"projects.getProjects.date\" />\r\n                    :&nbsp;\r\n                    {moment(parseInt(item.start_time, 10)).format('DD/MM/YYYY')} -&nbsp;\r\n                    {item.end_time\r\n                      ? moment(parseInt(item.end_time, 10)).format('DD/MM/YYYY')\r\n                      : null}\r\n                  </Typography.Paragraph>\r\n                </Row>\r\n              }\r\n            />\r\n            <Row>\r\n              {item.status === 'running' && <Tag color=\"#108ee9\"><FormattedMessage id=\"projects.status.running\" /></Tag>}\r\n              {item.status === 'stopped' && <Tag color=\"#f5222D\"><FormattedMessage id=\"projects.status.stopped\" /></Tag>}\r\n              {item.status === 'completed' && <Tag color=\"#87d068\"><FormattedMessage id=\"projects.status.completed\" /></Tag>}\r\n            </Row>\r\n          </Skeleton>\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nProjectsList.propTypes = propTypes;\r\n\r\nexport default ProjectsList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { notification, Icon } from 'antd';\r\n\r\nconst propTypes = {\r\n  title: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string]).isRequired,\r\n  message: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string]).isRequired\r\n};\r\n\r\nconst ErrorNotification = (title, message) =>\r\n  notification.open({\r\n    message: <span style={{ color: '#f5222d', fontWeight: 'bold' }}>{title}</span>,\r\n    description: message,\r\n    duration: 2.5,\r\n    icon: <Icon type=\"frown\" style={{ color: '#f5222d' }} />\r\n  });\r\n\r\nErrorNotification.propTypes = propTypes;\r\n\r\nexport default ErrorNotification;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { notification, Icon } from 'antd';\r\n\r\nconst propTypes = {\r\n  title: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string]).isRequired,\r\n  message: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string]).isRequired\r\n};\r\n\r\nconst SuccessNotification = (title, message) =>\r\n  notification.open({\r\n    message: <span style={{ color: '#4cd964', fontWeight: 'bold' }}>{title}</span>,\r\n    description: message,\r\n    duration: 2.5,\r\n    icon: <Icon type=\"smile\" style={{ color: '#4cd964' }} />\r\n  });\r\n\r\nSuccessNotification.propTypes = propTypes;\r\n\r\nexport default SuccessNotification;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { formShape } from 'rc-form';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  Button,\r\n  Input,\r\n  DatePicker,\r\n  Select,\r\n  Form,\r\n  Typography,\r\n  Descriptions,\r\n  Icon,\r\n  Popconfirm,\r\n  Spin\r\n} from 'antd';\r\n\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport { actions as customerActions } from '../../../customer/store';\r\nimport { actions as projectActions } from '../../store';\r\n\r\nconst propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired,\r\n  form: formShape.isRequired,\r\n  intl: PropTypes.shape({}).isRequired,\r\n\r\n  selectedCustomer: PropTypes.shape({}),\r\n\r\n  createProject: PropTypes.func.isRequired,\r\n  getProjects: PropTypes.func.isRequired,\r\n  getCustomers: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n  selectedCustomer: {}\r\n};\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 5\r\n  },\r\n  wrapperCol: {\r\n    span: 19\r\n  }\r\n};\r\n\r\nconst listStatus = [\r\n  { id: 1, name: 'running' },\r\n  { id: 2, name: 'completed' },\r\n  { id: 3, name: 'stopped' }\r\n];\r\n\r\nconst CreateProject = ({\r\n  visible,\r\n  close,\r\n  form,\r\n  selectedCustomer,\r\n  intl,\r\n  createProject,\r\n  getProjects,\r\n  getCustomers\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [customerDetail, setCustomerDetail] = useState(selectedCustomer);\r\n  const { getCustomersError, getCustomersErrors } = useSelector((state) => state.customers);\r\n  const customersList = useSelector((state) => state.customers.list);\r\n  const customerLoading = useSelector((state) => state.customers.loading);\r\n  const { createProjectError, createProjectErrors, createProjectResult, loading } = useSelector(\r\n    (state) => state.projects\r\n  );\r\n\r\n  const {\r\n    user: { staff_code }\r\n  } = useSelector((state) => state.auth);\r\n  // Get all customers after open modal\r\n  useEffect(() => {\r\n    getCustomers && getCustomers();\r\n    dispatch(projectActions.createProjectCleanData());\r\n    dispatch(projectActions.createProjectCleanError());\r\n  }, [getCustomers, dispatch]);\r\n\r\n  // show notification if get customers failure\r\n  useEffect(() => {\r\n    if (getCustomersError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: 'customers.getCustomers.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(customerActions.getCustomersCleanError());\r\n    }\r\n  }, [dispatch, getCustomersError, getCustomersErrors, intl]);\r\n\r\n  // Handle showing notification after add new project\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (createProjectResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: createProjectResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean state\r\n      close();\r\n      // re-call get all projects api\r\n      getProjects && getProjects();\r\n    }\r\n  }, [close, dispatch, intl, createProjectResult, getProjects]);\r\n\r\n  useEffect(() => {\r\n    // show error notification\r\n    if (createProjectError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: createProjectErrors.message\r\n          ? createProjectError.message\r\n          : 'projects.createProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(projectActions.createProjectCleanError());\r\n    }\r\n  }, [dispatch, intl, createProjectError, createProjectErrors]);\r\n\r\n  // Form submit\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          customer_id: values.customer_id,\r\n          name: values.name,\r\n          status: values.status,\r\n          start_time: parseInt(moment(values.estimated[0]).format('x'), 10),\r\n          end_time: parseInt(moment(values.estimated[1]).format('x'), 10),\r\n          staff_code\r\n        };\r\n        // call api when valid data\r\n        createProject && createProject(body);\r\n        // form.resetFields();\r\n        setTimeout(() => {\r\n          window.location.reload()\r\n        }, 0)\r\n      } else {\r\n        // showing error form input notification\r\n        const title = intl.formatMessage({ id: 'notification.error' });\r\n        const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n        ErrorNotification(title, message);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSelect = (value) => {\r\n    customersList.map((customer) => {\r\n      if (customer.id === value) {\r\n        setCustomerDetail(customer);\r\n      }\r\n      return customer;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={<FormattedMessage id=\"projects.createProject.title\" />}\r\n      cancelText=\"Close\"\r\n      visible={visible}\r\n      width=\"50vw\"\r\n      onCancel={() => close()}\r\n      maskClosable={false}\r\n      footer={[\r\n        <Row type=\"flex\" key=\"cp_footer\" justify=\"end\">\r\n          <Popconfirm\r\n            title={<FormattedMessage id=\"projects.createProject.confirm.add\" />}\r\n            onConfirm={() => handleSubmit()}\r\n            okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n            cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n            <Button icon=\"plus\" type=\"primary\" loading={loading}>\r\n              {<FormattedMessage id=\"button.add\" />}\r\n            </Button>\r\n          </Popconfirm>\r\n\r\n          <Button icon=\"close-circle\" type=\"default\" key=\"close\" onClick={() => close()}>\r\n            {<FormattedMessage id=\"button.close\" />}\r\n          </Button>\r\n        </Row>\r\n      ]}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"project\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"projects.createProject.projectInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.projectName\" />}\r\n          validateStatus={form.getFieldError('name') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('name', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.name' })\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.status\" />}\r\n          validateStatus={form.getFieldError('status') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('status', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.status' })\r\n              }\r\n            ]\r\n          })(\r\n            <Select allowClear>\r\n              {(listStatus || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.name}>\r\n                    <FormattedMessage id={`projects.status.${e.name}`} />\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.Estimated\" />}\r\n          validateStatus={form.getFieldError('estimated') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('estimated', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.estimated' })\r\n              }\r\n            ]\r\n          })(\r\n            <DatePicker.RangePicker\r\n              format=\"DD/MM/YYYY\"\r\n              placeholder={[\r\n                intl.formatMessage({ id: 'projects.createProject.startDate' }),\r\n                intl.formatMessage({ id: 'projects.createProject.endDate' })\r\n              ]}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            <FormattedMessage id=\"projects.createProject.customerInformation\" />\r\n          </Typography.Text>\r\n        </Row>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.customer\" />}\r\n          validateStatus={form.getFieldError('customer_id') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('customer_id', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.customer' })\r\n              }\r\n            ]\r\n          })(\r\n            <Select\r\n              allowClear\r\n              autoClearSearchValue\r\n              onSelect={(value) => handleSelect(value)}\r\n              notFoundContent={customerLoading && <Spin size=\"small\" />}>\r\n              {(customersList || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.id}>\r\n                    {e.name}\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Row>\r\n          <Col span={5}></Col>\r\n          <Col span={19}>\r\n            <Descriptions column={1}>\r\n              <Descriptions.Item\r\n                label={<FormattedMessage id=\"projects.createProject.customerEmail\" />}>\r\n                {customerDetail.email || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                label={<FormattedMessage id=\"projects.createProject.customerPhonenumber\" />}>\r\n                {customerDetail.phone_number || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                label={<FormattedMessage id=\"projects.createProject.customerAddress\" />}>\r\n                {customerDetail.address || null}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCreateProject.propTypes = propTypes;\r\n\r\nCreateProject.defaultProps = defaultProps;\r\n\r\nconst CreateProjectForm = Form.create({ name: 'createProject' })(CreateProject);\r\n\r\nexport default injectIntl(CreateProjectForm, {});\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction WithRole({ component: Component, type = [], ...rest }) {\r\n  const user = useSelector((state) => state.auth);\r\n  const checkRole = type.includes(user.user.type);\r\n\r\n  return <>{checkRole ? <Component {...rest}/> : null }</>;\r\n}\r\n\r\nexport default WithRole;\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col, Tabs, Tag, Button, Skeleton } from 'antd';\r\nimport { css } from 'emotion';\r\n\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as projectActions } from '../modules/project/store';\r\nimport { actions as customerActions } from '../modules/customer/store';\r\n\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport ProjectsList from '../modules/project/projects/components/ProjectsList';\r\nimport CreateProject from '../modules/project/createProject/components/CreateProject';\r\nimport ErrorNotification from '../components/Notification/Error';\r\nimport WithRole from '../hocs/WithRole';\r\n\r\nconst propTypes = {\r\n  history: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst styles = {\r\n  addCustomerButton: css`\r\n    background: #49a32b !important;\r\n    color: #fff !important;\r\n    margin-bottom: 15px;\r\n  `\r\n};\r\n\r\nconst ButtonAdd = ({ handleCreateModal }) => {\r\n  return (\r\n    <Button icon=\"folder-add\" className={styles.addCustomerButton} onClick={handleCreateModal}>\r\n      <FormattedMessage id=\"button.add\" />\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst ProjectsPage = ({ history, intl }) => {\r\n  const dispatch = useDispatch();\r\n  const { list, loading, getProjectsError, getProjectsErrors } = useSelector(\r\n    (state) => state.projects\r\n  );\r\n  const { user } = useSelector((state) => state.auth);\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  // check authencation if not redirect to login page\r\n\r\n  // get projects list\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['project']));\r\n    user.type === \"admin\" ?\r\n      dispatch(\r\n        projectActions.getProjects({\r\n          path: 'projects'\r\n        })\r\n      ) : dispatch(\r\n        projectActions.getProjects({\r\n          path: `projects/byUser/${user.staff_code}`\r\n        })\r\n      );\r\n  }, [dispatch, user]);\r\n\r\n  // show notification if get projects list failure\r\n  useEffect(() => {\r\n    if (getProjectsError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getProjectsErrors.message\r\n          ? getProjectsErrors.message\r\n          : 'projects.getProjects.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(projectActions.getProjectsCleanError());\r\n    }\r\n  }, [dispatch, getProjectsError, getProjectsErrors, intl]);\r\n\r\n  const getProjects = useCallback(() => {\r\n    user.type === \"admin\" ?\r\n      dispatch(\r\n        projectActions.getProjects({\r\n          path: 'projects'\r\n        })\r\n      ) : dispatch(\r\n        projectActions.getProjects({\r\n          path: `projects/byUser/${user.staff_code}`\r\n        })\r\n      );\r\n  }, [dispatch, user]);\r\n\r\n  const getCustomers = useCallback(() => {\r\n    dispatch(\r\n      customerActions.getCustomers({\r\n        path: 'customers'\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  const createProject = useCallback(\r\n    (body) => {\r\n      dispatch(projectActions.createProject({ body, path: 'projects' }));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const handleCreateModal = () => {\r\n    setVisible(!visible);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <HeaderTitle title={<FormattedMessage id=\"projects.getProjects.title\" />} />\r\n      <WithRole type={['admin']} component={ButtonAdd} handleCreateModal={handleCreateModal} />\r\n      <Row gutter={16}>\r\n        <Col span={12}>\r\n          <Tabs defaultActiveKey=\"1\">\r\n            <Tabs.TabPane\r\n              tab={\r\n                <Tag color=\"#108ee9\">\r\n                  <FormattedMessage id=\"projects.status.running\" />\r\n                </Tag>\r\n              }\r\n              key=\"1\">\r\n              <Skeleton loading={loading} active paragraph={{ rows: 10 }}>\r\n                <ProjectsList list={list.filter((item) => item.status === 'running')} />\r\n              </Skeleton>\r\n            </Tabs.TabPane>\r\n            <Tabs.TabPane\r\n              tab={\r\n                <Tag color=\"#87d068\">\r\n                  <FormattedMessage id=\"projects.status.completed\" />\r\n                </Tag>\r\n              }\r\n              key=\"3\">\r\n              <Skeleton loading={loading} active paragraph={{ rows: 10 }}>\r\n                <ProjectsList list={list.filter((item) => item.status === 'completed')} />\r\n              </Skeleton>\r\n            </Tabs.TabPane>\r\n            <Tabs.TabPane\r\n              tab={\r\n                <Tag color=\"#f5222D\">\r\n                  <FormattedMessage id=\"projects.status.stopped\" />\r\n                </Tag>\r\n              }\r\n              key=\"2\">\r\n              <Skeleton loading={loading} active paragraph={{ rows: 10 }}>\r\n                <ProjectsList list={list.filter((item) => item.status === 'stopped')} />\r\n              </Skeleton>\r\n            </Tabs.TabPane>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n      {visible && (\r\n        <CreateProject\r\n          visible={visible}\r\n          close={() => setVisible(!visible)}\r\n          getProjects={getProjects}\r\n          createProject={createProject}\r\n          getCustomers={getCustomers}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nProjectsPage.propTypes = propTypes;\r\n\r\nProjectsPage.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(ProjectsPage, {});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, Button, Tooltip } from 'antd';\r\nimport '../../../assets/styles/diagrams/main.scss';\r\nimport createEngine, { DefaultNodeModel, DiagramModel } from '@projectstorm/react-diagrams';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n\r\nconst propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired\r\n};\r\n\r\nconst MemberDiagram = ({ visible, close, project, joinedMembers }) => {\r\n  const engine = createEngine();\r\n  const listPo = [];\r\n  const listPm = [];\r\n  const listBrse = [];\r\n  const listComtor = [];\r\n  const listDev = [];\r\n  const model = new DiagramModel();\r\n\r\n  const listAssigneeUnDefault = project && project.assigneeProject.filter(e => e.member_be_link_id !== \"Default\");\r\n  const listAssignee = project && project.assigneeProject;\r\n\r\n  joinedMembers &&\r\n    joinedMembers.list.forEach((member) => {\r\n      switch (member.role) {\r\n        case 'po':\r\n          listPo.push(member);\r\n          break;\r\n        case 'pm':\r\n          listPm.push(member);\r\n          break;\r\n        case 'brse':\r\n          listBrse.push(member);\r\n          break;\r\n        case 'comtor':\r\n          listComtor.push(member);\r\n          break;\r\n        case 'dev':\r\n          listDev.push(member);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  if (listPo.length > 0) {\r\n    var nodePoTitle = new DefaultNodeModel({\r\n      name: <FormattedMessage id=\"projects.addMember.role.po\" />,\r\n      color: '#A4CFBB',\r\n      locked: true,\r\n      key:'po'\r\n    });\r\n    nodePoTitle.setPosition(150, 150);\r\n    listPo.forEach((po, index) => {\r\n      const node = new DefaultNodeModel({\r\n        name: po['member_detail'].full_name,\r\n        color: '#A4CFBB',\r\n        id: `${po['member_detail'].staff_code}`,\r\n        role: 'po',\r\n        width: 500,\r\n        height: 200,\r\n        key:`${po['member_detail'].staff_code}`\r\n      });\r\n      node.setPosition(150, 150 + (1 + index) * 70);\r\n      model.addNode(node);\r\n    });\r\n  }\r\n  if (listPm.length > 0) {\r\n    var nodePmTitle = new DefaultNodeModel({\r\n      name: <FormattedMessage id=\"projects.addMember.role.pm\" />,\r\n      color: '#0B3954',\r\n      locked: true,\r\n      key:\"pm\"\r\n    });\r\n    nodePmTitle.setPosition(350, 150);\r\n    listPm.forEach((pm, index) => {\r\n      const node = new DefaultNodeModel({\r\n        name: pm['member_detail'].full_name,\r\n        color: '#0B3954',\r\n        id: `${pm['member_detail'].staff_code}`,\r\n        role: 'pm',\r\n        key:`${pm['member_detail'].staff_code}`\r\n      });\r\n      node.setPosition(350, 150 + (1 + index) * 70);\r\n      model.addNode(node);\r\n    });\r\n  }\r\n  if (listBrse.length > 0) {\r\n    var nodeBrseTitle = new DefaultNodeModel({\r\n      name: <FormattedMessage id=\"projects.addMember.role.brse\" />,\r\n      color: '#087E8B',\r\n      locked: true,\r\n      key:\"brse\"\r\n    });\r\n    nodeBrseTitle.setPosition(550, 150);\r\n    listBrse.forEach((brse, index) => {\r\n      const node = new DefaultNodeModel({\r\n        name: brse['member_detail'].full_name,\r\n        color: '#087E8B',\r\n        id: `${brse['member_detail'].staff_code}`,\r\n        role: 'brse',\r\n        key:`${brse['member_detail'].staff_code}`\r\n      });\r\n      node.setPosition(550, 150 + (1 + index) * 70);\r\n      model.addNode(node);\r\n    });\r\n  }\r\n  if (listComtor.length > 0) {\r\n    var nodeComtorTitle = new DefaultNodeModel({\r\n      name: <FormattedMessage id=\"projects.addMember.role.comtor\" />,\r\n      color: '#FF5A5F',\r\n      locked: true,\r\n      key:\"comtor\"\r\n    });\r\n    nodeComtorTitle.setPosition(750, 150);\r\n    listComtor.forEach((comtor, index) => {\r\n      const node = new DefaultNodeModel({\r\n        name: comtor['member_detail'].full_name,\r\n        color: '#FF5A5F',\r\n        id: `${comtor['member_detail'].staff_code}`,\r\n        role: 'comtor',\r\n        key:`${comtor['member_detail'].staff_code}`\r\n      });\r\n      node.setPosition(750, 150 + (1 + index) * 70);\r\n      model.addNode(node);\r\n    });\r\n  }\r\n  if (listDev.length > 0) {\r\n    var nodeDevTitle = new DefaultNodeModel({\r\n      name: <FormattedMessage id=\"projects.addMember.role.dev\" />,\r\n      color: '#C81D25',\r\n      locked: true,\r\n      key:\"dev\"\r\n    });\r\n    nodeDevTitle.setPosition(950, 150);\r\n    listDev.forEach((dev, index) => {\r\n      const node = new DefaultNodeModel({\r\n        name: dev['member_detail'].full_name,\r\n        color: '#C81D25',\r\n        id: `${dev['member_detail'].staff_code}`,\r\n        role: 'dev',\r\n        key:`${dev['member_detail'].staff_code}`\r\n      });\r\n      node.setPosition(950, 150 + (1 + index) * 70);\r\n      model.addNode(node);\r\n    });\r\n  }\r\n  let allNode = model.getModels();\r\n  allNode.forEach((node) => {\r\n    const linkAssignee = listAssignee && listAssignee.filter(e => e.member_link_id === node.options.id);\r\n    if(linkAssignee && linkAssignee.length > 0 && linkAssignee[0].member_be_link_id === \"Default\"){\r\n    switch (node.options.role) {\r\n      case 'po': {\r\n        const portOut = node.addOutPort(' ');\r\n        let listPoLink = [];\r\n          if (allNode.includes((node) => node.options.role === 'pm')) {\r\n            listPoLink = allNode.filter((node) => node.options.role === 'pm')\r\n          } else if (allNode.includes((node) => node.options.role === 'brse')) {\r\n            listPoLink = allNode.filter((node) => node.options.role === 'brse')\r\n          } else if (allNode.includes((node) => node.options.role === 'comtor')) {\r\n            listPoLink = allNode.filter((node) => node.options.role === 'comtor')\r\n          } else if (allNode.includes((node) => node.options.role === 'dev')) {\r\n            listPoLink = allNode.filter((node) => node.options.role === 'dev')\r\n          }\r\n          listPoLink.forEach((pm) => {\r\n            const portIn = pm.addInPort(`${node.options.name}`);\r\n            const linkPO = portOut.link(portIn);\r\n            model.addLink(linkPO);\r\n          });\r\n        break;\r\n      }\r\n      case 'pm': {\r\n        const portOut = node.addOutPort(' ');\r\n        let listPmLink = [];\r\n          if (allNode.includes((node) => node.options.role === 'brse')) {\r\n            listPmLink = allNode.filter((node) => node.options.role === 'brse')\r\n          } else if (allNode.includes((node) => node.options.role === 'comtor')) {\r\n            listPmLink = allNode.filter((node) => node.options.role === 'comtor')\r\n          } else if (allNode.includes((node) => node.options.role === 'dev')) {\r\n            listPmLink = allNode.filter((node) => node.options.role === 'dev')\r\n          }\r\n          listPmLink.forEach((brse) => {\r\n            const portIn = brse.addInPort(`${node.options.name}`);\r\n            const linkPM = portOut.link(portIn);\r\n            model.addAll(linkPM);\r\n          });\r\n        }\r\n        break;\r\n      case 'brse': {\r\n        const portOut = node.addOutPort(' ');\r\n        let listBrseLink = [];\r\n          if (allNode.includes((node) => node.options.role === 'comtor')) {\r\n            listBrseLink = (allNode.filter((node) => node.options.role === 'comtor'))\r\n          } else if (allNode.includes((node) => node.options.role === 'dev')) {\r\n            listBrseLink = (allNode.filter((node) => node.options.role === 'dev'))\r\n          }\r\n          listBrseLink.forEach((comtor) => {\r\n            const portIn = comtor.addInPort(`${node.options.name}`);\r\n            const linkBRSE = portOut.link(portIn);\r\n            model.addAll(linkBRSE);\r\n          });\r\n        }\r\n        break;\r\n      case 'comtor': {\r\n        const portOut = node.addOutPort(' ');\r\n        let listComtorLink = [];\r\n          listComtorLink = allNode.filter((node) => node.options.role === 'dev');\r\n          listComtorLink.forEach((dev) => {\r\n            const portIn = dev.addInPort(`${node.options.name}`);\r\n            const linkComtor = portOut.link(portIn);\r\n            model.addAll(linkComtor);\r\n          });\r\n        }\r\n        break;\r\n      case 'dev':\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  });\r\n\r\n  listAssigneeUnDefault && listAssigneeUnDefault.length > 0 && listAssigneeUnDefault.forEach((link) => {\r\n    const nodeLink = allNode && allNode.filter(node => node.options.id === link.member_link_id);\r\n    const nodeBeLink = allNode && allNode.filter(node => node.options.id === link.member_be_link_id);\r\n    const portOut = nodeLink.length > 0 && nodeLink[0].addOutPort(' ');\r\n    const portIn = nodeLink.length > 0 && nodeBeLink.length > 0 && nodeBeLink[0].addInPort(`${nodeLink[0].options.name}`)\r\n    const linkNode = portOut && portOut.link(portIn);\r\n    model.addAll(linkNode);\r\n  })\r\n  model.addAll(nodePoTitle, nodePmTitle, nodeBrseTitle, nodeComtorTitle, nodeDevTitle);\r\n  engine.setModel(model);\r\n  return (\r\n    <Modal\r\n      centered\r\n      title={[\r\n        <React.Fragment key=\"1\">\r\n          <FormattedMessage id=\"projects.memberdiagram.title\" />\r\n          <Tooltip placement=\"right\" title=\"Zoom to fit\">\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              onClick={() => engine.zoomToFit()}\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon=\"search\"\r\n            />\r\n          </Tooltip>\r\n        </React.Fragment>\r\n      ]}\r\n      cancelText=\"Close\"\r\n      visible={visible}\r\n      width=\"85vw\"\r\n      onCancel={() => close()}\r\n      footer={[\r\n        <Button type=\"primary\" key=\"close\" onClick={() => close()}>\r\n          <FormattedMessage id=\"button.close\" />\r\n        </Button>\r\n      ]}\r\n      >\r\n      <div style={{ height: '70vh' }}>\r\n        <CanvasWidget className=\"srd-demo-canvas\" engine={engine}/>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nMemberDiagram.propTypes = propTypes;\r\n\r\nexport default MemberDiagram;\r\n","export const roles = [\r\n  {\r\n    id: 1,\r\n    name: 'Project Owner',\r\n    key: 'po',\r\n    level: 1\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Project Manager',\r\n    key: 'pm',\r\n    level: 2\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Bridge System Engineer',\r\n    key: 'brse',\r\n    level: 3\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Comtor',\r\n    key: 'comtor',\r\n    level: 4\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Developer',\r\n    key: 'dev',\r\n    level: 4\r\n  }\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { formShape } from 'rc-form';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { css } from 'emotion';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  Button,\r\n  DatePicker,\r\n  Select,\r\n  InputNumber,\r\n  Popconfirm,\r\n  Form,\r\n  Typography,\r\n  Descriptions,\r\n  Icon,\r\n  Spin\r\n} from 'antd';\r\n\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport { actions as memberActions } from '../../../member/store';\r\nimport { actions as projectActions } from '../../store';\r\nimport { roles } from '../../../../utils/roles';\r\n\r\nconst propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired,\r\n  form: formShape.isRequired,\r\n  intl: PropTypes.shape({}).isRequired,\r\n  match: PropTypes.shape({}).isRequired,\r\n\r\n  selectedMember: PropTypes.shape({}),\r\n  joinedMembers: PropTypes.arrayOf(PropTypes.shape({})),\r\n\r\n  getMembers: PropTypes.func.isRequired,\r\n  getJoinedMembers: PropTypes.func.isRequired,\r\n  getProject: PropTypes.func.isRequired,\r\n  addMember: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n  selectedMember: {},\r\n  joinedMembers: []\r\n};\r\n\r\nconst styles = {\r\n  descItem: css`\r\n    padding-bottom: 0 !important;\r\n  `\r\n};\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 5\r\n  },\r\n  wrapperCol: {\r\n    span: 19\r\n  }\r\n};\r\n\r\nconst listStatus = [\r\n  { id: 1, name: 'working' },\r\n  { id: 2, name: 'leave' },\r\n  { id: 3, name: 'idle' }\r\n];\r\n\r\nconst AddMemberModal = ({\r\n  visible,\r\n  close,\r\n  form,\r\n  selectedMember,\r\n  joinedMembers,\r\n  intl,\r\n  match,\r\n  getMembers,\r\n  getJoinedMembers,\r\n  getProject,\r\n  addMember\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const { list, getMembersError } = useSelector((state) => state.members);\r\n  const memberLoading = useSelector((state) => state.members.loading);\r\n  const { addMemberError, addMemberErrors, addMemberResult, loading } = useSelector(\r\n    (state) => state.projects\r\n  );\r\n  const [memberDetail, setMemberDetail] = useState(selectedMember);\r\n  //variable disabled field assignee\r\n  const [disabledLink, setDisabledLink] = useState(true);\r\n  // Get all members after open modal\r\n  useEffect(() => {\r\n    getMembers && getMembers();\r\n    return () => {\r\n      dispatch(projectActions.addMemberCleanError());\r\n      dispatch(projectActions.addMemberCleanData());\r\n    };\r\n  }, [getMembers, dispatch]);\r\n\r\n  // show notification if get members failure\r\n  useEffect(() => {\r\n    if (getMembersError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({ id: 'members.membersList.message.error' });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(memberActions.cleanError(false));\r\n    }\r\n  }, [dispatch, getMembersError, intl]);\r\n\r\n  // Handle showing notification after add new members into project\r\n  useEffect(() => {\r\n    if (addMemberResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: addMemberResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean state\r\n      close();\r\n      // re-call get project detail api\r\n      getProject && getProject();\r\n      // re-call get project's members api\r\n      getJoinedMembers && getJoinedMembers();\r\n    }\r\n  }, [close, intl, addMemberResult, getJoinedMembers, getProject]);\r\n\r\n  useEffect(() => {\r\n    // show error notification\r\n    if (addMemberError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: addMemberErrors.message\r\n          ? addMemberErrors.message\r\n          : 'projects.addMemberIntoProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean state\r\n      dispatch(projectActions.cleanError(false));\r\n    }\r\n  }, [dispatch, intl, addMemberError, addMemberErrors]);\r\n\r\n  // Form submit\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          ...values,\r\n          project_id: match.params.id,\r\n          time_in: parseInt(moment(values.time_in).format('x'), 10),\r\n          time_out: values.time_out ? parseInt(moment(values.time_out).format('x'), 10) : null,\r\n          assignee: values.assignee\r\n        };\r\n        // call api when valid data\r\n        addMember && addMember(body);\r\n      } else {\r\n        // showing error form input notification\r\n        const title = intl.formatMessage({ id: 'notification.error' });\r\n        const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n        ErrorNotification(title, message);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSelect = (value) => {\r\n    list.map((member) => {\r\n      if (member.staff_code === value) {\r\n        setMemberDetail(member);\r\n      }\r\n      return member;\r\n    });\r\n  };\r\n  // when member not selected, disabled field assignee \r\n  // When selected, chose default for field assignee: All member under rank\r\n  const handleChange = (value) => {\r\n    if (value) {\r\n      setDisabledLink(false);\r\n      form.setFieldsValue({ ...form.getFieldsValue(), assignee: [\"Default\"] });\r\n    }\r\n    else {\r\n      setDisabledLink(true);\r\n      form.setFieldsValue({ ...form.getFieldsValue(), assignee: undefined });\r\n    }\r\n  }\r\n  return (\r\n    <Modal\r\n      title={<FormattedMessage id=\"projects.addMember.title\" />}\r\n      cancelText=\"Close\"\r\n      visible={visible}\r\n      width=\"50vw\"\r\n      className={styles.modal}\r\n      onCancel={() => close()}\r\n      maskClosable={false}\r\n      footer={[\r\n        <Row type=\"flex\" key=\"am_footer\" justify=\"end\">\r\n          <Popconfirm\r\n            title={<FormattedMessage id=\"projects.addMember.confirm.add\" />}\r\n            onConfirm={() => handleSubmit()}\r\n            okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n            cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n            <Button icon=\"plus\" type=\"primary\" loading={loading}>\r\n              {<FormattedMessage id=\"button.add\" />}\r\n            </Button>\r\n          </Popconfirm>\r\n\r\n          <Button icon=\"close-circle\" type=\"default\" key=\"close\" onClick={() => close()}>\r\n            {<FormattedMessage id=\"button.close\" />}\r\n          </Button>\r\n        </Row>\r\n      ]}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"projects.addMember.memberInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.member\" />}\r\n          validateStatus={form.getFieldError('staff_code') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('staff_code', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.member' })\r\n              }\r\n            ]\r\n          })(\r\n            <Select\r\n              showSearch\r\n              allowClear\r\n              autoClearSearchValue\r\n              notFoundContent={memberLoading && <Spin size=\"small\" />}\r\n              onSelect={handleSelect}\r\n              onChange={handleChange}\r\n            >\r\n              {(list || []).map((member) => {\r\n                return (\r\n                  <Select.Option\r\n                    disabled={\r\n                      !!joinedMembers.filter(\r\n                        (joinedMember) =>\r\n                          joinedMember.member_detail.staff_code === member.staff_code\r\n                      ).length\r\n                    }\r\n                    key={member.staff_code}\r\n                    value={member.staff_code}>\r\n                    {member.staff_code} - {member.full_name}\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.status\" />}\r\n          validateStatus={form.getFieldError('member_status') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('member_status', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.status' })\r\n              }\r\n            ]\r\n          })(\r\n            <Select allowClear>\r\n              {(listStatus || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.name}>\r\n                    <FormattedMessage id={`projects.addMember.status.${e.name}`} />\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.role\" />}\r\n          validateStatus={form.getFieldError('role') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('role', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.role' })\r\n              }\r\n            ]\r\n          })(\r\n            <Select allowClear>\r\n              {(roles || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.key}>\r\n                    <FormattedMessage id={`projects.addMember.role.${e.key}`} />\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.time_in\" />}\r\n          validateStatus={form.getFieldError('time_in') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('time_in', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.time_in' })\r\n              }\r\n            ]\r\n          })(\r\n            <DatePicker\r\n              format=\"DD/MM/YYYY\"\r\n              placeholder={intl.formatMessage({ id: 'projects.addMember.placeholer.time_in' })}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.time_out\" />}\r\n          validateStatus={form.getFieldError('time_out') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('time_out', {\r\n            rules: []\r\n          })(\r\n            <DatePicker\r\n              format=\"DD/MM/YYYY\"\r\n              placeholder={intl.formatMessage({ id: 'projects.addMember.placeholer.time_out' })}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.assignee\" />}\r\n          validateStatus={form.getFieldError('assignee') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('assignee', {\r\n            rules: [],\r\n          })(\r\n            <Select\r\n              disabled={disabledLink}\r\n              mode=\"multiple\"\r\n              placeholder={intl.formatMessage({ id: 'projects.addMember.placeholer.link' })}\r\n            >\r\n              <Select.Option title={intl.formatMessage({ id: 'projects.addMember.title.defaultAssignee' })} value=\"Default\">\r\n                <FormattedMessage id={`projects.addMember.defaultAssignee`} />\r\n              </Select.Option>\r\n              {(joinedMembers || []).map(\r\n                (e) => {\r\n                  return (\r\n                    <Select.Option key={e.id} value={e.member_detail.staff_code}>\r\n                      {e.member_detail.full_name} - <FormattedMessage id={`projects.addMember.role.${e.role}`} />\r\n                    </Select.Option>\r\n                  );\r\n                })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.effort\" />}\r\n          validateStatus={form.getFieldError('effort') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('effort', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.effort' })\r\n              }\r\n            ]\r\n          })(<InputNumber min={0.1} max={1} step={0.1} />)}\r\n        </Form.Item>\r\n\r\n        <Row>\r\n          <Col span={5}></Col>\r\n          <Col span={19}>\r\n            <Descriptions column={1}>\r\n              <Descriptions.Item label={<FormattedMessage id=\"projects.addMember.email\" />}>\r\n                {memberDetail.email || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                className={styles.descItem}\r\n                label={<FormattedMessage id=\"projects.addMember.phone_number\" />}>\r\n                {memberDetail.phone_number || null}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nAddMemberModal.propTypes = propTypes;\r\n\r\nAddMemberModal.defaultProps = defaultProps;\r\n\r\nconst AddMemberForm = Form.create({ name: 'memberAdd' })(AddMemberModal);\r\n\r\nexport default injectIntl(AddMemberForm, {});\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { css } from 'emotion';\r\nimport { formShape } from 'rc-form';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  Drawer,\r\n  Form,\r\n  Input,\r\n  DatePicker,\r\n  Icon,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Descriptions,\r\n  Typography,\r\n  Spin,\r\n  Button,\r\n  Popconfirm\r\n} from 'antd';\r\n\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport { actions as customerActions } from '../../../customer/store';\r\nimport { actions as projectActions } from '../../store';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  drawerVisible: PropTypes.bool.isRequired,\r\n  form: formShape.isRequired,\r\n\r\n  project: PropTypes.shape({}),\r\n\r\n  getCustomers: PropTypes.func.isRequired,\r\n  updateProject: PropTypes.func.isRequired,\r\n  getProject: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n  project: {}\r\n};\r\n\r\nconst styles = {\r\n  drawerBody: css`\r\n    padding: 0px 0px 56px 0px !important;\r\n  `,\r\n  drawerFooter: css`\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 24px;\r\n    left: 24px;\r\n    padding: 24px 0px;\r\n    background-color: #ffffff;\r\n    border-top: '1px solid #e8e8e8';\r\n  `,\r\n  deletedCustomerMsg: css`\r\n    color: red !important;\r\n  `\r\n};\r\n\r\nconst listStatus = [\r\n  { id: 1, name: 'running' },\r\n  { id: 2, name: 'completed' },\r\n  { id: 3, name: 'stopped' }\r\n];\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 8\r\n  },\r\n  wrapperCol: {\r\n    span: 16\r\n  }\r\n};\r\n\r\nconst UpdateProjectDrawer = ({\r\n  getCustomers,\r\n  updateProject,\r\n  getProject,\r\n  intl,\r\n  onClose,\r\n  drawerVisible,\r\n  form,\r\n  project\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [customerDetail, setCustomerDetail] = useState(project.customer);\r\n  const { getCustomersError, getCustomersErrors } = useSelector((state) => state.customers);\r\n  const customersList = useSelector((state) => state.customers.list);\r\n  const { updateProjectResult, updateProjectError, updateProjectErrors, loading } = useSelector(\r\n    (state) => state.projects\r\n  );\r\n  const customerLoading = useSelector((state) => state.customers.loading);\r\n\r\n  // Get all customers after open modal\r\n  useEffect(() => {\r\n    getCustomers && getCustomers();\r\n    return () => {\r\n      dispatch(projectActions.updateProjectCleanError());\r\n      dispatch(projectActions.updateProjectCleanData());\r\n    };\r\n  }, [getCustomers, dispatch]);\r\n\r\n  // show notification if get customers failure\r\n  useEffect(() => {\r\n    if (getCustomersError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getCustomersErrors.message\r\n          ? getCustomersErrors.message\r\n          : 'customers.customersList.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(customerActions.cleanError(false));\r\n    }\r\n  }, [dispatch, getCustomersError, getCustomersErrors, intl]);\r\n\r\n  // Handle showing notification after update project\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (updateProjectResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: updateProjectResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean state\r\n      onClose();\r\n      // re-call get project detail api\r\n      getProject && getProject(project);\r\n    }\r\n    // show error notification\r\n  }, [onClose, intl, updateProjectResult, dispatch, project, getProject]);\r\n\r\n  useEffect(() => {\r\n    if (updateProjectError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({ id: 'projects.updateProject.message.error' });\r\n      ErrorNotification(title, message);\r\n      // clean state\r\n      dispatch(projectActions.updateProjectCleanError());\r\n    }\r\n  }, [dispatch, intl, updateProjectError, updateProjectErrors]);\r\n\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        //anphan 1/10/2020 clone new customField from values to compare  with project.customField\r\n        const customField = [];\r\n        let indexCustomField = 3;\r\n        do {\r\n          customField.push({\r\n            idInfoCustomField: project.customField[indexCustomField - 3].idInfoCustomField,\r\n            value: Object.values(values)[indexCustomField]\r\n          });\r\n          indexCustomField++;\r\n        } while (Object.keys(values)[indexCustomField] !== 'customer_id');\r\n        const body = {\r\n          customer_id: values.customer_id,\r\n          name: values.name,\r\n          status: values.status,\r\n          start_time: parseInt(moment(values.estimated[0]).format('x'), 10),\r\n          end_time: parseInt(moment(values.estimated[1]).format('x'), 10),\r\n          customField: customField\r\n        };\r\n        if (customerDetail.hidden) {\r\n          const title = intl.formatMessage({ id: 'notification.error' });\r\n          const message = intl.formatMessage({ id: 'notification.message.form.deletedCustomer' });\r\n          return ErrorNotification(title, message);\r\n        }\r\n        body.customField = customField;\r\n        updateProject(body);\r\n      } else {\r\n        // showing error form input notification\r\n        const title = intl.formatMessage({ id: 'notification.error' });\r\n        const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n        ErrorNotification(title, message);\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  const handleSelect = (value) => {\r\n    customersList.map((customer) => {\r\n      if (customer.id === value) {\r\n        setCustomerDetail(customer);\r\n      }\r\n      return customer;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      title={<FormattedMessage id=\"projects.updateProject.title\" />}\r\n      placement=\"right\"\r\n      onClose={onClose}\r\n      visible={drawerVisible}\r\n      maskClosable={false}\r\n      width={550}>\r\n      <Form className={styles.drawerBody} onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"project\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"projects.createProject.projectInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.projectName\" />}\r\n          validateStatus={form.getFieldError('name') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('name', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.name' })\r\n              }\r\n            ],\r\n            initialValue: project.name\r\n          })(<Input />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.status\" />}\r\n          validateStatus={form.getFieldError('status') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('status', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.status' })\r\n              }\r\n            ],\r\n            initialValue: listStatus.find((e) => {\r\n              return e.name === project.status;\r\n            }).name\r\n          })(\r\n            <Select allowClear>\r\n              {(listStatus || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.name}>\r\n                    <FormattedMessage id={`projects.status.${e.name}`} />\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.Estimated\" />}\r\n          validateStatus={form.getFieldError('estimated') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('estimated', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.estimated' })\r\n              }\r\n            ],\r\n            initialValue: [\r\n              moment(parseInt(project.start_time, 10)),\r\n              moment(parseInt(project.end_time, 10))\r\n            ]\r\n          })(\r\n            <DatePicker.RangePicker\r\n              format=\"DD/MM/YYYY\"\r\n              placeholder={[\r\n                intl.formatMessage({ id: 'projects.createProject.startDate' }),\r\n                intl.formatMessage({ id: 'projects.createProject.endDate' })\r\n              ]}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n        <Row style={{ marginBottom: 10, marginLeft: '24px' }}>\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            <FormattedMessage id=\"projects.createProject.descriptions\" />\r\n          </Typography.Text>\r\n        </Row>\r\n        {(project && project.customField.length > 0)\r\n          ? project.customField.map((obj) => (\r\n            <Form.Item\r\n              key={obj.idInfoCustomField}\r\n              style={{ display: 'flex' }}\r\n              label={obj.name}\r\n              validateStatus={form.getFieldError(obj.name) ? 'error' : 'validating'}>\r\n              {form.getFieldDecorator(obj.name, {\r\n                rules: [\r\n                  {\r\n                    required: obj.require,\r\n                    message:\r\n                      obj.name + intl.formatMessage({ id: 'projects.createProject.required' })\r\n                  }\r\n                ],\r\n                initialValue: obj.value\r\n              })(<Input />)}\r\n            </Form.Item>\r\n          ))\r\n          : null}\r\n\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            <FormattedMessage id=\"projects.createProject.customerInformation\" />\r\n          </Typography.Text>\r\n        </Row>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.createProject.customer\" />}\r\n          validateStatus={form.getFieldError('customer_id') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('customer_id', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.customer' })\r\n              }\r\n            ],\r\n            initialValue: !customerDetail.hidden ? project.customer.id : project.customer.name\r\n          })(\r\n            <Select\r\n              allowClear\r\n              autoClearSearchValue\r\n              onSelect={(value) => handleSelect(value)}\r\n              notFoundContent={customerLoading && <Spin size=\"small\" />}>\r\n              {(customersList || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.id}>\r\n                    {e.name}\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n        <Row>\r\n          <Col span={8}></Col>\r\n          <Col span={16}>\r\n            <Descriptions column={1}>\r\n              <Descriptions.Item\r\n                label={<FormattedMessage id=\"projects.createProject.customerEmail\" />}>\r\n                {customerDetail.email || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                label={<FormattedMessage id=\"projects.createProject.customerPhonenumber\" />}>\r\n                {customerDetail.phone_number || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                label={<FormattedMessage id=\"projects.createProject.customerAddress\" />}>\r\n                {customerDetail.address || null}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n            {customerDetail.hidden && (\r\n              <Typography.Text className={styles.deletedCustomerMsg}>\r\n                <FormattedMessage id=\"projects.updateProject.deletedCustomer\" />\r\n              </Typography.Text>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <Row className={styles.drawerFooter}>\r\n        <Popconfirm\r\n          title={<FormattedMessage id=\"projects.updateProject.confirm.add\" />}\r\n          onConfirm={() => handleSubmit()}\r\n          okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n          cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n          <Button icon=\"edit\" type=\"primary\" loading={loading}>\r\n            {<FormattedMessage id=\"button.update\" />}\r\n          </Button>\r\n        </Popconfirm>\r\n        <Button\r\n          style={{ marginLeft: 15 }}\r\n          icon=\"close-circle\"\r\n          type=\"default\"\r\n          key=\"close\"\r\n          onClick={onClose}>\r\n          {<FormattedMessage id=\"button.close\" />}\r\n        </Button>\r\n      </Row>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nUpdateProjectDrawer.propTypes = propTypes;\r\n\r\nUpdateProjectDrawer.defaultProps = defaultProps;\r\n\r\nconst UpdateProjectForm = Form.create({ name: 'updateProject' })(UpdateProjectDrawer);\r\n\r\nexport default injectIntl(UpdateProjectForm, {});\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { css } from 'emotion';\r\nimport { formShape } from 'rc-form';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  Drawer,\r\n  Form,\r\n  DatePicker,\r\n  Icon,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  InputNumber,\r\n  Typography,\r\n  Button,\r\n  Popconfirm,\r\n  Descriptions\r\n} from 'antd';\r\n\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport { roles } from '../../../../utils/roles';\r\nimport { actions as projectActions } from '../../store';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  drawerVisible: PropTypes.bool.isRequired,\r\n  form: formShape.isRequired,\r\n\r\n  getProject: PropTypes.func.isRequired,\r\n  getJoinedMembers: PropTypes.func.isRequired,\r\n  updateMember: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst styles = {\r\n  drawerFooter: css`\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 24px;\r\n    left: 24px;\r\n    padding: 24px 0px;\r\n    background-color: #ffffff;\r\n    border-top: '1px solid #e8e8e8';\r\n  `\r\n};\r\n\r\nconst listStatus = [\r\n  { id: 1, name: 'working' },\r\n  { id: 2, name: 'leave' },\r\n  { id: 3, name: 'idle' }\r\n];\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 8\r\n  },\r\n  wrapperCol: {\r\n    span: 16\r\n  }\r\n};\r\n\r\nconst UpdateMemberDrawer = ({\r\n  intl,\r\n  onClose,\r\n  drawerVisible,\r\n  form,\r\n  member,\r\n  getProject,\r\n  getJoinedMembers,\r\n  updateMember,\r\n  joinedMembers\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const { updateMemberResult, updateMemberError, updateMemberErrors, loading } = useSelector(\r\n    (state) => state.projects\r\n  );\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(projectActions.updateMemberCleanError());\r\n      dispatch(projectActions.updateMemberCleanData(false));\r\n    };\r\n  }, [dispatch]);\r\n\r\n  // Handle showing notification after update project\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (updateMemberResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: updateMemberResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean state\r\n      onClose();\r\n      // re-call get project detail api\r\n      getProject && getProject();\r\n      // re-call get members list api\r\n      getJoinedMembers && getJoinedMembers();\r\n    }\r\n  }, [onClose, intl, updateMemberResult, getJoinedMembers, getProject]);\r\n\r\n  useEffect(() => {\r\n    // show error notification\r\n    if (updateMemberError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: updateMemberErrors.message\r\n          ? updateMemberErrors.message\r\n          : 'projects.updateMemberInProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean state\r\n      dispatch(projectActions.updateMemberCleanError(false));\r\n    }\r\n  }, [dispatch, intl, updateMemberError, updateMemberErrors]);\r\n\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          time_in: parseInt(moment(values.time_in).format('x'), 10),\r\n          time_out: values.time_out ? parseInt(moment(values.time_out).format('x'), 10) : null,\r\n          effort: values.effort,\r\n          role: values.role,\r\n          member_status: values.member_status,\r\n          assignee: values.assignee,\r\n        };\r\n        const oldBody = {\r\n          time_in: parseInt(member.time_in, 10),\r\n          time_out: member.time_out ? parseInt(member.time_out, 10) : null,\r\n          effort: member.effort,\r\n          role: member.role,\r\n          member_status: member.member_status,\r\n          assignee: member.assignee,\r\n        };\r\n        // check if value is not change\r\n        if (JSON.stringify(body) === JSON.stringify(oldBody)) {\r\n          const title = intl.formatMessage({ id: 'notification.error' });\r\n          const message = intl.formatMessage({ id: 'notification.message.form.noChanging' });\r\n          return ErrorNotification(title, message);\r\n        }        \r\n        updateMember && updateMember(body, member);\r\n      } else {\r\n        // showing error form input notification\r\n        const title = intl.formatMessage({ id: 'notification.error' });\r\n        const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n        ErrorNotification(title, message);\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n  return (\r\n    <Drawer\r\n      title={<FormattedMessage id=\"projects.updateMember.title\" />}\r\n      placement=\"right\"\r\n      onClose={onClose}\r\n      visible={drawerVisible}\r\n      maskClosable={false}\r\n      width={500}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"projects.addMember.memberInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col span={8}></Col>\r\n          <Col span={16}>\r\n            <Descriptions column={1}>\r\n              <Descriptions.Item\r\n                className={styles.descItem}\r\n                label={<FormattedMessage id=\"projects.updateMember.staff_code\" />}>\r\n                {member.member_detail.staff_code || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                className={styles.descItem}\r\n                label={<FormattedMessage id=\"projects.updateMember.full_name\" />}>\r\n                {member.member_detail.full_name || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item label={<FormattedMessage id=\"projects.updateMember.email\" />}>\r\n                {member.member_detail.email || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                className={styles.descItem}\r\n                label={<FormattedMessage id=\"projects.updateMember.phone_number\" />}>\r\n                {member.member_detail.phone_number || null}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.status\" />}\r\n          validateStatus={form.getFieldError('member_status') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('member_status', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.status' })\r\n              }\r\n            ],\r\n            initialValue: listStatus.find((e) => {\r\n              return e.name === member.member_status;\r\n            }).name\r\n          })(\r\n            <Select allowClear>\r\n              {(listStatus || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.name}>\r\n                    <FormattedMessage id={`projects.addMember.status.${e.name}`} />\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.role\" />}\r\n          validateStatus={form.getFieldError('role') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('role', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.role' })\r\n              }\r\n            ],\r\n            initialValue: roles.find((e) => {\r\n              return e.key === member.role;\r\n            }).key\r\n          })(\r\n            <Select allowClear>\r\n              {(roles || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.id} value={e.key}>\r\n                    <FormattedMessage id={`projects.addMember.role.${e.key}`} />\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.time_in\" />}\r\n          validateStatus={form.getFieldError('time_in') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('time_in', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.time_in' })\r\n              }\r\n            ],\r\n            initialValue: moment(parseInt(member.time_in, 10))\r\n          })(\r\n            <DatePicker\r\n              format=\"DD/MM/YYYY\"\r\n              placeholder={intl.formatMessage({ id: 'projects.addMember.placeholer.time_in' })}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.time_out\" />}\r\n          validateStatus={form.getFieldError('time_out') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('time_out', {\r\n            rules: [],\r\n            initialValue: member.time_out ? moment(parseInt(member.time_out, 10)) : null\r\n          })(\r\n            <DatePicker\r\n              format=\"DD/MM/YYYY\"\r\n              placeholder={intl.formatMessage({ id: 'projects.addMember.placeholer.time_out' })}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"projects.addMember.assignee\" />}\r\n          validateStatus={form.getFieldError('assignee') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('assignee', {\r\n            rules: [],\r\n          })(\r\n            <Select\r\n              mode=\"multiple\"\r\n              placeholder={intl.formatMessage({ id: 'projects.addMember.placeholer.link' })}>\r\n              {/* Default: All member under the rank */}\r\n              <Select.Option title={intl.formatMessage({ id: 'projects.addMember.title.defaultAssignee' })} value=\"Default\">\r\n                <FormattedMessage id={`projects.addMember.defaultAssignee`} />\r\n              </Select.Option>\r\n              {(joinedMembers).map(\r\n                (e) => {\r\n                  if (e.id !== member.id) {\r\n                    return (\r\n                      <Select.Option key={e.id} value={e.member_detail.staff_code}>\r\n                        {e.member_detail.full_name} - <FormattedMessage id={`projects.addMember.role.${e.role}`} />\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  return undefined;\r\n                })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex', paddingBottom: '50px' }}\r\n          label={<FormattedMessage id=\"projects.addMember.effort\" />}\r\n          validateStatus={form.getFieldError('effort') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('effort', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.addMember.error.effort' })\r\n              }\r\n            ],\r\n            initialValue: member.effort\r\n          })(<InputNumber min={0.1} max={1} step={0.1} />)}\r\n        </Form.Item>\r\n\r\n        <Row className={styles.drawerFooter}>\r\n          <Popconfirm\r\n            title={<FormattedMessage id=\"projects.updateMember.confirm.add\" />}\r\n            onConfirm={() => handleSubmit()}\r\n            okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n            cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n            <Button icon=\"edit\" type=\"primary\" loading={loading}>\r\n              {<FormattedMessage id=\"button.update\" />}\r\n            </Button>\r\n          </Popconfirm>\r\n          <Button\r\n            style={{ marginLeft: 15 }}\r\n            icon=\"close-circle\"\r\n            type=\"default\"\r\n            key=\"close\"\r\n            onClick={onClose}>\r\n            {<FormattedMessage id=\"button.close\" />}\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nUpdateMemberDrawer.propTypes = propTypes;\r\n\r\nUpdateMemberDrawer.defaultProps = defaultProps;\r\n\r\nconst UpdateMemberForm = Form.create({ name: 'updateProject' })(UpdateMemberDrawer);\r\n\r\nexport default injectIntl(UpdateMemberForm, {});\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\nimport {\r\n  Table,\r\n  Row,\r\n  Typography,\r\n  Button,\r\n  Col,\r\n  Tooltip,\r\n  Descriptions,\r\n  Divider,\r\n  Popconfirm,\r\n  Skeleton,\r\n  Tag\r\n} from 'antd';\r\n\r\nimport { actions as projectActions } from '../../store';\r\n\r\nimport MemberDiagram from '../../../member/memberDiagram/MemberDiagram';\r\nimport AddMemberModal from '../../addMember/components/AddMemberModal';\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport UpdateProjectDrawer from '../../updateProject/components/UpdateProjectDrawer';\r\nimport UpdateMemberDrawer from '../../updateMember/components/UpdateMemberDrawer';\r\nimport WithRole from '../../../../hocs/WithRole';\r\n\r\nconst propTypes = {\r\n  match: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired,\r\n\r\n  project: PropTypes.shape({}),\r\n  joinedMembers: PropTypes.shape({}),\r\n  loading: PropTypes.bool,\r\n\r\n  getProject: PropTypes.func.isRequired,\r\n  getJoinedMembers: PropTypes.func.isRequired,\r\n  getMembers: PropTypes.func.isRequired,\r\n  removeMember: PropTypes.func.isRequired,\r\n  addMember: PropTypes.func.isRequired,\r\n  updateProject: PropTypes.func.isRequired,\r\n  getCustomers: PropTypes.func.isRequired,\r\n  updateMember: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n  loading: false,\r\n  project: null,\r\n  joinedMembers: {\r\n    list: [],\r\n    total: 0\r\n  }\r\n};\r\n\r\nconst ButtonEditProject = ({ handleEditProjectDrawer, project }) => {\r\n  return (\r\n    <Button icon=\"edit\" type=\"primary\" disabled={!project} onClick={handleEditProjectDrawer}>\r\n      <FormattedMessage id=\"button.update\" />\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst ButtonEditMember = ({ handleControlMemberDrawer, record }) => {\r\n  return (\r\n    <Button\r\n      shape=\"circle\"\r\n      icon=\"edit\"\r\n      type=\"primary\"\r\n      style={{ margin: '0px 5px' }}\r\n      // eslint-disable-next-line no-use-before-define\r\n      onClick={() => handleControlMemberDrawer(record)}\r\n    />\r\n  );\r\n};\r\n\r\nconst ButtonDeleteMember = ({ handleConfirmDelete, record }) => {\r\n  return (\r\n    <Popconfirm\r\n      title={<FormattedMessage id=\"projectDetail.removeMember.confirm.delete\" />}\r\n      onConfirm={() => handleConfirmDelete(record)}\r\n      okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n      cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n      <Button shape=\"circle\" icon=\"minus-circle\" type=\"danger\" style={{ margin: '0px 5px' }} />\r\n    </Popconfirm>\r\n  );\r\n};\r\n\r\nconst ButtonAddMember = ({ handleAddMemberModal }) => {\r\n  return (\r\n    <Button\r\n      style={{ marginLeft: 10 }}\r\n      type=\"primary\"\r\n      shape=\"circle\"\r\n      icon=\"usergroup-add\"\r\n      onClick={handleAddMemberModal}\r\n    />\r\n  );\r\n};\r\n\r\nconst ProjectDetail = ({\r\n  project,\r\n  joinedMembers,\r\n  loading,\r\n  match,\r\n  intl,\r\n  getProject,\r\n  getJoinedMembers,\r\n  removeMember,\r\n  getCustomers,\r\n  updateProject,\r\n  addMember,\r\n  updateMember,\r\n  getMembers\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [visible, setVisible] = useState(false);\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const [memberDrawerVisible, setMemberDrawerVisible] = useState(false);\r\n  const [openAddModal, setOpenAddModal] = useState(false);\r\n  const [selectedMember, selectMember] = useState(null);\r\n  const {\r\n    removeMemberError,\r\n    removeMemberErrors,\r\n    getProjectError,\r\n    getProjectErrors,\r\n    getJoinedMembersError,\r\n    getJoinedMembersErrors,\r\n    removeMemberResult\r\n  } = useSelector((state) => state.projects);\r\n  // show notification error when get project detail failure\r\n  useEffect(() => {\r\n    if (getProjectError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getProjectErrors.message\r\n          ? getProjectErrors.message\r\n          : 'projectDetail.getDetail.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(projectActions.getProjectCleanError());\r\n    }\r\n  }, [dispatch, getProjectError, getProjectErrors, intl]);\r\n\r\n  // show notification error when get project members failure\r\n  useEffect(() => {\r\n    if (getJoinedMembersError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getJoinedMembersErrors.message\r\n          ? getJoinedMembersErrors.message\r\n          : 'projectDetail.getMembers.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(projectActions.getJoinedMembersCleanError());\r\n    }\r\n  }, [dispatch, getJoinedMembersError, getJoinedMembersErrors, intl]);\r\n\r\n  // handle showing notification when remove member from project\r\n  useEffect(() => {\r\n    // show notification\r\n    if (removeMemberResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: removeMemberResult.message });\r\n      SuccessNotification(title, message);\r\n      // re-call api request and clean error state\r\n      getProject && getProject();\r\n      getJoinedMembers && getJoinedMembers();\r\n      dispatch(projectActions.removeMemberCleanData());\r\n    }\r\n  }, [dispatch, getProject, getJoinedMembers, intl, removeMemberResult]);\r\n\r\n  useEffect(() => {\r\n    if (removeMemberError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: removeMemberErrors.message\r\n          ? removeMemberErrors.message\r\n          : 'projects.removeMemberFromProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(projectActions.cleanError(false));\r\n    }\r\n  }, [dispatch, intl, removeMemberError, removeMemberErrors]);\r\n\r\n  const handleConfirmDelete = (data) => {\r\n    removeMember && removeMember(data);\r\n  };\r\n\r\n  const handleEditProjectDrawer = () => {\r\n    setDrawerVisible(!drawerVisible);\r\n  };\r\n\r\n  // Handle control open/close update member in project drawer\r\n  const handleControlMemberDrawer = (member) => {\r\n    if (member) {\r\n      selectMember(member);\r\n    } else {\r\n      selectMember(null);\r\n    }\r\n    setMemberDrawerVisible(!memberDrawerVisible);\r\n  };\r\n\r\n  const handleAddMemberModal = () => {\r\n    setOpenAddModal(!openAddModal);\r\n  };\r\n  //check custom field is link\r\n  const isURL = str => {\r\n    if (!str) return null\r\n    var res = str.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_.~#?&//=]*)/g);\r\n    return (res !== null)\r\n  }\r\n  const columns = [\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.staff_code\" />,\r\n      dataIndex: 'member_detail',\r\n      key: 'staff_code',\r\n      render: (memberDetail) => {\r\n        return memberDetail.staff_code;\r\n      }\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.name\" />,\r\n      dataIndex: 'member_detail',\r\n      key: 'name',\r\n      render: (memberDetail) => {\r\n        return memberDetail.full_name;\r\n      }\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.status\" />,\r\n      dataIndex: 'member_status',\r\n      key: 'member_status',\r\n      render: (status) => {\r\n        switch (status) {\r\n          case 'working':\r\n            return (\r\n              <Tag color=\"#87d068\">\r\n                <FormattedMessage id=\"projects.addMember.status.working\" />\r\n              </Tag>\r\n            );\r\n          case 'leave':\r\n            return (\r\n              <Tag color=\"#f5222D\">\r\n                <FormattedMessage id=\"projects.addMember.status.leave\" />\r\n              </Tag>\r\n            );\r\n          case 'idle':\r\n            return (\r\n              <Tag color=\"#ffe58f\">\r\n                <FormattedMessage id=\"projects.addMember.status.idle\" />\r\n              </Tag>\r\n            );\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.role\" />,\r\n      dataIndex: 'role',\r\n      key: 'role',\r\n      render: (role) => <FormattedMessage id={`projects.addMember.role.${role}`} />\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.effort\" />,\r\n      dataIndex: 'effort',\r\n      key: 'effort'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.time_in\" />,\r\n      dataIndex: 'join_at',\r\n      key: 'join_at',\r\n      render: (date) => {\r\n        return moment(date).format('DD/MM/YYYY');\r\n      }\r\n    },\r\n    {\r\n      title: '',\r\n      dataIndex: '',\r\n      key: 'x',\r\n      align: 'right',\r\n      render: (record) => (\r\n        <React.Fragment>\r\n          <Tooltip placement=\"top\" title={<FormattedMessage id=\"button.tooltip.removeMember\" />}>\r\n            <WithRole\r\n              type={['admin', 'manager']}\r\n              component={ButtonDeleteMember}\r\n              record={record}\r\n              handleConfirmDelete={handleConfirmDelete}\r\n            />\r\n          </Tooltip>\r\n          <Tooltip placement=\"top\" title={<FormattedMessage id=\"button.tooltip.editMember\" />}>\r\n            <WithRole\r\n              type={['admin', 'manager']}\r\n              component={ButtonEditMember}\r\n              record={record}\r\n              handleControlMemberDrawer={handleControlMemberDrawer}\r\n            />\r\n          </Tooltip>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row style={{ marginBottom: 75 }}>\r\n        <Skeleton active loading={loading} paragraph={{ rows: 4 }}>\r\n          <Row>\r\n            <Col span={12}>\r\n              <Descriptions title={project && project.name ? project.name : ''} column={1}>\r\n                <Descriptions.Item label={<FormattedMessage id=\"projects.detail.customer\" />}>\r\n                  {project && project.customer ? project.customer.name : ''}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label={<FormattedMessage id=\"projects.detail.totalMember\" />}>\r\n                  {joinedMembers && joinedMembers.total ? joinedMembers.total : 0}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label={<FormattedMessage id=\"projects.detail.start_time\" />}>\r\n                  {project && project.start_time\r\n                    ? moment(parseInt(project.start_time, 10)).format('DD/MM/YYYY')\r\n                    : ''}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label={<FormattedMessage id=\"projects.detail.end_time\" />}>\r\n                  {project && project.end_time\r\n                    ? moment(parseInt(project.end_time, 10)).format('DD/MM/YYYY')\r\n                    : ''}\r\n                </Descriptions.Item>\r\n              </Descriptions>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Typography.Text\r\n                style={{\r\n                  fontWeight: 'normal',\r\n                  display: 'block',\r\n                  marginBottom: '20px',\r\n                  fontSize: '16px'\r\n                }}>\r\n                <FormattedMessage id=\"projects.createProject.descriptions\" />\r\n              </Typography.Text>\r\n              <Descriptions column={1}>\r\n                {project\r\n                  ? project.customField.map((obj) => (\r\n                    <Descriptions.Item key={obj.idInfoCustomField} label={obj.name}>\r\n                      {isURL(obj.value) ? <a href={obj.value}>{obj.value}</a> : obj.value}\r\n                    </Descriptions.Item>\r\n                  ))\r\n                  : null}\r\n              </Descriptions>\r\n            </Col>\r\n          </Row>\r\n        </Skeleton>\r\n\r\n        <Row>\r\n          <WithRole\r\n            type={['admin', 'manager']}\r\n            component={ButtonEditProject}\r\n            project={project}\r\n            handleEditProjectDrawer={handleEditProjectDrawer}\r\n          />\r\n        </Row>\r\n\r\n        <Divider />\r\n        <Row>\r\n          <Row>\r\n            <Col span={12} style={{ display: 'flex' }}>\r\n              <Typography.Title level={4}>\r\n                <FormattedMessage id=\"projects.detail.currentMember\" />\r\n              </Typography.Title>\r\n              <Tooltip\r\n                placement=\"bottom\"\r\n                title={<FormattedMessage id=\"button.tooltip.addMember\" />}>\r\n                <WithRole\r\n                  type={['manager', 'admin']}\r\n                  component={ButtonAddMember}\r\n                  handleAddMemberModal={handleAddMemberModal}\r\n                />\r\n              </Tooltip>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Row type=\"flex\" justify=\"end\">\r\n                <Tooltip\r\n                  placement=\"bottom\"\r\n                  title={<FormattedMessage id=\"button.tooltip.memberDiagram\" />}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    icon=\"line-chart\"\r\n                    onClick={() => setVisible(!visible)}\r\n                  />\r\n                </Tooltip>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n          <Table\r\n            columns={columns}\r\n            rowKey={(record) => record.member_detail.staff_code}\r\n            dataSource={joinedMembers ? joinedMembers.list : []}\r\n            loading={loading}\r\n            pagination={false}\r\n          />\r\n        </Row>\r\n        {memberDrawerVisible && (\r\n          <UpdateMemberDrawer\r\n            drawerVisible={memberDrawerVisible}\r\n            onClose={() => handleControlMemberDrawer()}\r\n            member={selectedMember}\r\n            getProject={getProject}\r\n            getJoinedMembers={getJoinedMembers}\r\n            updateMember={updateMember}\r\n            joinedMembers={joinedMembers.list}\r\n          />\r\n        )}\r\n        {drawerVisible && (\r\n          <UpdateProjectDrawer\r\n            drawerVisible={drawerVisible}\r\n            onClose={() => setDrawerVisible(!drawerVisible)}\r\n            project={project}\r\n            getCustomers={getCustomers}\r\n            updateProject={updateProject}\r\n            getProject={getProject}\r\n          />\r\n        )}\r\n      </Row>\r\n      <MemberDiagram\r\n        joinedMembers={joinedMembers}\r\n        visible={visible}\r\n        close={() => setVisible(!visible)}\r\n        project={project}\r\n      />\r\n      {openAddModal && (\r\n        <AddMemberModal\r\n          getMembers={getMembers}\r\n          getJoinedMembers={getJoinedMembers}\r\n          getProject={getProject}\r\n          joinedMembers={joinedMembers.list}\r\n          visible={openAddModal}\r\n          close={() => setOpenAddModal(!openAddModal)}\r\n          match={match}\r\n          addMember={addMember}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nProjectDetail.propTypes = propTypes;\r\nProjectDetail.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(ProjectDetail, {});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { Button, Icon } from 'antd';\r\n\r\nconst propTypes = {\r\n  onBack: PropTypes.func.isRequired\r\n};\r\n\r\nconst BackButton = ({ onBack }) => (\r\n  <Button type=\"primary\" onClick={onBack}>\r\n    <Icon type=\"left\" />\r\n    <FormattedMessage id=\"button.back\" />\r\n  </Button>\r\n);\r\n\r\nBackButton.propTypes = propTypes;\r\n\r\nexport default BackButton;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Row, Col, Button, Icon, Popconfirm } from 'antd';\r\nimport { css } from 'emotion';\r\n\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as projectActions } from '../modules/project/store';\r\nimport { actions as customerActions } from '../modules/customer/store';\r\nimport { actions as memberActions } from '../modules/member/store';\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport ProjectDetail from '../modules/project/projectDetails/components/ProjectDetail';\r\nimport BackButton from '../components/Button/BackButton';\r\nimport ErrorNotification from '../components/Notification/Error';\r\nimport SuccessNotification from '../components/Notification/Success';\r\nimport WithRole from '../hocs/WithRole';\r\n\r\nconst propTypes = {\r\n  match: PropTypes.shape({}).isRequired,\r\n  history: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst styles = {\r\n  footer: css`\r\n    position: absolute !important;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n  `\r\n};\r\n\r\nconst ButtonRemoveProject = ({ loading, match }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Popconfirm\r\n      title={<FormattedMessage id=\"projectDetail.removeProject.confirm.remove\" />}\r\n      onConfirm={\r\n        () =>\r\n          dispatch(\r\n            projectActions.removeProject({\r\n              path: 'projects/remove',\r\n              param: match.params.id\r\n            })\r\n          )\r\n        // eslint-disable-next-line react/jsx-curly-newline\r\n      }\r\n      okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n      cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n      <Button style={{ marginRight: 15 }} type=\"danger\" disabled={loading}>\r\n        <Icon type={loading ? 'loading' : 'delete'} />\r\n        <FormattedMessage id=\"projectDetail.removeProject\" />\r\n      </Button>\r\n    </Popconfirm>\r\n  );\r\n};\r\n\r\nconst ProjectDetailPage = ({ match, history, intl }) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    project,\r\n    joinedMembers,\r\n    removeProjectResult,\r\n    removeProjectError,\r\n    removeProjectErrors,\r\n    loading\r\n  } = useSelector((state) => state.projects);\r\n\r\n  const getProject = useCallback(() => {\r\n    dispatch(\r\n      projectActions.getProject({\r\n        param: match.params.id,\r\n        path: 'projects'\r\n      })\r\n    );\r\n  }, [dispatch, match.params.id]);\r\n\r\n  const getJoinedMembers = useCallback(() => {\r\n    dispatch(\r\n      projectActions.getJoinedMembers({\r\n        param: match.params.id,\r\n        path: 'projects/membersList'\r\n      })\r\n    );\r\n  }, [dispatch, match.params.id]);\r\n\r\n  const cleanError = useCallback(() => {\r\n    dispatch(projectActions.cleanError(false));\r\n  }, [dispatch]);\r\n\r\n  const removeMember = useCallback(\r\n    (data) => {\r\n      dispatch(\r\n        projectActions.removeMember({\r\n          param: data.id,\r\n          path: 'projects/membersList/remove'\r\n        })\r\n      );\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const getCustomers = useCallback(() => {\r\n    dispatch(\r\n      customerActions.getCustomers({\r\n        path: 'customers'\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  const updateProject = useCallback(\r\n    (body) => {\r\n      dispatch(projectActions.updateProject({ body, path: 'projects', param: project.id }));\r\n    },\r\n    [dispatch, project]\r\n  );\r\n\r\n  const addMember = useCallback(\r\n    (body) => {\r\n      dispatch(projectActions.addMember({ body, path: 'projects/membersList' }));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const getMembers = useCallback(() => {\r\n    dispatch(\r\n      memberActions.getMembers({\r\n        path: 'members'\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n  const updateMember = useCallback(\r\n    (body, member) => {\r\n      dispatch(\r\n        projectActions.updateMember({\r\n          body,\r\n          path: 'projects/membersList',\r\n          param: member.id\r\n        })\r\n      );\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['project']));\r\n    // clean state\r\n    // clean old joined members state\r\n    dispatch(projectActions.getJoinedMembersCleanData());\r\n    // clean old project detail state\r\n    dispatch(projectActions.getProjectCleanData());\r\n    // get project detail\r\n    dispatch(\r\n      projectActions.getProject({\r\n        param: match.params.id,\r\n        path: 'projects'\r\n      })\r\n    );\r\n    // get joined members\r\n    dispatch(\r\n      projectActions.getJoinedMembers({\r\n        param: match.params.id,\r\n        path: 'projects/membersList'\r\n      })\r\n    );\r\n  }, [dispatch, match.params.id]);\r\n\r\n  // check authencation if not redirect to login page\r\n\r\n  // show notification after remove project\r\n  useEffect(() => {\r\n    if (removeProjectResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: removeProjectResult.message });\r\n      SuccessNotification(title, message);\r\n\r\n      dispatch(projectActions.removeProjectCleanData());\r\n      history.push('/project/list');\r\n    }\r\n  }, [dispatch, history, intl, removeProjectResult]);\r\n\r\n  useEffect(() => {\r\n    if (removeProjectError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: removeProjectErrors.message\r\n          ? removeProjectErrors.message\r\n          : 'projects.removeProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(projectActions.removeProjectCleanError());\r\n    }\r\n  }, [dispatch, intl, removeProjectError, removeProjectErrors]);\r\n\r\n  // redirect functions\r\n  const onBack = () => {\r\n    window.history.back()\r\n  };\r\n\r\n  const toMemberHistory = () => {\r\n    history.push(`/project/memberHistory/${match.params.id}`);\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Row>\r\n        <HeaderTitle title={<FormattedMessage id=\"projects.detail.title\" />} />\r\n      </Row>\r\n      <Row>\r\n        <ProjectDetail\r\n          getProject={getProject}\r\n          getJoinedMembers={getJoinedMembers}\r\n          cleanError={cleanError}\r\n          removeMember={removeMember}\r\n          getCustomers={getCustomers}\r\n          updateProject={updateProject}\r\n          project={project}\r\n          joinedMembers={joinedMembers}\r\n          loading={loading}\r\n          match={match}\r\n          addMember={addMember}\r\n          getMembers={getMembers}\r\n          updateMember={updateMember}\r\n        />\r\n      </Row>\r\n      <Row className={styles.footer}>\r\n        <Col span={12}>\r\n          <BackButton onBack={() => onBack()} />\r\n        </Col>\r\n        <Col span={12}>\r\n          <Row type=\"flex\" justify=\"end\">\r\n            <WithRole\r\n              type={['admin']}\r\n              component={ButtonRemoveProject}\r\n              match={match}\r\n              loading={loading}\r\n            />\r\n\r\n            <Button type=\"primary\" onClick={() => toMemberHistory()}>\r\n              <Icon type=\"history\" />\r\n              <FormattedMessage id=\"projects.detail.memberHistory\" />\r\n            </Button>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Row>\r\n  );\r\n};\r\n\r\nProjectDetailPage.propTypes = propTypes;\r\n\r\nexport default injectIntl(ProjectDetailPage, {});\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport { Table, Tag } from 'antd';\r\n\r\nconst propTypes = {};\r\n\r\nconst defaultProps = {};\r\n\r\nconst TableMemberHistory = () => {\r\n  const { members, loading } = useSelector((state) => state.projects);\r\n  const columns = [\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.staff_code\" />,\r\n      dataIndex: 'member_detail',\r\n      key: 'staff_code',\r\n      render: (memberDetail) => memberDetail.staff_code\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.name\" />,\r\n      dataIndex: 'member_detail',\r\n      key: 'fullname',\r\n      render: (memberDetail) => memberDetail.full_name\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.role\" />,\r\n      dataIndex: 'role',\r\n      key: 'role'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.effort\" />,\r\n      dataIndex: 'effort',\r\n      key: 'effort'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.time_in\" />,\r\n      dataIndex: 'time_in',\r\n      key: 'time_in',\r\n      render: (date) => {\r\n        return moment(parseInt(date, 10)).format('DD/MM/YYYY');\r\n      }\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.time_out\" />,\r\n      dataIndex: 'time_out',\r\n      key: 'time_out',\r\n      render: (date) => {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        return moment(parseInt(date, 10)).format('DD/MM/YYYY');\r\n      }\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.status\" />,\r\n      dataIndex: 'member_status',\r\n      key: 'member_status',\r\n      render: (status) => {\r\n        switch (status) {\r\n          case 'working':\r\n            return (\r\n              <Tag color=\"#87d068\">\r\n                <FormattedMessage id=\"projects.addMember.status.working\" />\r\n              </Tag>\r\n            );\r\n          case 'leave':\r\n            return (\r\n              <Tag color=\"#f5222D\">\r\n                <FormattedMessage id=\"projects.addMember.status.leave\" />\r\n              </Tag>\r\n            );\r\n          case 'idle':\r\n            return (\r\n              <Tag color=\"#ffe58f\">\r\n                <FormattedMessage id=\"projects.addMember.status.idle\" />\r\n              </Tag>\r\n            );\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      rowKey={(record) => record.id}\r\n      pagination={false}\r\n      columns={columns}\r\n      dataSource={members || []}\r\n      loading={loading}\r\n    />\r\n  );\r\n};\r\n\r\nTableMemberHistory.propTypes = propTypes;\r\nTableMemberHistory.defaultProps = defaultProps;\r\n\r\nexport default TableMemberHistory;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { css } from 'emotion';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, DatePicker } from 'antd';\r\n\r\nimport { actions as projectActions } from '../../store';\r\nimport TableMemberHistory from './TableMemberHistory';\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\n\r\nconst propTypes = {\r\n  match: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired,\r\n\r\n  getMemberHistory: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst styles = {\r\n  datePicker: css`\r\n    margin-bottom: 24px;\r\n  `\r\n};\r\n\r\nconst ProjectMemberHistory = ({ intl, getMemberHistory }) => {\r\n  const dispatch = useDispatch();\r\n  const [dateRange, setDateRange] = useState([moment().startOf('year'), moment().endOf('year')]);\r\n  const { getMemberHistoryError, getMemberHistoryErrors } = useSelector((state) => state.projects);\r\n\r\n  // First call members list api\r\n  useEffect(() => {\r\n    const body = {\r\n      time_in: parseInt(\r\n        moment()\r\n          .startOf('year')\r\n          .format('x'),\r\n        10\r\n      ),\r\n      time_out: parseInt(\r\n        moment()\r\n          .endOf('year')\r\n          .format('x'),\r\n        10\r\n      )\r\n    };\r\n\r\n    getMemberHistory && getMemberHistory(body);\r\n  }, [getMemberHistory]);\r\n\r\n  // Handle if api call failure\r\n  useEffect(() => {\r\n    if (getMemberHistoryError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getMemberHistoryErrors.message\r\n          ? getMemberHistoryErrors.message\r\n          : 'projects.memberHistory.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(projectActions.getMemberHistoryCleanError());\r\n    }\r\n  }, [dispatch, getMemberHistoryError, getMemberHistoryErrors, intl]);\r\n\r\n  const handleChange = (value) => {\r\n    setDateRange(value);\r\n    const body = {\r\n      time_in: parseInt(moment(value[0]).format('x'), 10),\r\n      time_out: parseInt(moment(value[1]).format('x'), 10)\r\n    };\r\n    getMemberHistory && getMemberHistory(body);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row style={{ marginBottom: 75 }}>\r\n        <Row className={styles.datePicker}>\r\n          <DatePicker.RangePicker\r\n            value={dateRange}\r\n            format=\"DD/MM/YYYY\"\r\n            onChange={handleChange}\r\n            allowClear={false}\r\n          />\r\n        </Row>\r\n        <Row>\r\n          <TableMemberHistory />\r\n        </Row>\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nProjectMemberHistory.propTypes = propTypes;\r\n\r\nProjectMemberHistory.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(ProjectMemberHistory, {});\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { css } from 'emotion';\r\n\r\nimport { Row, Col } from 'antd';\r\n\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as projectActions } from '../modules/project/store';\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport ProjectMemberHistory from '../modules/project/projectMemberHistory/components/ProjectMemberHistory';\r\nimport BackButton from '../components/Button/BackButton';\r\n\r\nconst propTypes = {\r\n  match: PropTypes.shape({}).isRequired,\r\n  history: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst styles = {\r\n  footer: css`\r\n    position: absolute !important;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n  `\r\n};\r\n\r\nconst ProjectMemberHistoryPage = ({ match, history }) => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['project']));\r\n  }, [dispatch]);\r\n\r\n  const getMemberHistory = useCallback(\r\n    (body) => {\r\n      dispatch(\r\n        projectActions.getMemberHistory({\r\n          body,\r\n          path: 'projects/membersList',\r\n          param: match.params.id\r\n        })\r\n      );\r\n    },\r\n    [dispatch, match.params.id]\r\n  );\r\n\r\n  const onBack = () => {\r\n    history.push(`/project/detail/${match.params.id}`);\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Row>\r\n        <HeaderTitle title={<FormattedMessage id=\"projects.memberHistory.title\" />} />\r\n      </Row>\r\n      <Row>\r\n        <ProjectMemberHistory match={match} getMemberHistory={getMemberHistory} />\r\n      </Row>\r\n      <Row className={styles.footer}>\r\n        <Col span={12}>\r\n          <BackButton onBack={() => onBack()} />\r\n        </Col>\r\n      </Row>\r\n    </Row>\r\n  );\r\n};\r\n\r\nProjectMemberHistoryPage.propTypes = propTypes;\r\n\r\nexport default ProjectMemberHistoryPage;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Icon } from 'antd';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { authApi } from '../api/auth/authApi';\r\nimport jwtDecode from 'jwt-decode';\r\nimport Cookies from 'js-cookie';\r\nimport '../assets/styles/login.scss';\r\n// import {dispatchShowLayout} from '../actions/layout';\r\n// import {dispatchLogin} from '../actions/auth';\r\n\r\n// import { dispatchHideLayout } from '../actions/layout';\r\nimport { dispatchHideLayout, dispatchShowLayout } from '../actions/layout';\r\nimport { dispatchLogin } from '../actions/auth';\r\n\r\nconst LoginPage = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatchHideLayout(dispatch);\r\n  }, [dispatch]);\r\n\r\n  const redirectLoginGoogle = () => {\r\n    window.location.href = process.env.REACT_APP_AUTH;\r\n  };\r\n  const responseGoogle = (reponse) => {\r\n    console.log(\"reponse\",reponse);\r\n    authApi.login(reponse).then((userLogin) => {\r\n      const userInfo = jwtDecode(userLogin.data.access_token);\r\n      console.log('userInfo', userInfo);\r\n      localStorage.setItem('expresIn', userInfo.exp * 1000);\r\n      Cookies.set('access-token', userLogin.data.access_token, { secure: false, path: '/' });\r\n      dispatchShowLayout(dispatch);\r\n      dispatchLogin(dispatch, { ...userInfo });\r\n      props.history.push('/project');\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrap-login-page\">\r\n      <div className=\"wrap-form-login\">\r\n        <h2 style={{ color: 'white' }}>Đăng Nhập</h2>\r\n        <div className=\"shadow-line-login\"></div>\r\n        <GoogleLogin\r\n        // clientId=\"711266978182-1btqe433pbtpc5hjfe69pk5hpejq9a8r.apps.googleusercontent.com\"\r\n        clientId=\"447692733646-6as6i45d60dsev3r82a5s9un70mrtqd9.apps.googleusercontent.com\"\r\n        buttonText={\r\n        <i style={{ fontSize: 20 }}>Đăng nhập bằng google nhé</i>\r\n        }\r\n        onSuccess={responseGoogle}\r\n        onFailure={responseGoogle}\r\n        cookiePolicy=\"single_host_origin\"\r\n        // uxMode=\"redirect\"\r\n        // redirectUri={`${window.location.origin}/callback`}\r\n      />\r\n        {/* <div className=\"button-login-google\" onClick={redirectLoginGoogle}>\r\n          <i style={{ fontSize: 16 }}>Đăng nhập bằng google nhé</i>\r\n          <div className=\"border-between-button-login\"></div>\r\n          <Icon style={{ fontSize: 30, color: '#fff', marginLeft: 5 }} type=\"google-plus\" />\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","const searchColumn = (currValue, column) => {\r\n  return column\r\n    .replace(/\\s/g, '')\r\n    .normalize('NFD')\r\n    .replace(/[\\u0300-\\u036f]/g, '')\r\n    .replace(/đ/g, 'd')\r\n    .replace(/Đ/g, 'D')\r\n    .toLowerCase()\r\n    .includes(\r\n      currValue\r\n        .replace(/\\s/g, '')\r\n        .toLowerCase()\r\n        .normalize('NFD')\r\n        .replace(/[\\u0300-\\u036f]/g, '')\r\n        .replace(/đ/g, 'd')\r\n        .replace(/Đ/g, 'D')\r\n    );\r\n};\r\n\r\nexport default searchColumn;\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Button, Input, Form, Popconfirm, Drawer, Typography, Icon } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { css } from 'emotion';\r\nimport { formShape } from 'rc-form';\r\n\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\n\r\nimport { actions as memberActions } from '../../store';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  close: PropTypes.func.isRequired,\r\n  form: formShape.isRequired,\r\n  data: PropTypes.shape({}),\r\n\r\n  updateMember: PropTypes.func.isRequired,\r\n  getMembers: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n  data: {}\r\n};\r\n\r\nconst styles = {\r\n  modal: css``,\r\n  drawerFooter: css`\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 24px;\r\n    left: 24px;\r\n    padding: 24px 0px;\r\n  `\r\n};\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 5\r\n  },\r\n  wrapperCol: {\r\n    span: 19\r\n  }\r\n};\r\n\r\nconst EditMember = ({ intl, visible, close, form, data, updateMember, getMembers }) => {\r\n  const dispatch = useDispatch();\r\n  const { updateMemberResult, updateMemberError, updateMemberErrors } = useSelector(\r\n    (state) => state.members\r\n  );\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(memberActions.updateMemberCleanError(false));\r\n      dispatch(memberActions.updateMemberCleanData());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (updateMemberResult) {\r\n      // show success notification\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: updateMemberResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean data\r\n      close();\r\n      // re-call get members list\r\n      getMembers && getMembers();\r\n    }\r\n  }, [updateMemberResult, close, intl, getMembers]);\r\n\r\n  useEffect(() => {\r\n    if (updateMemberError) {\r\n      // show error notification\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: updateMemberErrors.message\r\n          ? updateMemberErrors.message\r\n          : 'projects.updateProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(memberActions.updateMemberCleanError(false));\r\n    }\r\n  }, [intl, updateMemberError, updateMemberErrors, dispatch]);\r\n\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          staff_code: values.staff_code,\r\n          full_name: values.full_name,\r\n          phone_number: values.phone_number,\r\n          email: values.email\r\n        };\r\n        const oldBody = {\r\n          staff_code: data.staff_code,\r\n          full_name: data.full_name,\r\n          phone_number: data.phone_number,\r\n          email: data.email\r\n        };\r\n        if (JSON.stringify(body) === JSON.stringify(oldBody)) {\r\n          const title = intl.formatMessage({ id: 'notification.error' });\r\n          const message = intl.formatMessage({ id: 'notification.message.form.noChanging' });\r\n          return ErrorNotification(title, message);\r\n        }\r\n        updateMember && updateMember(body);\r\n      } else {\r\n        const title = intl.formatMessage({ id: 'notification.error' });\r\n        const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n        ErrorNotification(title, message);\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      title={<FormattedMessage id=\"members.memberModal.headerEditMember.title\" />}\r\n      visible={visible}\r\n      width={550}\r\n      className={styles.modal}\r\n      onClose={close}\r\n      maskClosable={false}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"members.createMembers.memberInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberStaffcode.title\" />}\r\n          validateStatus={form.getFieldError('staff_code') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('staff_code', {\r\n            initialValue: data.staff_code,\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: <FormattedMessage id=\"members.memberModal.form.memberStaffcode.validate\" />\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberFullname.title\" />}\r\n          validateStatus={form.getFieldError('full_name') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('full_name', {\r\n            initialValue: data.full_name,\r\n\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: <FormattedMessage id=\"members.memberModal.form.memberFullNname.validate\" />\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberPhonenumber.title\" />}\r\n          validateStatus={form.getFieldError('phone_number') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('phone_number', {\r\n            initialValue: data.phone_number,\r\n\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"members.memberModal.form.memberPhonenumber.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberEmail.title\" />}\r\n          validateStatus={form.getFieldError('email') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('email', {\r\n            initialValue: data.email,\r\n\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: (\r\n                  <FormattedMessage id=\"members.memberModal.form.memberEmail.validate.type\" />\r\n                )\r\n              },\r\n              {\r\n                required: true,\r\n                message: <FormattedMessage id=\"members.memberModal.form.memberEmail.validate\" />\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n      </Form>\r\n      <Row type=\"flex\" justify=\"end\" className={styles.drawerFooter}>\r\n        <Popconfirm\r\n          title={<FormattedMessage id=\"members.memberModal.confirm.edit\" />}\r\n          onConfirm={() => handleSubmit()}\r\n          okText={<FormattedMessage id=\"members.memberModal.button.confirm.yes\" />}\r\n          cancelText={<FormattedMessage id=\"members.memberModal.button.confirm.no\" />}>\r\n          <Button icon=\"edit\" type=\"primary\">\r\n            <FormattedMessage id=\"members.memberModal.editButton.title\" />\r\n          </Button>\r\n        </Popconfirm>\r\n        <Button icon=\"close-circle\" type=\"default\" key=\"close\" onClick={() => close()}>\r\n          <FormattedMessage id=\"members.memberModal.cancelButton.title\" />\r\n        </Button>\r\n      </Row>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nEditMember.propTypes = propTypes;\r\n\r\nEditMember.defaultProps = defaultProps;\r\n\r\nconst EditMemberForm = Form.create({ name: 'editMember' })(EditMember);\r\n\r\nexport default injectIntl(EditMemberForm, {});\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Table, Tooltip, Popconfirm, Button } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport EditMember from '../../editMember/components/EditMember';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport WithRole from '../../../../hocs/WithRole';\r\n\r\nimport { actions as memberActions } from '../../store';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  members: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n\r\n  getMembers: PropTypes.func.isRequired,\r\n  updateMember: PropTypes.func.isRequired,\r\n  removeMember: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\nconst ButtonEditMember = ({ handleEditSelected, record }) => {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        handleEditSelected(record);\r\n      }}\r\n      shape=\"circle\"\r\n      icon=\"edit\"\r\n      type=\"primary\"\r\n      style={{ margin: '0px 5px' }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ButtonDeleteMember = ({ removeMember, record }) => {\r\n  return (\r\n    <Popconfirm\r\n      title={<FormattedMessage id=\"members.confirm.delete\" />}\r\n      onConfirm={() => removeMember && removeMember(record)}\r\n      okText={<FormattedMessage id=\"members.button.confirm.yes\" />}\r\n      cancelText={<FormattedMessage id=\"members.button.confirm.no\" />}>\r\n      <Button shape=\"circle\" icon=\"delete\" type=\"danger\" style={{ margin: '0px 5px' }} />\r\n    </Popconfirm>\r\n  );\r\n};\r\nconst Members = ({ intl, members, getMembers, updateMember, removeMember }) => {\r\n  const dispatch = useDispatch();\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const [dataItem, setDataItem] = useState({});\r\n  const { removeMemberResult, removeMemberError, removeMemberErrors, loading } = useSelector(\r\n    (state) => state.members\r\n  );\r\n\r\n  const handleEditSelected = (data) => {\r\n    data && setDataItem(data);\r\n    setDrawerVisible(!drawerVisible);\r\n  };\r\n  const columns = [\r\n    {\r\n      title: <FormattedMessage id=\"members.memberTable.staffCode.title\" />,\r\n      dataIndex: 'staff_code',\r\n      key: 'staff_code'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"members.memberTable.name.title\" />,\r\n      dataIndex: 'full_name',\r\n      key: 'full_name'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"members.memberTable.phoneNumber.title\" />,\r\n      dataIndex: 'phone_number',\r\n      key: 'phone_number'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"members.memberTable.email.title\" />,\r\n      dataIndex: 'email',\r\n      key: 'email'\r\n    },\r\n    {\r\n      title: '',\r\n      dataIndex: '',\r\n      key: 'x',\r\n      align: 'right',\r\n      render: (record) => (\r\n        <React.Fragment>\r\n          <Tooltip\r\n            placement=\"top\"\r\n            title={<FormattedMessage id=\"members.memberTable.buttonDelete.title\" />}>\r\n            <WithRole\r\n              type={['admin']}\r\n              component={ButtonDeleteMember}\r\n              removeMember={removeMember}\r\n              record={record}\r\n            />\r\n          </Tooltip>\r\n          <Tooltip\r\n            placement=\"top\"\r\n            title={<FormattedMessage id=\"members.memberTable.buttonEdit.title\" />}>\r\n            <WithRole\r\n              type={['admin']}\r\n              component={ButtonEditMember}\r\n              handleEditSelected={handleEditSelected}\r\n              record={record}\r\n            />\r\n          </Tooltip>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (removeMemberResult) {\r\n      // show success notification\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: removeMemberResult.message });\r\n      SuccessNotification(title, message);\r\n      // clean data\r\n      dispatch(memberActions.removeMemberCleanData());\r\n      // re-call get Members list\r\n      getMembers && getMembers();\r\n    }\r\n  }, [removeMemberResult, intl, getMembers, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (removeMemberError) {\r\n      // show error notification\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: removeMemberErrors.message\r\n          ? removeMemberErrors.message\r\n          : 'members.removeMember.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(memberActions.removeMemberCleanError(false));\r\n    }\r\n  }, [intl, removeMemberError, removeMemberErrors, dispatch]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Table\r\n        columns={columns}\r\n        rowKey={(record, index) => index}\r\n        dataSource={members}\r\n        loading={loading}\r\n      />\r\n      {drawerVisible && (\r\n        <EditMember\r\n          visible={drawerVisible}\r\n          updateMember={updateMember}\r\n          getMembers={getMembers}\r\n          close={() => handleEditSelected()}\r\n          data={dataItem}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nMembers.propTypes = propTypes;\r\nMembers.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(Members, {});\r\n","export default {\r\n  keyboard: false,\r\n  maskClosable: false,\r\n  closable: false\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { formShape } from 'rc-form';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Modal, Button, Input, Form, notification, Icon, Popconfirm, Typography } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { css } from 'emotion';\r\n\r\nimport { actions as memberActions } from '../../store';\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport modalConfig from '../../../../utils/modal.config';\r\n\r\nconst propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired,\r\n  form: formShape.isRequired,\r\n\r\n  listStatus: PropTypes.arrayOf(PropTypes.shape({})),\r\n  listMember: PropTypes.arrayOf(PropTypes.shape({})),\r\n  selectedMember: PropTypes.shape({}),\r\n\r\n  getMembers: PropTypes.func.isRequired,\r\n  createMember: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = [];\r\n\r\nconst styles = {\r\n  modal: css``\r\n};\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 7\r\n  },\r\n  wrapperCol: {\r\n    span: 17\r\n  }\r\n};\r\n\r\nconst CreateMember = ({ visible, close, form, intl, getMembers, createMember }) => {\r\n  const dispatch = useDispatch();\r\n  const { createMemberResult, createMemberError, createMemberErrors, loading } = useSelector(\r\n    (state) => state.members\r\n  );\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(memberActions.createMemberCleanError(false));\r\n      dispatch(memberActions.createMemberCleanData());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (createMemberResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: createMemberResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean data\r\n      close();\r\n      // re-call get all customers api\r\n      getMembers && getMembers();\r\n    }\r\n  }, [createMemberResult, intl, getMembers, close]);\r\n\r\n  useEffect(() => {\r\n    // show error notification\r\n    if (createMemberError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: 'projects.createProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(memberActions.createMemberCleanError());\r\n    }\r\n  }, [createMemberError, createMemberErrors, dispatch, intl]);\r\n\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          staff_code: values.staff_code,\r\n          full_name: values.full_name,\r\n          phone_number: values.phone_number,\r\n          email: values.email\r\n        };\r\n        createMember && createMember(body);\r\n      } else {\r\n        notification.open({\r\n          message: (\r\n            <span style={{ color: '#f5222d', fontWeight: 'bold' }}>\r\n              {intl.formatMessage({ id: 'notification.error' })}\r\n            </span>\r\n          ),\r\n          description: intl.formatMessage({ id: 'notification.message.form.error' }),\r\n          duration: 2,\r\n          icon: <Icon type=\"frown\" style={{ color: '#f5222d' }} />\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={<FormattedMessage id=\"members.memberModal.headerCreateMember.title\" />}\r\n      cancelText=\"Close\"\r\n      visible={visible}\r\n      width=\"40vw\"\r\n      className={styles.modal}\r\n      onCancel={() => close()}\r\n      maskClosable={false}\r\n      footer={[\r\n        <Row type=\"flex\" key=\"abc\" justify=\"end\">\r\n          <Popconfirm\r\n            title={<FormattedMessage id=\"members.memberModal.confirm.create\" />}\r\n            onConfirm={() => handleSubmit()}\r\n            okText={<FormattedMessage id=\"members.memberModal.button.confirm.yes\" />}\r\n            cancelText={<FormattedMessage id=\"members.memberModal.button.confirm.no\" />}>\r\n            <Button icon=\"plus\" type=\"primary\" loading={loading}>\r\n              <FormattedMessage id=\"members.memberModal.createButton.title\" />\r\n            </Button>\r\n          </Popconfirm>\r\n          <Button icon=\"close-circle\" type=\"default\" key=\"close\" onClick={() => close()}>\r\n            <FormattedMessage id=\"members.memberModal.cancelButton.title\" />\r\n          </Button>\r\n        </Row>\r\n      ]}\r\n      {...modalConfig}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"members.createMembers.memberInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberStaffcode.title\" />}\r\n          validateStatus={form.getFieldError('staff_code') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('staff_code', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: <FormattedMessage id=\"members.memberModal.form.memberStaffcode.validate\" />\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberFullname.title\" />}\r\n          validateStatus={form.getFieldError('full_name') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('full_name', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: <FormattedMessage id=\"members.memberModal.form.memberFullNname.validate\" />\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberPhonenumber.title\" />}\r\n          validateStatus={form.getFieldError('phone_number') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('phone_number', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"members.memberModal.form.memberPhonenumber.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"members.memberModal.form.memberEmail.title\" />}\r\n          validateStatus={form.getFieldError('email') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: (\r\n                  <FormattedMessage id=\"members.memberModal.form.memberEmail.validate.type\" />\r\n                )\r\n              },\r\n              {\r\n                required: true,\r\n                message: <FormattedMessage id=\"members.memberModal.form.memberEmail.validate\" />\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCreateMember.propTypes = propTypes;\r\n\r\nCreateMember.defaultProps = defaultProps;\r\n\r\nconst CreateMemberForm = Form.create({ name: 'createMember' })(CreateMember);\r\n\r\nexport default injectIntl(CreateMemberForm, {});\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col, Input } from 'antd';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as memberActions } from '../modules/member/store';\r\nimport searchColumn from '../utils/searchColumn';\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport ErrorNotification from '../components/Notification/Error';\r\nimport Members from '../modules/member/listMember/components/Members';\r\nimport CreateMember from '../modules/member/createMember/components/CreateMember';\r\n\r\nconst propTypes = {\r\n  history: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst ListMemberPage = ({ history, intl }) => {\r\n  const dispatch = useDispatch();\r\n  const [openCreateModal, setOpenCreateModal] = useState(false);\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const { list, getMembersError, getMembersErrors } = useSelector((state) => state.members);\r\n  const [filteredData, setFilteredData] = useState([]);  \r\n\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['member']));\r\n    setFilteredData(list);\r\n  }, [dispatch, list]);\r\n\r\n  useEffect(() => {\r\n    dispatch(memberActions.getMembers({ path: 'members' }));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (getMembersError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getMembersErrors.message\r\n          ? getMembersErrors.message\r\n          : 'customers.getCustomer.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(memberActions.getMembersCleanError());\r\n    }\r\n  }, [dispatch, getMembersError, getMembersErrors, intl]);\r\n\r\n  const removeMember = useCallback(\r\n    (record) => {\r\n      dispatch(memberActions.removeMember({ path: 'members/remove', param: record.staff_code }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const getMembers = useCallback(() => {\r\n    dispatch(memberActions.getMembers({ path: 'members' }));\r\n  }, [dispatch]);\r\n\r\n  const createNewMember = useCallback(\r\n    (body) => {\r\n      dispatch(memberActions.createMember({ path: 'members', body }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const updateMember = useCallback(\r\n    (body) => {\r\n      dispatch(memberActions.updateMember({ body, path: 'members', param: body.staff_code }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    const currValue = e.target.value;\r\n    setSearchInput(currValue);\r\n    const data = list.filter((value) => {\r\n      return (\r\n        searchColumn(currValue, value.staff_code) ||\r\n        searchColumn(currValue, value.full_name) ||\r\n        searchColumn(currValue, value.email)\r\n      );\r\n    });\r\n    setFilteredData(data);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row>\r\n        <Col>\r\n          <HeaderTitle title={<FormattedMessage id=\"members.header.title\" />} />\r\n        </Col>\r\n      </Row>\r\n      <Row justify=\"center\">\r\n        <Col span={10} offset={14}>\r\n          <Input placeholder=\"Search\" value={searchInput} onChange={handleChange} />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={16} style={{ paddingTop: 20 }}>\r\n        <Members\r\n          members={filteredData}\r\n          getMembers={getMembers}\r\n          updateMember={updateMember}\r\n          removeMember={removeMember}\r\n        />\r\n      </Row>\r\n      {openCreateModal && (\r\n        <CreateMember\r\n          createMember={createNewMember}\r\n          getMembers={getMembers}\r\n          visible={openCreateModal}\r\n          close={() => setOpenCreateModal(!openCreateModal)}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nListMemberPage.propTypes = propTypes;\r\n\r\nListMemberPage.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(ListMemberPage, {});\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { formShape } from 'rc-form';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { css } from 'emotion';\r\n\r\nimport { Row, Modal, Button, Input, Form, Icon, Popconfirm, Typography } from 'antd';\r\n\r\nimport { actions as customerActions } from '../../store';\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport modalConfig from '../../../../utils/modal.config';\r\n\r\nconst propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  close: PropTypes.func.isRequired,\r\n  form: formShape.isRequired,\r\n  getCutomers: PropTypes.func.isRequired,\r\n  addCustomer: PropTypes.func.isRequired,\r\n\r\n  listStatus: PropTypes.arrayOf(PropTypes.shape({})),\r\n  listCustomer: PropTypes.arrayOf(PropTypes.shape({})),\r\n  selectedCustomer: PropTypes.shape({}),\r\n\r\n};\r\n\r\nconst defaultProps = {\r\n  listStatus: [],\r\n  listCustomer: [],\r\n  selectedCustomer: {}\r\n};\r\n\r\nconst styles = {\r\n  modal: css``\r\n};\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 7\r\n  },\r\n  wrapperCol: {\r\n    span: 17\r\n  }\r\n};\r\n\r\nconst CreateCustomerModal = ({ visible, close, form, intl, getCutomers, addCustomer }) => {\r\n  const dispatch = useDispatch();\r\n  const { createCustomerResult, createCustomerError, createCustomerErrors, loading } = useSelector(\r\n    (state) => state.customers\r\n  );\r\n\r\n  // Handle showing notification after add new customer\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (createCustomerResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: createCustomerResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean data\r\n      close();\r\n      // re-call get all customers api\r\n      getCutomers && getCutomers();\r\n    }\r\n  }, [close, intl, createCustomerResult, getCutomers]);\r\n\r\n  // Handle showing error if add new customer failure\r\n  useEffect(() => {\r\n    if (createCustomerError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: 'projects.createProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(customerActions.createCustomerCleanError(false));\r\n    }\r\n  }, [createCustomerError, createCustomerErrors, dispatch, intl]);\r\n\r\n  // Clean Data, Error after close\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(customerActions.createCustomerCleanError());\r\n      dispatch(customerActions.createCustomerCleanData());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  // Form submit\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          address: values.address,\r\n          name: values.name,\r\n          phone_number: values.phone_number,\r\n          email: values.email\r\n        };\r\n        // call api when valid data\r\n        addCustomer && addCustomer(body);\r\n      } else {\r\n        // showing error form input notification\r\n        const title = intl.formatMessage({ id: 'notification.error' });\r\n        const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n        ErrorNotification(title, message);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={<FormattedMessage id=\"customers.customerModal.headerCreateCustomer.title\" />}\r\n      visible={visible}\r\n      width={550}\r\n      className={styles.modal}\r\n      onCancel={() => close()}\r\n      footer={[\r\n        <Row type=\"flex\" key=\"abc\" justify=\"end\">\r\n          <Popconfirm\r\n            title={<FormattedMessage id=\"customers.createCustomers.confirm.create\" />}\r\n            onConfirm={() => handleSubmit()}\r\n            okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n            cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n            <Button icon=\"plus\" type=\"primary\" loading={loading}>\r\n              <FormattedMessage id=\"button.add\" />\r\n            </Button>\r\n          </Popconfirm>\r\n          <Button\r\n            icon=\"close-circle\"\r\n            type=\"default\"\r\n            key=\"close\"\r\n            onClick={() => close()}\r\n            disabled={loading}>\r\n            <FormattedMessage id=\"button.close\" />\r\n          </Button>\r\n        </Row>\r\n      ]}\r\n      {...modalConfig}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"customers.createCustomers.customerInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerName.title\" />}\r\n          validateStatus={form.getFieldError('name') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('name', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerName.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerAddress.title\" />}\r\n          validateStatus={form.getFieldError('address') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('address', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerAddress.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerEmail.title\" />}\r\n          validateStatus={form.getFieldError('email') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerEmail.validate.type\" />\r\n                )\r\n              },\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerEmail.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerPhonenumber.title\" />}\r\n          validateStatus={form.getFieldError('phone_number') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('phone_number', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerPhonenumber.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nCreateCustomerModal.propTypes = propTypes;\r\n\r\nCreateCustomerModal.defaultProps = defaultProps;\r\n\r\nconst CreateCustomerForm = Form.create({ name: 'createCustomer' })(CreateCustomerModal);\r\n\r\nexport default injectIntl(CreateCustomerForm, {});\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Table } from 'antd';\r\n\r\nimport { history } from '../../../../store';\r\n\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  customers: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n  getCustomers: PropTypes.func.isRequired,\r\n  removeCustomer: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\n\r\nconst CustomersTable = ({ intl, customers }) => {\r\n  const { loading } = useSelector(\r\n    (state) => state.customers\r\n  );\r\n  const onSelectCustomer = (item) => {\r\n    history.push(`/customer/detail/${item.id}`);    \r\n  };\r\n  \r\n  const columns = [\r\n    {\r\n      title: <FormattedMessage id=\"customers.name.title\" />,\r\n      dataIndex: 'name',\r\n      key: 'name'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"customers.email.title\" />,\r\n      dataIndex: 'email',\r\n      key: 'email'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"customers.phone.title\" />,\r\n      dataIndex: 'phone_number',\r\n      key: 'phone_number'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"customers.address.title\" />,\r\n      dataIndex: 'address',\r\n      key: 'address'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Table\r\n        columns={columns}\r\n        rowKey={(record) => record.id}\r\n        dataSource={customers}\r\n        loading={loading}\r\n        onRow={(item) => ({\r\n          onClick: () => onSelectCustomer(item)\r\n        })}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nCustomersTable.propTypes = propTypes;\r\n\r\nCustomersTable.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(CustomersTable, {});\r\n","import React, { useEffect, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { css } from 'emotion';\r\nimport { Row, Button, Col, Input } from 'antd';\r\n\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as customerActions } from '../modules/customer/store';\r\nimport searchColumn from '../utils/searchColumn';\r\n\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport ErrorNotification from '../components/Notification/Error';\r\nimport WithRole from '../hocs/WithRole';\r\n\r\nimport CreateModal from '../modules/customer/createCustomer/components/CreateCustomerModal';\r\nimport CustomersTable from '../modules/customer/customers/components/CustomersTable';\r\n\r\nconst styles = {\r\n  container: css`\r\n    height: 100% !important;\r\n  `,\r\n  addCustomerButton: css`\r\n    background: #49a32b !important;\r\n    color: #fff !important;\r\n    margin-bottom: 10px;\r\n  `\r\n};\r\n\r\nconst propTypes = {\r\n  history: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst ButtonCreateCustomer = ({ handleCreateModal, intl }) => {\r\n  return (\r\n    <Button icon=\"user-add\" className={styles.addCustomerButton} onClick={handleCreateModal}>\r\n      {intl.formatMessage({ id: 'button.add' })}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst CustomersPage = React.memo(({ history, intl }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // selector\r\n  const { list, getCustomersError, getCustomersErrors } = useSelector((state) => state.customers);\r\n\r\n  // state\r\n  const [visible, setVisible] = useState(false);\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [filteredData, setFilteredData] = useState([]);\r\n\r\n  // get customers function\r\n  const getCustomers = useCallback(() => {\r\n    dispatch(\r\n      customerActions.getCustomers({\r\n        path: 'customers'\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  // add customers function\r\n  const addCustomer = useCallback(\r\n    (body) => {\r\n      dispatch(customerActions.createCustomer({ body, path: 'customers' }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeCustomer = useCallback(\r\n    (record) => {\r\n      dispatch(\r\n        customerActions.removeCustomer({\r\n          path: 'customers/remove',\r\n          param: record.id\r\n        })\r\n      );\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  // check authencation\r\n\r\n  // get customers at first render\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['customers']));\r\n    getCustomers();\r\n  }, [dispatch, getCustomers]);\r\n\r\n  useEffect(() => {\r\n    setFilteredData(list);\r\n  }, [list]);\r\n\r\n  // show notification if get customers list failure\r\n  useEffect(() => {\r\n    if (getCustomersError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getCustomersErrors.message\r\n          ? getCustomersErrors.message\r\n          : 'customers.getCustomers.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(customerActions.getCustomersCleanError());\r\n    }\r\n  }, [dispatch, getCustomersError, getCustomersErrors, intl]);\r\n\r\n  const handleCreateModal = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const currValue = e.target.value;\r\n    setSearchInput(currValue);\r\n    const data = list.filter((value) => {\r\n      return searchColumn(currValue, value.name) || searchColumn(currValue, value.email);\r\n    });\r\n    setFilteredData(data);\r\n  };\r\n\r\n  return (\r\n    <Row className={styles.container}>\r\n      <Row>\r\n        <HeaderTitle title={intl.formatMessage({ id: 'customers.header.title' })} />\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <WithRole\r\n            type={['admin']}\r\n            component={ButtonCreateCustomer}\r\n            handleCreateModal={handleCreateModal}\r\n            intl={intl}\r\n          />\r\n        </Col>\r\n        <Col span={10} offset={14}>\r\n          <Input placeholder=\"Search\" value={searchInput} onChange={handleChange} />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ paddingTop: 20 }}>\r\n        <CustomersTable\r\n          customers={filteredData}\r\n          removeCustomer={removeCustomer}\r\n          getCustomers={getCustomers}\r\n        />\r\n      </Row>\r\n      {visible && (\r\n        <CreateModal\r\n          visible={visible}\r\n          close={() => setVisible(!visible)}\r\n          getCutomers={getCustomers}\r\n          addCustomer={addCustomer}\r\n        />\r\n      )}\r\n    </Row>\r\n  );\r\n});\r\n\r\nCustomersPage.propTypes = propTypes;\r\n\r\nCustomersPage.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(CustomersPage, {});\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <Row>\r\n      <FormattedMessage id=\"Not Found\" />\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { SyncLoader } from 'react-spinners';\r\nimport { css } from '@emotion/core';\r\nimport jwtDecode from 'jwt-decode';\r\nimport Cookies from 'js-cookie';\r\n\r\nimport { dispatchHideLayout, dispatchShowLayout } from '../actions/layout';\r\nimport { dispatchLogin } from '../actions/auth';\r\nimport { authApi } from '../api/auth/authApi';\r\n\r\nfunction CallbackOAuth(props) {\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatchHideLayout(dispatch);\r\n    // console.log('props', props);\r\n\r\n    if (props.location) {\r\n      // const query = props.location.search;\r\n      const token = props.location.hash.split('&')[1].split('=')[1];\r\n      // console.log('props', props);\r\n      // console.log('query', query.slice(6, 97));\r\n      // const accessCode = query.slice(6, 97);\r\n      authApi.login(token).then((userLogin) => {\r\n        console.log('userLogin', userLogin);\r\n        const userInfo = jwtDecode(userLogin.data.access_token);\r\n        console.log('userInfo', userInfo);\r\n        localStorage.setItem('expresIn', userInfo.exp * 1000);\r\n        Cookies.set('access-token', userLogin.data.access_token, { secure: false, path: '/' });\r\n        dispatchShowLayout(dispatch);\r\n        dispatchLogin(dispatch, { ...userInfo});\r\n        props.history.push('/project');\r\n      });\r\n    }\r\n    // eslint-disable-next-line react/destructuring-assignment\r\n  }, [dispatch, props.location.search, props.history]);\r\n\r\n  const override = css`\r\n    display: block;\r\n\r\n    color: red;\r\n  `;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: '#fff',\r\n        width: '100vw',\r\n        height: '100vh',\r\n        paddingTop: 100,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n      }}>\r\n      <h2 style={{ color: '#747CDD', marginRight: 10 }}>Loading</h2>\r\n      <SyncLoader css={override} sizeUnit=\"px\" size={10} color=\"#747CDD\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CallbackOAuth;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { css } from 'emotion';\r\nimport { formShape } from 'rc-form';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nimport {\r\n  Drawer,\r\n  Form,\r\n  Icon,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Descriptions,\r\n  Typography,\r\n  Button,\r\n  Popconfirm,\r\n  Spin\r\n} from 'antd';\r\n\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport { actions as memberActions } from '../../../member/store';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  drawerVisible: PropTypes.bool.isRequired,\r\n  form: formShape.isRequired,\r\n\r\n  data: PropTypes.shape({}),\r\n\r\n  getMembers: PropTypes.func.isRequired,\r\n  updateMember: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n  data: {}\r\n};\r\n\r\nconst styles = {\r\n  drawerFooter: css`\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 24px;\r\n    left: 24px;\r\n    padding: 24px 0px;\r\n  `,\r\n  deletedUserMsg: css`\r\n    color: red !important;\r\n  `\r\n};\r\n\r\nconst listRole = [\r\n  { type: 'admin', permission: 'all' },\r\n  { type: 'manager', permission: 'view, edit' },\r\n  { type: 'normal', permission: 'view' }\r\n];\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 8\r\n  },\r\n  wrapperCol: {\r\n    span: 16\r\n  }\r\n};\r\n\r\nconst UpdateUserDrawer = ({\r\n  getMembers,\r\n  updateMember,\r\n  intl,\r\n  onClose,\r\n  drawerVisible,\r\n  form,\r\n  data\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [userChange, setUserChange] = useState({ ...data });\r\n  const { updateMemberResult, updateMemberError, updateMemberErrors, loading } = useSelector(\r\n    (state) => state.members\r\n  );\r\n\r\n  const memberLoading = useSelector((state) => state.members.loading);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(memberActions.updateMemberCleanError(false));\r\n      dispatch(memberActions.updateMemberCleanData());\r\n    };\r\n  }, [dispatch]);\r\n  // Handle showing notification after update project\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (updateMemberResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: updateMemberResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean state\r\n      onClose();\r\n      // re-call get User detail api\r\n      getMembers && getMembers();\r\n    }\r\n    // show error notification\r\n  }, [onClose, intl, updateMemberResult, dispatch, getMembers]);\r\n\r\n  useEffect(() => {\r\n    if (updateMemberError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({ id: 'users.updateUser.message.error' });\r\n      ErrorNotification(title, message);\r\n      // clean state\r\n      dispatch(memberActions.updateMemberCleanError());\r\n    }\r\n  }, [dispatch, intl, updateMemberError, updateMemberErrors]);\r\n\r\n  const handleSubmit = () => {\r\n    form.validateFields(async(err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          staff_code: userChange.staff_code,\r\n          full_name: userChange.full_name,\r\n          email: userChange.email,\r\n          permission: userChange.permission,\r\n          type: userChange.type,\r\n          phone_number: userChange.phone_number\r\n        };\r\n\r\n        const oldBody = {\r\n          staff_code: data.staff_code,\r\n          full_name: data.full_name,\r\n          email: data.email,\r\n          permission: data.permission,\r\n          type: data.type,\r\n          phone_number: data.phone_number\r\n        };\r\n        // check if value is not change\r\n        if (JSON.stringify(body) === JSON.stringify(oldBody)) {\r\n          const title = intl.formatMessage({ id: 'notification.error' });\r\n          const message = intl.formatMessage({ id: 'notification.message.form.noChanging' });\r\n          return ErrorNotification(title, message);\r\n        }\r\n\r\n        if (userChange.hidden) {\r\n          const title = intl.formatMessage({ id: 'notification.error' });\r\n          const message = intl.formatMessage({ id: 'notification.message.form.deletedUser' });\r\n          return ErrorNotification(title, message);\r\n        }\r\n        updateMember &&  updateMember(body);\r\n      } else {\r\n        // showing error form input notification\r\n        const title = intl.formatMessage({ id: 'notification.error' });\r\n        const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n        ErrorNotification(title, message);\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  const handleSelect = (value) => {\r\n    const newRole = listRole.filter((item) => item.type === value)[0];\r\n    setUserChange({ ...userChange, ...newRole });\r\n    return userChange;\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      title={<FormattedMessage id=\"users.drawerUpdate.tile\" />}\r\n      placement=\"right\"\r\n      onClose={onClose}\r\n      visible={drawerVisible}\r\n      maskClosable={false}\r\n      width={550}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            <FormattedMessage id=\"users.drawerUpdate.userInformation\" />\r\n          </Typography.Text>\r\n        </Row>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"users.role.title\" />}\r\n          validateStatus={form.getFieldError('type') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('type', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: intl.formatMessage({ id: 'projects.createProject.error.status' })\r\n              }\r\n            ],\r\n            initialValue: listRole.find((e) => {\r\n              return e.type === data.type;\r\n            }).type\r\n          })(\r\n            <Select\r\n              allowClear\r\n              autoClearSearchValue\r\n              onSelect={(value) => handleSelect(value)}\r\n              notFoundContent={memberLoading && <Spin size=\"small\" />}>\r\n              {(listRole || []).map((e) => {\r\n                return (\r\n                  <Select.Option key={e.type} value={e.type}>\r\n                    {e.type}\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n        <Row>\r\n          <Col span={8}></Col>\r\n          <Col span={16}>\r\n            <Descriptions column={1}>\r\n              <Descriptions.Item label={<FormattedMessage id=\"users.name.title\" />}>\r\n                {userChange.full_name || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item label={<FormattedMessage id=\"users.email.title\" />}>\r\n                {userChange.email || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item label={<FormattedMessage id=\"users.permission.title\" />}>\r\n                {userChange.permission || null}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item label={<FormattedMessage id=\"users.role.title\" />}>\r\n                {userChange.type || null}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n            {userChange.hidden && (\r\n              <Typography.Text className={styles.deletedUserMsg}>\r\n                <FormattedMessage id=\"projects.updateProject.deletedCustomer\" />\r\n              </Typography.Text>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <Row className={styles.drawerFooter}>\r\n        <Popconfirm\r\n          title={<FormattedMessage id=\"users.drawerUpdate.confirm.add\" />}\r\n          onConfirm={() => handleSubmit()}\r\n          okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n          cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n          <Button icon=\"edit\" type=\"primary\" loading={loading}>\r\n            {<FormattedMessage id=\"button.update\" />}\r\n          </Button>\r\n        </Popconfirm>\r\n        <Button\r\n          style={{ marginLeft: 15 }}\r\n          icon=\"close-circle\"\r\n          type=\"default\"\r\n          key=\"close\"\r\n          onClick={onClose}>\r\n          {<FormattedMessage id=\"button.close\" />}\r\n        </Button>\r\n      </Row>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nUpdateUserDrawer.propTypes = propTypes;\r\n\r\nUpdateUserDrawer.defaultProps = defaultProps;\r\n\r\nconst UpdateUserForm = Form.create({ name: 'updateUser' })(UpdateUserDrawer);\r\n\r\nexport default injectIntl(UpdateUserForm, {});\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Table, Button, Tooltip, Row } from 'antd';\r\n\r\nimport UpdateUserDrawer from '../../editUser/components/UpdateUserDrawer';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  users: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n\r\n  getMembers: PropTypes.func.isRequired,\r\n  updateMember: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst UsersTable = ({ users, updateMember, getMembers }) => {\r\n  const [dataItem, setDataItem] = useState({});\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  const columns = [\r\n    {\r\n      title: <FormattedMessage id=\"users.name.title\" />,\r\n      dataIndex: 'full_name',\r\n      key: 'full_name'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"users.email.title\" />,\r\n      dataIndex: 'email',\r\n      key: 'email'\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"users.role.title\" />,\r\n      dataIndex: 'type',\r\n      key: 'type'\r\n    },\r\n    {\r\n      title: '',\r\n      dataIndex: '',\r\n      key: 'x',\r\n      align: 'right',\r\n      render: (record) => (\r\n        <React.Fragment>\r\n          <Tooltip placement=\"top\" title={<FormattedMessage id=\"users.button.edit\" />}>\r\n            <Button\r\n              shape=\"circle\"\r\n              icon=\"edit\"\r\n              type=\"primary\"\r\n              style={{ margin: '0px 5px' }}\r\n              // eslint-disable-next-line no-use-before-define\r\n              onClick={() => handleEditSelected(record)}\r\n            />\r\n          </Tooltip>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  ];\r\n  const handleEditSelected = (data) => {\r\n    data && setDataItem(data);\r\n    setDrawerVisible(!drawerVisible);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row>\r\n        <Table\r\n          columns={columns}\r\n          rowKey={(record, index) => index}\r\n          dataSource={users}\r\n        />\r\n      </Row>\r\n      {drawerVisible && (\r\n        <UpdateUserDrawer\r\n          drawerVisible={drawerVisible}\r\n          updateMember={updateMember}\r\n          getMembers={getMembers}\r\n          onClose={() => handleEditSelected()}\r\n          data={dataItem}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nUsersTable.propTypes = propTypes;\r\n\r\nUsersTable.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(UsersTable, {});\r\n","import React, { useEffect, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { css } from 'emotion';\r\nimport { Row, Col, Input } from 'antd';\r\n\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport UsersTable from '../modules/user/users/components/UsersTable';\r\nimport ErrorNotification from '../components/Notification/Error';\r\n\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as memberActions } from '../modules/member/store';\r\nimport searchColumn from '../utils/searchColumn';\r\n\r\nconst styles = {\r\n  container: css`\r\n    height: 100% !important;\r\n  `,\r\n  table: css`\r\n    paddingtop: 20 !important;\r\n  `\r\n};\r\n\r\nconst propTypes = {\r\n  history: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst UsersPage = ({ history, intl }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // selector\r\n  const { list, getMembersError, getMembersErrors } = useSelector((state) => state.members);\r\n\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  // get users function\r\n  useEffect(() => {\r\n    dispatch(\r\n      memberActions.getMembers({\r\n        path: 'members'\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setFilteredData(list);\r\n  }, [list]);\r\n\r\n  const getMembers = useCallback(() => {\r\n    dispatch(\r\n      memberActions.getMembers({\r\n        path: 'members'\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  const updateMember = useCallback(\r\n    (body) => {\r\n      dispatch(memberActions.updateMember({ body, path: 'members', param: body.staff_code }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  // show notification if get users list failure\r\n  useEffect(() => {\r\n    if (getMembersError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getMembersErrors.message ? getMembersErrors.message : 'users.getMembers.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(memberActions.getMembersCleanError());\r\n    }\r\n  }, [dispatch, getMembersError, getMembersErrors, intl]);\r\n\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['roles']));\r\n  }, [dispatch]);\r\n\r\n  const handleChange = (e) => {\r\n    const currValue = e.target.value;\r\n    setSearchInput(currValue);\r\n    const data = list.filter((value) => {\r\n      return searchColumn(currValue, value.full_name) || searchColumn(currValue, value.email);\r\n    });\r\n    setFilteredData(data);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row className={styles.container}>\r\n        <Row>\r\n          <Col>\r\n            <HeaderTitle title={intl.formatMessage({ id: 'users.header.title' })} />\r\n          </Col>\r\n          <Col span={10} offset={14}>\r\n            <Input placeholder=\"Search\" value={searchInput} onChange={handleChange} />\r\n          </Col>\r\n        </Row>\r\n        <Row style={{ paddingTop: 20 }}>\r\n          <UsersTable users={filteredData} getMembers={getMembers} updateMember={updateMember} />\r\n        </Row>\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nUsersPage.propTypes = propTypes;\r\n\r\nUsersPage.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(UsersPage, {});\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { css } from 'emotion';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { formShape } from 'rc-form';\r\nimport {\r\n    Form,\r\n    Select,\r\n    Button,\r\n    Input,\r\n    Spin,\r\n    Row,\r\n    Icon,\r\n    Typography,\r\n    Checkbox,\r\n    Modal,\r\n    Popconfirm\r\n} from 'antd';\r\nimport { actions as settingActions } from '../store';\r\n\r\nimport ErrorNotification from '../../../components/Notification/Error';\r\nimport SuccessNotification from '..//../../components/Notification/Success';\r\n\r\nimport modalConfig from '../../../utils/modal.config';\r\n\r\n\r\n\r\nconst propTypes = {\r\n    form: formShape.isRequired,\r\n    intl: PropTypes.shape({}).isRequired,\r\n    createCustomField: PropTypes.func.isRequired,\r\n    visible: PropTypes.bool.isRequired,\r\n    close: PropTypes.func.isRequired,\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\n\r\nconst styles = {\r\n    buttonSubmit: css`\r\n    background: #49a32b !important;\r\n    color: #fff !important;\r\n    margin-bottom: 10px;\r\n  `\r\n};\r\nconst CreateCustomField = ({ form, intl, createCustomField, visible, close, getCustomFields, getProjects, global }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { list, loading } = useSelector(\r\n        (state) => state.projects\r\n    );\r\n\r\n    const { valueTypes } = useSelector(\r\n        (state) => state.setting\r\n    );\r\n    useEffect(() => {\r\n        // get value type\r\n        dispatch(\r\n            settingActions.getValueTypes({\r\n                path: 'data/valueType'\r\n            })\r\n        );\r\n        console.log('valueTypes', valueTypes);\r\n        \r\n    }, [dispatch]);\r\n\r\n    const [defaultValue, setDefaultValue] = useState({})\r\n\r\n    const { createCustomFieldResult, createCustomFieldError, createCustomFieldErrors } = useSelector(\r\n        (state) => state.setting\r\n    )\r\n\r\n    // Get all projects after open modal\r\n    useEffect(() => {\r\n        getProjects && getProjects();\r\n        dispatch(settingActions.createCustomFieldCleanData());\r\n        dispatch(settingActions.createCustomFieldCleanError());\r\n    }, [getProjects, dispatch]);\r\n\r\n    const handleSubmit = () => {\r\n        form.validateFields((err, values) => {\r\n            if (!err && defaultValue.status === \"success\") {\r\n                // call api when valid data\r\n                global ? values.is_global = true : values.is_global = false\r\n                createCustomField && createCustomField(values);\r\n                // form.resetFields();\r\n                setTimeout(() => {\r\n                    window.location.reload()\r\n                }, 0)\r\n            } else {\r\n                // showing error form input notification\r\n                const title = intl.formatMessage({ id: 'notification.error' });\r\n                const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n                ErrorNotification(title, message);\r\n            }\r\n        });\r\n    };\r\n\r\n    //handle change value type\r\n    const handleChange = (e) => {\r\n        setDefaultValue({ status: \"success\", help: \"\", type: e });\r\n        form.setFieldsValue({ ...form.getFieldsValue(), defaultValue: '' })\r\n    }\r\n\r\n    // Handle showing notification after add new customfield\r\n    useEffect(() => {\r\n        // show success notification\r\n        if (createCustomFieldResult) {\r\n            const title = intl.formatMessage({ id: 'notification.success' });\r\n            const message = intl.formatMessage({ id: 'createCustomFieldResult.message' });\r\n            SuccessNotification(title, message);\r\n            // close the modal and clean data\r\n            close();\r\n            // re-call get all customfields api\r\n            getCustomFields && getCustomFields();\r\n        }\r\n    }, [close, intl, createCustomFieldResult, getCustomFields]);\r\n\r\n    useEffect(() => {\r\n        // show error notification\r\n        if (createCustomFieldError) {\r\n            const title = intl.formatMessage({ id: 'notification.error' });\r\n            const message = intl.formatMessage({\r\n                id: 'setting.createCustomField.message.error'\r\n            });\r\n            ErrorNotification(title, message);\r\n            // clean error\r\n            dispatch(settingActions.createCustomFieldCleanError(false));\r\n        }\r\n    }, [dispatch, intl, createCustomFieldError, createCustomFieldErrors]);\r\n\r\n    //regex default value \r\n    const regex = (value) => {\r\n        let re;\r\n        switch (defaultValue.type) {\r\n            case \"Url\":\r\n                re = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_.~#?&//=]*)/g\r\n                return (value.match(re) !== null)\r\n            case \"Number\":\r\n                re = /^[0-9]*$/\r\n                return (value.match(re) !== null)\r\n            default: return true\r\n        }\r\n    }\r\n\r\n    const handleChangeInput = (e) => {\r\n        if (!e.target.value) { setDefaultValue({ ...defaultValue, status: \"error\", help: <FormattedMessage id=\"setting.label.defaultValue.validate\" /> }) }\r\n        else if (!regex(e.target.value)) {\r\n            setDefaultValue({ ...defaultValue, status: \"error\", help: intl.formatMessage({ id: `setting.label.defaultValue.${defaultValue.type}` }) });\r\n        }\r\n        else {\r\n            setDefaultValue({ ...defaultValue, status: \"success\", help: \"\" })\r\n        }\r\n    }\r\n\r\n    const formItemLayout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 14 },\r\n    };\r\n    return (\r\n        <Modal\r\n            title={<FormattedMessage id={global ? \"setting.createGlobalCustomField.title\" : \"setting.createCustomField.title\"} />}\r\n            cancelText=\"Close\"\r\n            visible={visible}\r\n            width={550}\r\n            className={styles.modal}\r\n            onCancel={() => close()}\r\n            footer={[\r\n                <Row type=\"flex\" key=\"abc\" justify=\"end\">\r\n                    <Popconfirm\r\n                        title={<FormattedMessage id=\"setting.createCustomField.confirm\" />}\r\n                        onConfirm={() => handleSubmit()}\r\n                        okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n                        cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n                        <Button className={styles.buttonSubmit} loading={loading}>\r\n                            <FormattedMessage id=\"button.add\" />\r\n                        </Button>\r\n                    </Popconfirm>\r\n                    <Button\r\n                        icon=\"close-circle\"\r\n                        type=\"default\"\r\n                        key=\"close\"\r\n                        onClick={() => close()}\r\n                        disabled={loading}>\r\n                        <FormattedMessage id=\"button.close\" />\r\n                    </Button>\r\n                </Row>\r\n            ]}\r\n            {...modalConfig}>\r\n            <Form {...formItemLayout} onSubmit={handleSubmit}>\r\n                <Row style={{ marginBottom: 10 }}>\r\n                    <Icon type=\"project\" style={{ marginRight: 10 }} />\r\n                    <Typography.Text style={{ fontWeight: 'bold' }}>\r\n                        {<FormattedMessage id=\"setting.header.customfield\" />}\r\n                    </Typography.Text>\r\n                </Row>\r\n                <Form.Item\r\n                    style={{ display: 'flex' }}\r\n                    label={<FormattedMessage id=\"setting.label.fieldName\" />}\r\n                    validateStatus={form.getFieldError('name') ? 'error' : 'validating'}>\r\n                    {form.getFieldDecorator('name', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: <FormattedMessage id=\"setting.label.fieldName.validate\" />\r\n                            }\r\n                        ]\r\n                    })(<Input placeholder={intl.formatMessage({ id: \"setting.placeholder.fieldName\" })}\r\n                    />)}\r\n                </Form.Item>\r\n                <Form.Item label={<FormattedMessage id=\"setting.label.fieldProjects\" />}>\r\n                    {form.getFieldDecorator('assignee', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: intl.formatMessage({ id: \"setting.label.fieldprojects.validate\" }),\r\n                                type: 'array'\r\n                            },\r\n                        ],\r\n                        initialValue: global ? list.map(e => e.id) : undefined\r\n                    })(\r\n                        <Select\r\n                            mode=\"multiple\"\r\n                            placeholder={<FormattedMessage id=\"setting.placeholder.fieldProjects\" />}\r\n                            notFoundContent={loading && <Spin size=\"small\" />}\r\n                            //add all projects    \r\n                            onSelect={value => {\r\n                                if (value === 0) {\r\n                                    form.setFieldsValue({ ...form.getFieldsValue(), assignee: list.map(e => e.id) })\r\n                                }\r\n                            }}\r\n                            disabled={global}>\r\n                            <Select.Option title=\"setting.allProject\" value={0}>{<FormattedMessage id=\"setting.allProject\" />}</Select.Option>\r\n                            {(list || []).map((e) => {\r\n                                return (\r\n                                    <Select.Option key={e.id} value={e.id}>\r\n                                        {e.name}\r\n                                    </Select.Option>\r\n                                );\r\n                            })}\r\n                        </Select>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    style={{ display: 'flex' }}\r\n                    label={<FormattedMessage id=\"setting.label.valueType\" />}\r\n                    validateStatus={form.getFieldError('valueType') ? 'error' : 'validating'}>\r\n                    {form.getFieldDecorator('valueType', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: <FormattedMessage id=\"setting.label.valueType.validate\" />\r\n                            }\r\n                        ]\r\n                    })(<Select onChange={handleChange} placeholder={<FormattedMessage id=\"setting.placeholder.valueType\" />}>\r\n                        {valueTypes && valueTypes.map(e => <Select.Option style={{ textTransform: 'capitalize' }} key={e.id} value={e.value}>{e.value}</Select.Option>)}\r\n                    </Select>)}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    style={{ display: 'flex' }}\r\n                    label={<FormattedMessage id=\"setting.label.defaultValue\" />}\r\n                    validateStatus={defaultValue.status}\r\n                    help={defaultValue.help}\r\n                >{form.getFieldDecorator('defaultValue', {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: <FormattedMessage id=\"setting.label.defaultValue.validate\" />\r\n                        }\r\n                    ]\r\n                })(defaultValue.type === \"Text Area\" ?\r\n                    <Input.TextArea onChange={handleChangeInput} placeholder={intl.formatMessage({ id: \"setting.placeholder.defaultValue\" })} />\r\n                    : <Input onChange={handleChangeInput} placeholder={intl.formatMessage({ id: \"setting.placeholder.defaultValue\" })} />)}\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\r\n                    {form.getFieldDecorator('require', {\r\n                        valuePropName: 'checked',\r\n                        initialValue: false,\r\n                    })(<Checkbox>{<FormattedMessage id=\"setting.label.fieldOptions\" />}</Checkbox>)}\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n}\r\nconst FormCreateCustomfield = Form.create({ name: 'dynamic_form_item' })(CreateCustomField);\r\n\r\nFormCreateCustomfield.propTypes = propTypes;\r\n\r\nFormCreateCustomfield.defaultProps = defaultProps;\r\n\r\nexport default FormCreateCustomfield;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { css } from 'emotion';\r\nimport { formShape } from 'rc-form';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { actions as settingActions } from '../store';\r\n\r\nimport {\r\n    Drawer,\r\n    Form,\r\n    Icon,\r\n    Row,\r\n    Select,\r\n    Typography,\r\n    Button,\r\n    Popconfirm,\r\n    Input,\r\n    Spin,\r\n    Checkbox\r\n} from 'antd';\r\n\r\nimport ErrorNotification from '../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../components/Notification/Success';\r\n\r\nconst propTypes = {\r\n    intl: PropTypes.shape({}).isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n    visible: PropTypes.bool.isRequired,\r\n    form: formShape.isRequired,\r\n\r\n    updateCustomField: PropTypes.func.isRequired,\r\n    removeAssigneeProject: PropTypes.func.isRequired,\r\n    createAssigneeProject: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst styles = {\r\n    drawerFooter: css`\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 24px;\r\n    left: 24px;\r\n    padding: 24px 0px;\r\n  `\r\n};\r\n\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 8\r\n    },\r\n    wrapperCol: {\r\n        span: 16\r\n    }\r\n};\r\n\r\nconst UpdateCustomFieldDrawer = ({\r\n    intl,\r\n    onClose,\r\n    visible,\r\n    form,\r\n    customfield,\r\n    getCustomFields,\r\n    updateCustomField,\r\n    removeAssigneeProject,\r\n    createAssigneeProject,\r\n    getProjects\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        updateCustomFieldResult,\r\n        updateCustomFieldError,\r\n        updateCustomFieldErrors,\r\n        loading, removeAssigneeProjectResult,\r\n        removeAssigneeProjectError,\r\n        removeAssigneeProjectErrors,\r\n        createAssigneeProjectResult,\r\n        createAssigneeProjectError,\r\n        createAssigneeProjectErrors } = useSelector(\r\n            (state) => state.setting\r\n        );\r\n    const { list } = useSelector(\r\n        (state) => state.projects\r\n    );\r\n    const [arrRemove, setArrRemove] = useState([]);\r\n    const [arrCreate, setArrCreate] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getProjects && getProjects();\r\n        return () => {\r\n            dispatch(settingActions.updateCustomFieldCleanError());\r\n            dispatch(settingActions.updateCustomFieldCleanData(false));\r\n        };\r\n    }, [dispatch, getProjects]);\r\n\r\n    // Handle showing notification after update project\r\n    useEffect(() => {\r\n        // show success notification\r\n        if (updateCustomFieldResult) {\r\n            const title = intl.formatMessage({ id: 'notification.success' });\r\n            const message = intl.formatMessage({ id: 'updateCustomFieldResult.message' });\r\n            SuccessNotification(title, message);\r\n            // close the modal and clean state\r\n            onClose();\r\n            // re-call get project detail api\r\n            getCustomFields && getCustomFields();\r\n        }\r\n    }, [onClose, intl, updateCustomFieldResult, getCustomFields]);\r\n\r\n    useEffect(() => {\r\n        // show error notification\r\n        if (updateCustomFieldError) {\r\n            const title = intl.formatMessage({ id: 'notification.error' });\r\n            const message = intl.formatMessage({\r\n                id: updateCustomFieldErrors.message\r\n                    ? updateCustomFieldErrors.message\r\n                    : 'projects.updateMemberInProject.message.error'\r\n            });\r\n            ErrorNotification(title, message);\r\n            // clean state\r\n            dispatch(settingActions.updateCustomFieldCleanError(false));\r\n        }\r\n    }, [dispatch, intl, updateCustomFieldError, updateCustomFieldErrors]);\r\n\r\n\r\n\r\n    // Handle showing notification after update AssigneeProject\r\n    useEffect(() => {\r\n        // show success notification\r\n        if (removeAssigneeProjectResult) {\r\n            const title = intl.formatMessage({ id: 'notification.success' });\r\n            const message = intl.formatMessage({ id: 'updateCustomFieldResult.message' });\r\n            SuccessNotification(title, message);\r\n            // close the modal and clean state\r\n            onClose();\r\n            // re-call get project detail api\r\n            getCustomFields && getCustomFields();\r\n        }\r\n    }, [onClose, intl, removeAssigneeProjectResult, getCustomFields]);\r\n\r\n    useEffect(() => {\r\n        // show error notification\r\n        if (removeAssigneeProjectError) {\r\n            const title = intl.formatMessage({ id: 'notification.error' });\r\n            const message = intl.formatMessage({\r\n                id: removeAssigneeProjectErrors.message\r\n                    ? removeAssigneeProjectErrors.message\r\n                    : 'projects.updateMemberInProject.message.error'\r\n            });\r\n            ErrorNotification(title, message);\r\n            // clean state\r\n            dispatch(settingActions.removeAssigneeProjectCleanError(false));\r\n        }\r\n    }, [dispatch, intl, removeAssigneeProjectError, removeAssigneeProjectErrors]);\r\n\r\n\r\n    // Handle showing notification after createAssigneeProject\r\n    useEffect(() => {\r\n        // show success notification\r\n        if (createAssigneeProjectResult) {\r\n            const title = intl.formatMessage({ id: 'notification.success' });\r\n            const message = intl.formatMessage({ id: 'updateCustomFieldResult.message' });\r\n            SuccessNotification(title, message);\r\n            // close the modal and clean state\r\n            onClose();\r\n            // re-call get project detail api\r\n            getCustomFields && getCustomFields();\r\n        }\r\n    }, [onClose, intl, createAssigneeProjectResult, getCustomFields]);\r\n\r\n    useEffect(() => {\r\n        // show error notification\r\n        if (createAssigneeProjectError) {\r\n            const title = intl.formatMessage({ id: 'notification.error' });\r\n            const message = intl.formatMessage({\r\n                id: createAssigneeProjectErrors.message\r\n                    ? createAssigneeProjectErrors.message\r\n                    : 'projects.updateMemberInProject.message.error'\r\n            });\r\n            ErrorNotification(title, message);\r\n            // clean state\r\n            dispatch(settingActions.createAssigneeProjectCleanError(false));\r\n        }\r\n    }, [dispatch, intl, createAssigneeProjectError, createAssigneeProjectErrors]);\r\n\r\n\r\n    const handleSubmit = () => {\r\n        form.validateFields(async (err, values) => {\r\n            if (!err) {\r\n                const body = {\r\n                    id: customfield.id,\r\n                    name: values.name,\r\n                    assignee: values.assignee,\r\n                    require: values.require\r\n                };\r\n                const oldBody = {\r\n                    id: customfield.id,\r\n                    name: customfield.name,\r\n                    assignee: customfield.infocustomField.map(e => { return (e.project.id) }),\r\n                    require: customfield.require\r\n                };\r\n                // check if value is not change\r\n                if (JSON.stringify(body) === JSON.stringify(oldBody)) {\r\n                    const title = intl.formatMessage({ id: 'notification.error' });\r\n                    const message = intl.formatMessage({ id: 'notification.message.form.noChanging' });\r\n                    return ErrorNotification(title, message);\r\n                } else {\r\n                    const bodyCreateAssignee = {\r\n                        idCustomField: customfield.id,\r\n                        projects: arrCreate\r\n                    }\r\n                    const bodyRemoveAssignee = {\r\n                        idCustomField: customfield.id,\r\n                        projects: arrRemove\r\n                    }\r\n                    removeAssigneeProject && removeAssigneeProject(bodyRemoveAssignee);\r\n                    createAssigneeProject && createAssigneeProject(bodyCreateAssignee);\r\n                    updateCustomField(body);\r\n                    setTimeout(() => {\r\n                        window.location.reload()\r\n                    }, 0)\r\n\r\n                }\r\n\r\n\r\n            } else {\r\n                // showing error form input notification\r\n                const title = intl.formatMessage({ id: 'notification.error' });\r\n                const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n                ErrorNotification(title, message);\r\n            }\r\n            return null;\r\n        });\r\n    };\r\n    return (\r\n        <Drawer\r\n            title={<FormattedMessage id=\"setting.project.drawerUpdate.tile\" />}\r\n            placement=\"right\"\r\n            onClose={onClose}\r\n            visible={visible}\r\n            maskClosable={false}\r\n            width={500}>\r\n            <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n                <Row style={{ marginBottom: 10 }}>\r\n                    <Icon type=\"project\" style={{ marginRight: 10 }} />\r\n                    <Typography.Text style={{ fontWeight: 'bold' }}>\r\n                        {<FormattedMessage id=\"setting.header.customfield\" />}\r\n                    </Typography.Text>\r\n                </Row>\r\n                <Form.Item\r\n                    style={{ display: 'flex' }}\r\n                    label={<FormattedMessage id=\"setting.label.fieldName\" />}\r\n                    validateStatus={form.getFieldError('name') ? 'error' : 'validating'}>\r\n                    {form.getFieldDecorator('name', {\r\n                        initialValue: customfield.name,\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: <FormattedMessage id=\"setting.label.fieldName.validate\" />\r\n                            }\r\n                        ]\r\n                    })(<Input placeholder={intl.formatMessage({ id: \"setting.placeholder.fieldName\" })}\r\n                    />)}\r\n                </Form.Item>\r\n                <Form.Item label={<FormattedMessage id=\"setting.label.fieldProjects\" />}>\r\n                    {form.getFieldDecorator('assignee', {\r\n                        initialValue: customfield.infocustomField.map(e => { return (e.project.id) }),\r\n                        rules: [\r\n                            {\r\n                                required: false,\r\n                                message: intl.formatMessage({ id: \"setting.label.fieldprojects.validate\" }),\r\n                                type: 'array'\r\n                            },\r\n                        ],\r\n                    })(\r\n                        <Select mode=\"multiple\"\r\n                            onDeselect={value => {\r\n                                if (arrCreate.includes(value)) {\r\n                                    setArrCreate(arrCreate.filter(created => created !== value\r\n                                    ))\r\n                                } else {\r\n                                    setArrRemove([...arrRemove, value])\r\n                                }\r\n                            }\r\n                            }\r\n                            onSelect={value => {\r\n                                //event when onselect option \"All\"\r\n                                if (value === 0) {\r\n                                    let listProject = customfield.infocustomField.map(e => { return (e.project.id) });\r\n                                    form.setFieldsValue({ ...form.getFieldsValue(), assignee: list.map(e => e.id) });\r\n                                    setArrRemove([]);\r\n                                    setArrCreate(\r\n                                        // add all except selected projects\r\n                                        list.reduce((accumulator, currentValue) => {\r\n                                            if (!listProject.includes(currentValue.id)) {\r\n                                                return [...accumulator, currentValue.id]\r\n                                            }\r\n                                            return accumulator\r\n                                        }, [])\r\n                                    )\r\n                                }\r\n                                else {\r\n                                    if (arrRemove.includes(value)) {\r\n                                        setArrRemove(arrRemove.filter(removed => removed !== value))\r\n                                    } else {\r\n                                        setArrCreate([...arrCreate, value])\r\n                                    }\r\n                                }\r\n                            }\r\n                            }\r\n                            placeholder={<FormattedMessage id=\"setting.placeholder.fieldProjects\" />} notFoundContent={loading && <Spin size=\"small\" />}>\r\n                            {/* add option All */}\r\n                            <Select.Option title=\"setting.allProject\" value={0}>{<FormattedMessage id=\"setting.allProject\" />}</Select.Option>\r\n                            {(list || []).map(e => {\r\n                                return (\r\n                                    <Select.Option key={e.id} value={e.id}>\r\n                                        {e.name}\r\n                                    </Select.Option>\r\n                                );\r\n                            })}\r\n                        </Select>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\r\n                    {form.getFieldDecorator('require', {\r\n                        valuePropName: 'checked',\r\n                        initialValue: customfield.require,\r\n                    })(<Checkbox>{<FormattedMessage id=\"setting.label.fieldOptions\" />}</Checkbox>)}\r\n                </Form.Item>\r\n                <Row className={styles.drawerFooter}>\r\n                    <Popconfirm\r\n                        title={<FormattedMessage id=\"setting.updateCustomField.confirm\" />}\r\n                        onConfirm={() => handleSubmit()}\r\n                        okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n                        cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n                        <Button icon=\"edit\" type=\"primary\" loading={loading}>\r\n                            {<FormattedMessage id=\"button.update\" />}\r\n                        </Button>\r\n                    </Popconfirm>\r\n                    <Button\r\n                        style={{ marginLeft: 15 }}\r\n                        icon=\"close-circle\"\r\n                        type=\"default\"\r\n                        key=\"close\"\r\n                        onClick={onClose}>\r\n                        {<FormattedMessage id=\"button.close\" />}\r\n                    </Button>\r\n                </Row>\r\n            </Form>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nUpdateCustomFieldDrawer.propTypes = propTypes;\r\n\r\nUpdateCustomFieldDrawer.defaultProps = defaultProps;\r\n\r\nconst UpdateCustomFieldForm = Form.create({ name: 'updateCustomField' })(UpdateCustomFieldDrawer);\r\n\r\nexport default injectIntl(UpdateCustomFieldForm, {});\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Table, Tooltip, Popconfirm, Button, Tag } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nimport { actions as settingActions } from '../store';\r\nimport SuccessNotification from '../../../components/Notification/Success';\r\nimport ErrorNotification from '../../../components/Notification/Error';\r\nimport WithRole from '../../../hocs/WithRole';\r\nimport UpdateCustomFieldDrawer from '../updateCustomField/UpdateCustomFieldDrawer';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n\r\n  updateCustomField: PropTypes.func.isRequired,\r\n  removeCustomField: PropTypes.func.isRequired,\r\n  getCustomFields: PropTypes.func.isRequired,\r\n  removeAssigneeProject: PropTypes.func.isRequired,\r\n  createAssigneeProject: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nconst defaultProps = {};\r\nconst ButtonEditCustomField = ({ handleEditSelected, record }) => {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        handleEditSelected(record);\r\n      }}\r\n      shape=\"circle\"\r\n      icon=\"edit\"\r\n      type=\"primary\"\r\n      style={{ margin: '0px 5px' }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ButtonDeleteCustomField = ({ removeCustomField, record }) => {\r\n  return (\r\n    <Popconfirm\r\n      title={<FormattedMessage id=\"setting.deleteCustomField.confirm\" />}\r\n      onConfirm={() => removeCustomField && removeCustomField(record)}\r\n      okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n      cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n      <Button shape=\"circle\" icon=\"delete\" type=\"danger\" style={{ margin: '0px 5px' }} />\r\n    </Popconfirm>\r\n  );\r\n};\r\nconst TableCustomFields = ({ intl,\r\n  customfields,\r\n  updateCustomField,\r\n  removeCustomField,\r\n  getCustomFields,\r\n  removeAssigneeProject,\r\n  createAssigneeProject,\r\n  getProjects\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const [dataItem, setDataItem] = useState({});\r\n  const { loading, removeCustomFieldError, removeCustomFieldErrors, removeCustomFieldResult } = useSelector(\r\n    (state) => state.setting\r\n  );\r\n\r\n  const handleEditSelected = (data) => {\r\n    data && setDataItem(data);\r\n    setDrawerVisible(!drawerVisible);\r\n  };\r\n  const columns = [\r\n    {\r\n      title: <FormattedMessage id=\"setting.label.fieldName\" />,\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"setting.label.fieldProjects\" />,\r\n      dataIndex: 'infocustomField',\r\n      key: 'infocustomField',\r\n      render: (infocustomField) => {\r\n        return (\r\n          <span>\r\n            {infocustomField.map(i => (\r\n              <Tag color=\"green\" key={i.project.id}>\r\n                {i.project.name}\r\n              </Tag>\r\n            ))}\r\n          </span>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      title: '',\r\n      dataIndex: '',\r\n      key: 'x',\r\n      align: 'right',\r\n      render: (record) => (\r\n        <React.Fragment>\r\n          <Tooltip\r\n            placement=\"top\"\r\n            title={<FormattedMessage id=\"members.memberTable.buttonDelete.title\" />}>\r\n            <WithRole\r\n              type={['admin']}\r\n              component={ButtonDeleteCustomField}\r\n              removeCustomField={removeCustomField}\r\n              record={record}\r\n            />\r\n          </Tooltip>\r\n          <Tooltip\r\n            placement=\"top\"\r\n            title={<FormattedMessage id=\"members.memberTable.buttonEdit.title\" />}>\r\n            <WithRole\r\n              type={['admin']}\r\n              component={ButtonEditCustomField}\r\n              handleEditSelected={handleEditSelected}\r\n              record={record}\r\n            />\r\n          </Tooltip>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (removeCustomFieldResult) {\r\n      // show success notification\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: 'removeCustomFieldResult.message' });\r\n      SuccessNotification(title, message);\r\n      // clean data\r\n      dispatch(settingActions.removeCustomFieldCleanData());\r\n      // re-call get Members list\r\n      getCustomFields && getCustomFields();\r\n    }\r\n  }, [removeCustomFieldResult, intl, getCustomFields, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (removeCustomFieldError) {\r\n      // show error notification\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: removeCustomFieldErrors.message\r\n          ? removeCustomFieldErrors.message\r\n          : 'members.removeCustomField.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(settingActions.removeCustomFieldCleanError(false));\r\n    }\r\n  }, [intl, removeCustomFieldError, removeCustomFieldErrors, dispatch]);\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Table\r\n        columns={columns}\r\n        rowKey={(record, index) => index}\r\n        dataSource={customfields}\r\n        loading={loading}\r\n      />\r\n      {drawerVisible && (\r\n        <UpdateCustomFieldDrawer\r\n          visible={drawerVisible}\r\n          updateCustomField={updateCustomField}\r\n          onClose={() => handleEditSelected()}\r\n          customfield={dataItem}\r\n          removeAssigneeProject={removeAssigneeProject}\r\n          createAssigneeProject={createAssigneeProject}\r\n          getCustomFields={getCustomFields}\r\n          getProjects={getProjects}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nTableCustomFields.propTypes = propTypes;\r\nTableCustomFields.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(TableCustomFields, {});\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Table, Tooltip, Popconfirm, Button, Form, Input, Select, Row } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport WithRole from '../../../hocs/WithRole';\r\nimport '../../../assets/styles/firstSettingGlobalCustomField/main.scss';\r\nimport { actions as settingActions } from '../store';\r\nimport ErrorNotification from '../../../components/Notification/Error';\r\n\r\nconst propTypes = {\r\n    intl: PropTypes.shape({}).isRequired,\r\n    createCustomField: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst ButtonDeleteCustomField = ({ record, handleDelete }) => {\r\n    return (\r\n        <Popconfirm\r\n            title={<FormattedMessage id=\"setting.deleteCustomField.confirm\" />}\r\n            onConfirm={() => handleDelete(record)}\r\n            okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n            cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n            <Button shape=\"circle\" icon=\"delete\" type=\"danger\" style={{ margin: '0px 5px' }} />\r\n        </Popconfirm>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    validateCell,\r\n    ...restProps\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        // get value type/baseCustomField\r\n        dispatch(\r\n            settingActions.getValueTypes({\r\n                path: 'data/valueType'\r\n            })\r\n        );\r\n        dispatch(\r\n            settingActions.getBaseCustomFields({\r\n                path: 'data/baseCustomField'\r\n            })\r\n        );\r\n    }, [dispatch]);\r\n    const { valueTypes } = useSelector(\r\n        (state) => state.setting\r\n    );\r\n    const [validate, setValidate] = useState([\r\n        {\r\n            status: \"\",\r\n            help: \"\"\r\n        }\r\n    ]);\r\n\r\n    const handleChangeSelect = (e) => {\r\n        record[dataIndex] = e;\r\n        save()\r\n    }\r\n    //handle change input\r\n    const handleChange = (e) => {\r\n        if (!e.target.value) {\r\n            setValidate({\r\n                ...validate, status: \"error\", help: <FormattedMessage id={`setting.label.${dataIndex}.validate`} />\r\n            })\r\n            validateCell(record, dataIndex, true)\r\n        }\r\n        else {\r\n            setValidate({ ...validate, status: \"success\", help: \"\" });\r\n            validateCell(record, dataIndex, false)\r\n        }\r\n        record[dataIndex] = e.target.value\r\n    }\r\n\r\n    const save = e => {\r\n        handleSave({ ...record });\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0\r\n                }}\r\n                validateStatus={validate.status}\r\n                help={validate.help}\r\n            >\r\n                {dataIndex === \"valueType\"\r\n                    ? <Select style={{ width: \"100%\" }}\r\n                        onChange={handleChangeSelect}\r\n                        placeholder={<FormattedMessage id=\"setting.placeholder.valueType\" />}\r\n                        defaultValue={record[dataIndex]}\r\n                    >\r\n                        {valueTypes && valueTypes.map(e =>\r\n                            <Select.Option style={{ textTransform: 'capitalize' }} key={e.id} value={e.value}>{e.value}</Select.Option>)}\r\n                    </Select>\r\n                    : <Input onChange={handleChange} defaultValue={record[dataIndex]} onPressEnter={save} onBlur={save} />}\r\n            </Form.Item>\r\n        )\r\n    }\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\n\r\nconst FirstSettingCustomField = ({ intl, createCustomField, getProjects }) => {\r\n    const dispatch = useDispatch();\r\n    const { baseCustomFields } = useSelector(\r\n        (state) => state.setting\r\n    );\r\n    const [globalCustomFields, setGlobalCustomFields] = useState([]);\r\n    const { list } = useSelector(\r\n        (state) => state.projects\r\n    );\r\n    const [dataSource, setDataSource] = useState([]);\r\n    const [count, setCount] = useState(1)\r\n    const [validateError, setValidateError] = useState([])\r\n\r\n    useEffect(() => {\r\n        // get value type/baseCustomField\r\n        dispatch(\r\n            settingActions.getBaseCustomFields({\r\n                path: 'data/baseCustomField'\r\n            })\r\n        );\r\n        console.log('baseCustomFields', baseCustomFields);\r\n        \r\n    }, [dispatch]);\r\n\r\n    // Get all projects after open modal\r\n    useEffect(() => {\r\n        getProjects && getProjects();\r\n    }, [getProjects, dispatch]);\r\n    const handleAdd = () => {\r\n        setDataSource([...dataSource, {\r\n            key: count,\r\n            fieldName: \"fieldName\",\r\n            valueType: \"Text\",\r\n            defaultValue: \"https://google.com\"\r\n        }])\r\n        setCount(count + 1)\r\n        setValidateError([...validateError, { key: count, fieldName: false, valueType: false, defaultValue: false, error: false }])\r\n    }\r\n\r\n    const handleSave = row => {\r\n        const newData = dataSource;\r\n        const index = newData.findIndex(item => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setDataSource([...newData]);\r\n    };\r\n    const handleChangeCustomField = (e) => {\r\n        let listCustomField = baseCustomFields.filter(obj => e.includes(obj.id))\r\n        setGlobalCustomFields(listCustomField)\r\n    }\r\n    const handleSubmit = () => {\r\n\r\n        if (validateError.filter(obj => obj.error === true).length > 0) {\r\n            // showing error form input notification\r\n            const title = intl.formatMessage({ id: 'notification.error' });\r\n            const message = intl.formatMessage({ id: 'notification.message.form.error' });\r\n            ErrorNotification(title, message);\r\n\r\n        }\r\n        else {\r\n            let global = [...globalCustomFields];\r\n            let projects = list.map(obj => obj.id)\r\n            dataSource.map(obj => {\r\n                global.push({\r\n                    id: globalCustomFields.length + obj.key * 1,\r\n                    name: obj.fieldName,\r\n                    require: true,\r\n                    default_value: obj.defaultValue,\r\n                    value_type: obj.valueType\r\n                })\r\n                return undefined\r\n            })\r\n            global.map(obj => {\r\n                createCustomField && createCustomField({\r\n                    name: obj.name,\r\n                    assignee: projects,\r\n                    valueType: obj.value_type,\r\n                    defaultValue: obj.default_value,\r\n                    require: obj.require,\r\n                    is_global: true\r\n                });\r\n\r\n            })\r\n            window.location.reload()\r\n        }\r\n    }\r\n    const handleDelete = (record) => {\r\n        setDataSource(dataSource.filter(item => item.key !== record.key))\r\n        setValidateError(validateError.filter(obj => obj.key !== record.key))\r\n    }\r\n    //validate on cell\r\n    const validateCell = (record, fieldName, boolean) => {\r\n        for (let i = 0; i < validateError.length; i++) {\r\n            if (validateError[i].key === record.key) {\r\n                let cloneValidateCell = [...validateError];\r\n                if (boolean) {\r\n                    cloneValidateCell[i][`${fieldName}`] = true\r\n                } else cloneValidateCell[i][`${fieldName}`] = false\r\n                if (Object.values(cloneValidateCell[i]).slice(1, 4).includes(true)) cloneValidateCell[i].error = true\r\n                else cloneValidateCell[i].error = false;\r\n                setValidateError([...cloneValidateCell])\r\n            }\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: <FormattedMessage id=\"setting.label.fieldName\" />,\r\n            dataIndex: 'fieldName',\r\n            key: 'fieldName',\r\n            editable: true,\r\n            width: '300px',\r\n            onCell: record => ({\r\n                record,\r\n                title: <FormattedMessage id=\"setting.label.fieldName\" />,\r\n                dataIndex: 'fieldName',\r\n                editable: true,\r\n                handleSave: handleSave,\r\n                validateCell: validateCell\r\n            })\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"setting.label.valueType\" />,\r\n            dataIndex: 'valueType',\r\n            key: 'valueType',\r\n            editable: true,\r\n            width: '240px',\r\n            onCell: record => ({\r\n                record,\r\n                title: <FormattedMessage id=\"setting.label.valueType\" />,\r\n                dataIndex: 'valueType',\r\n                editable: true,\r\n                handleSave: handleSave,\r\n                validateCell: validateCell\r\n            })\r\n        },\r\n        {\r\n            title: <FormattedMessage id=\"setting.label.defaultValue\" />,\r\n            dataIndex: 'defaultValue',\r\n            key: 'defaultValue',\r\n            editable: true,\r\n            onCell: record => ({\r\n                record,\r\n                title: <FormattedMessage id=\"setting.label.defaultValue\" />,\r\n                dataIndex: 'defaultValue',\r\n                editable: true,\r\n                handleSave: handleSave,\r\n                validateCell: validateCell\r\n            })\r\n        },\r\n        {\r\n            title: '',\r\n            dataIndex: '',\r\n            key: 'x',\r\n            align: 'right',\r\n            width: '180px',\r\n            render: (record) => (\r\n                <React.Fragment>\r\n                    <Tooltip\r\n                        placement=\"top\"\r\n                        title={<FormattedMessage id=\"members.memberTable.buttonDelete.title\" />}>\r\n                        <WithRole\r\n                            type={['admin']}\r\n                            component={ButtonDeleteCustomField}\r\n                            record={record}\r\n                            handleDelete={handleDelete}\r\n                        />\r\n                    </Tooltip>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    ];\r\n    return (\r\n        <React.Fragment>\r\n            <Row justify=\"space-between\" align=\"middle\">\r\n                <Button\r\n                    onClick={handleAdd}\r\n                    icon=\"plus\"\r\n                    type=\"primary\"\r\n                    style={{\r\n                        marginBottom: 16,\r\n                    }}\r\n                >\r\n                    {<FormattedMessage id=\"button.add\" />}\r\n                </Button>\r\n                <Select\r\n                    mode=\"multiple\"\r\n                    style={{ width: \"500px\", float: \"right\" }}\r\n                    onChange={handleChangeCustomField}\r\n                    placeholder={<FormattedMessage id=\"setting.placeholder.baseCustomFields\" />}\r\n                >\r\n                    {baseCustomFields && baseCustomFields.map(e =>\r\n                        <Select.Option style={{ textTransform: 'capitalize' }} key={e.id} value={e.id}>{e.name}</Select.Option>)}\r\n                </Select>\r\n            </Row>\r\n            <Table\r\n                columns={columns}\r\n                rowClassName={() => \"editable-row\"}\r\n                components={{ body: { cell: EditableCell } }}\r\n                dataSource={dataSource}\r\n                pagination={false}\r\n            />\r\n            <Row style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <Button type=\"primary\" style={{ marginTop: \"30px\" }} onClick={handleSubmit}>\r\n                    {<FormattedMessage id=\"setting.button.addCustomFields\" />}\r\n                </Button>\r\n            </Row>\r\n        </React.Fragment>\r\n    )\r\n\r\n\r\n}\r\nFirstSettingCustomField.propTypes = propTypes;\r\nFirstSettingCustomField.defaultProps = defaultProps;\r\nexport default injectIntl(FirstSettingCustomField, {});","import React, { useEffect, useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actions } from '../modules/layout/store';\r\nimport { actions as projectActions } from '../modules/project/store';\r\nimport { actions as settingActions } from '../modules/setting/store';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Form, Row, Button, Col, Input, Tabs } from 'antd';\r\nimport { css } from 'emotion';\r\n\r\nimport searchColumn from '../utils/searchColumn';\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport FormCreateCustomField from '../modules/setting/createCustomField/CreateCustomField';\r\nimport TableCustomFields from '../modules/setting/tableCustomFields/TableCustomFields';\r\nimport WithRole from '../hocs/WithRole';\r\nimport ErrorNotification from '../components/Notification/Error';\r\nimport FirstSettingCustomField from '../modules/setting/firstSettingCustomField/firstSettingCustomField';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst styles = {\r\n  addCustomFieldButton: css`\r\n    background: #49a32b !important;\r\n    color: #fff !important;\r\n    margin-bottom: 10px;\r\n  `,\r\n  addGlobalCustomFieldButton: css`\r\n    background: #1890ff !important;\r\n    color: #fff !important;\r\n    margin-bottom: 10px;\r\n    margin-left: 10px\r\n  `\r\n};\r\n\r\nconst propTypes = {\r\n  history: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst ButtonCreateCustomField = ({ handleCreateModal }) => {\r\n  return (\r\n    <Button icon=\"plus-square\" className={styles.addCustomFieldButton} onClick={handleCreateModal}>\r\n      <FormattedMessage id=\"setting.button.addCustomField\" />\r\n    </Button>\r\n  );\r\n};\r\nconst ButtonCreateGlobalCustomField = ({ handleCreateModal }) => {\r\n  return (\r\n    <Button icon=\"plus-circle\" className={styles.addGlobalCustomFieldButton} onClick={handleCreateModal}>\r\n      <FormattedMessage id=\"setting.button.addGlobalCustomField\" />\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst SettingForm = ({ intl, form }) => {\r\n  const { customfields, getCustomFieldsError, getCustomFieldsErrors } = useSelector(\r\n    (state) => state.setting\r\n  );\r\n  const { user } = useSelector((state) => state.auth)\r\n  const { listCustomField } = customfields;\r\n  const [visibleCustomField, setVisibleCustomField] = useState(false);\r\n  const [visibleGlobalCustomField, setVisibleGlobalCustomField] = useState(false);\r\n  const [customField, setCustomField] = useState([]);\r\n  const [globalCustomField, setGlobalCustomField] = useState([]);\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(actions.selectItem(['setting']));\r\n    setCustomField(listCustomField && listCustomField.filter(obj => !obj.is_global));\r\n    setGlobalCustomField(listCustomField && listCustomField.filter(obj => obj.is_global));\r\n  }, [dispatch, listCustomField]);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      settingActions.getCustomFields({\r\n        path: 'customFields'\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  // show notification if get customfields list failure\r\n  useEffect(() => {\r\n    if (getCustomFieldsError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: getCustomFieldsErrors.message\r\n          ? getCustomFieldsErrors.message\r\n          : 'projects.getProjects.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      dispatch(settingActions.getCustomFieldsCleanError());\r\n    }\r\n  }, [dispatch, getCustomFieldsError, getCustomFieldsErrors, intl]);\r\n\r\n  const getProjects = useCallback(() => {\r\n    user.type === \"admin\" ?\r\n      dispatch(\r\n        projectActions.getProjects({\r\n          path: 'projects'\r\n        })\r\n      ) : dispatch(\r\n        projectActions.getProjects({\r\n          path: `projects/byUser/${user.staff_code}`\r\n        })\r\n      );\r\n  }, [dispatch, user]);\r\n\r\n  const createCustomField = useCallback(\r\n    (body) => {\r\n      dispatch(settingActions.createCustomField({ body, path: 'customFields' }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const getCustomFields = useCallback(() => {\r\n    dispatch(settingActions.getCustomFields({ path: 'customFields' }));\r\n  }, [dispatch]);\r\n\r\n  const removeCustomField = useCallback(\r\n    (data) => {\r\n      dispatch(settingActions.removeCustomField({ param: data.id, path: 'customFields' }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const createAssigneeProject = useCallback(\r\n    (body) => {\r\n      dispatch(\r\n        settingActions.createAssigneeProject({\r\n          body,\r\n          path: `customFields/${body.idCustomField}/assigneeProject`\r\n        })\r\n      );\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeAssigneeProject = (body) => {\r\n    dispatch(\r\n      settingActions.removeAssigneeProject({\r\n        body,\r\n        path: `customFields/${body.idCustomField}/assigneeProject`\r\n      })\r\n    );\r\n  };\r\n\r\n  const updateCustomField = useCallback(\r\n    (body) => {\r\n      dispatch(settingActions.updateCustomField({ body, path: 'customFields', param: body.id }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    const currValue = e.target.value;\r\n    setSearchInput(currValue);\r\n    const data = listCustomField.filter(obj => obj.is_global).filter((value) => {\r\n      return searchColumn(currValue, value.name);\r\n    });\r\n    setCustomField(data);\r\n    const dataGlobal = listCustomField.filter(obj => obj.is_global).filter((value) => {\r\n      return searchColumn(currValue, value.name);\r\n    });\r\n    setGlobalCustomField(dataGlobal);\r\n  };\r\n  //change list when onchange search\r\n  const handleCreateModal = () => {\r\n    setVisibleCustomField(!visibleCustomField);\r\n  };\r\n\r\n  const handleCreateModalGlobal = () => {\r\n    setVisibleGlobalCustomField(!visibleGlobalCustomField)\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Row>\r\n        <HeaderTitle title={intl.formatMessage({ id: 'setting.header.title' })} />\r\n      </Row>\r\n      {(customField && customField.length > 0) || (globalCustomField && globalCustomField.length > 0) ? <Row>\r\n        <Row>\r\n          <Col>\r\n            <WithRole\r\n              type={['admin']}\r\n              component={ButtonCreateCustomField}\r\n              handleCreateModal={handleCreateModal}\r\n              intl={intl}\r\n            />\r\n            <WithRole\r\n              type={['admin']}\r\n              component={ButtonCreateGlobalCustomField}\r\n              handleCreateModal={handleCreateModalGlobal}\r\n              intl={intl}\r\n            />\r\n          </Col>\r\n          <Col span={10} offset={14}>\r\n            <Input placeholder=\"Search\" value={searchInput} onChange={handleChange} />\r\n          </Col>\r\n        </Row>\r\n        {visibleCustomField && (\r\n          <FormCreateCustomField\r\n            global={false}\r\n            visible={visibleCustomField}\r\n            close={() => setVisibleCustomField(!visibleCustomField)}\r\n            form={form}\r\n            intl={intl}\r\n            createCustomField={createCustomField}\r\n            getCustomFields={getCustomFields}\r\n            getProjects={getProjects}\r\n          />\r\n        )}\r\n        {visibleGlobalCustomField && (\r\n          <FormCreateCustomField\r\n            global={true}\r\n            visible={visibleGlobalCustomField}\r\n            close={() => setVisibleGlobalCustomField(!visibleGlobalCustomField)}\r\n            form={form}\r\n            intl={intl}\r\n            createCustomField={createCustomField}\r\n            getCustomFields={getCustomFields}\r\n            getProjects={getProjects}\r\n          />\r\n        )}\r\n\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab={intl.formatMessage({ id: 'setting.tabsLabel.customField' })} key=\"1\">\r\n            <TableCustomFields\r\n              customfields={customField}\r\n              removeCustomField={removeCustomField}\r\n              getCustomFields={getCustomFields}\r\n              updateCustomField={updateCustomField}\r\n              createAssigneeProject={createAssigneeProject}\r\n              removeAssigneeProject={removeAssigneeProject}\r\n              getProjects={getProjects}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab={intl.formatMessage({ id: 'setting.tabsLabel.globalCustomField' })} key=\"2\">\r\n            <TableCustomFields\r\n              customfields={globalCustomField}\r\n              removeCustomField={removeCustomField}\r\n              getCustomFields={getCustomFields}\r\n              updateCustomField={updateCustomField}\r\n              createAssigneeProject={createAssigneeProject}\r\n              removeAssigneeProject={removeAssigneeProject}\r\n              getProjects={getProjects}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </Row>\r\n        :\r\n        <FirstSettingCustomField\r\n          createCustomField={createCustomField}\r\n          intl={intl}\r\n          getProjects={getProjects}\r\n\r\n        />}\r\n    </Row>\r\n  );\r\n};\r\nconst SettingPage = Form.create({ name: 'dynamic_form_item' })(SettingForm);\r\n\r\nSettingPage.propTypes = propTypes;\r\n\r\nSettingPage.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(SettingPage, {});\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { css } from 'emotion';\r\nimport { formShape } from 'rc-form';\r\n\r\nimport { Row, Drawer, Button, Input, Form, Popconfirm, notification, Icon, Typography } from 'antd';\r\n\r\nimport ErrorNotification from '../../../../components/Notification/Error';\r\nimport SuccessNotification from '../../../../components/Notification/Success';\r\nimport { actions as customerActions } from '../../store';\r\n\r\nconst propTypes = {\r\n  intl: PropTypes.shape({}).isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  drawerVisible: PropTypes.bool.isRequired,\r\n  form: formShape.isRequired,\r\n  getCustomer: PropTypes.func.isRequired,\r\n\r\n  customer: PropTypes.shape({})\r\n};\r\n\r\nconst defaultProps = {\r\n  customer: {}\r\n};\r\n\r\nconst styles = {\r\n  drawerFooter: css`\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 24px;\r\n    left: 24px;\r\n    padding: 24px 0px;\r\n  `\r\n};\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 8\r\n  },\r\n  wrapperCol: {\r\n    span: 16\r\n  }\r\n};\r\n\r\nconst UpdateCustomer = ({ intl, drawerVisible, onClose, form, customer, getCustomer }) => {\r\n  const dispatch = useDispatch();\r\n  const { loading, updateCustomerResult, updateCustomerError, updateCustomerErrors } = useSelector(\r\n    (state) => state.customers\r\n  );\r\n\r\n  // Handle showing notification after update project\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (updateCustomerResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: updateCustomerResult.message });\r\n      SuccessNotification(title, message);\r\n      // close the modal and clean data\r\n      onClose();\r\n      // re-call get customers list\r\n      getCustomer && getCustomer();\r\n    }\r\n  }, [onClose, dispatch, intl, updateCustomerResult, getCustomer]);\r\n\r\n  // show error if update member failure\r\n  useEffect(() => {\r\n    if (updateCustomerError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: updateCustomerErrors.message\r\n          ? updateCustomerErrors.message\r\n          : 'projects.updateProject.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(customerActions.updateCustomerCleanError(false));\r\n    }\r\n  }, [dispatch, intl, updateCustomerError, updateCustomerErrors]);\r\n\r\n  // Form submit\r\n  const handleSubmit = () => {\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        const body = {\r\n          name: values.name,\r\n          address: values.address,\r\n          phone_number: values.phone_number,\r\n          email: values.email\r\n        };\r\n\r\n        const oldBody = {\r\n          name: customer.name,\r\n          address: customer.address,\r\n          phone_number: customer.phone_number,\r\n          email: customer.email\r\n        };\r\n        // check if value is not change\r\n        if (JSON.stringify(body) === JSON.stringify(oldBody)) {\r\n          const title = intl.formatMessage({ id: 'notification.error' });\r\n          const message = intl.formatMessage({ id: 'notification.message.form.noChanging' });\r\n          return ErrorNotification(title, message);\r\n        }\r\n\r\n        dispatch(customerActions.updateCustomer({ body, path: 'customers', param: customer.id }));\r\n      } else {\r\n        notification.open({\r\n          message: (\r\n            <span style={{ color: '#f5222d', fontWeight: 'bold' }}>\r\n              {intl.formatMessage({ id: 'notification.error' })}\r\n            </span>\r\n          ),\r\n          description: intl.formatMessage({ id: 'notification.message.form.error' }),\r\n          duration: 2,\r\n          icon: <Icon type=\"frown\" style={{ color: '#f5222d' }} />\r\n        });\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      title={<FormattedMessage id=\"customer.updateCustomer.title\" />}\r\n      placement=\"right\"\r\n      onClose={onClose}\r\n      visible={drawerVisible}\r\n      maskClosable={false}\r\n      width={550}>\r\n      <Form onSubmit={() => handleSubmit()} {...formItemLayout}>\r\n        <Row style={{ marginBottom: 10 }}>\r\n          <Icon type=\"user\" style={{ marginRight: 10 }} />\r\n          <Typography.Text style={{ fontWeight: 'bold' }}>\r\n            {<FormattedMessage id=\"customers.createCustomers.customerInformation\" />}\r\n          </Typography.Text>\r\n        </Row>\r\n\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerName.title\" />}\r\n          validateStatus={form.getFieldError('name') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('name', {\r\n            initialValue: customer.name,\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerName.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerAddress.title\" />}\r\n          validateStatus={form.getFieldError('address') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('address', {\r\n            initialValue: customer.address,\r\n\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerAddress.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerEmail.title\" />}\r\n          validateStatus={form.getFieldError('email') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('email', {\r\n            initialValue: customer.email,\r\n\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerEmail.validate.type\" />\r\n                )\r\n              },\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerEmail.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          style={{ display: 'flex' }}\r\n          label={<FormattedMessage id=\"customers.customerModal.form.customerPhonenumber.title\" />}\r\n          validateStatus={form.getFieldError('phone_number') ? 'error' : 'validating'}>\r\n          {form.getFieldDecorator('phone_number', {\r\n            initialValue: customer.phone_number,\r\n\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: (\r\n                  <FormattedMessage id=\"customers.customerModal.form.customerPhonenumber.validate\" />\r\n                )\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n      </Form>\r\n      <Row className={styles.drawerFooter}>\r\n        <Popconfirm\r\n          title={<FormattedMessage id=\"projects.updateProject.confirm.add\" />}\r\n          onConfirm={() => handleSubmit()}\r\n          okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n          cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n          <Button icon=\"edit\" type=\"primary\" loading={loading}>\r\n            {<FormattedMessage id=\"button.update\" />}\r\n          </Button>\r\n        </Popconfirm>\r\n        <Button\r\n          style={{ marginLeft: 15 }}\r\n          icon=\"close-circle\"\r\n          type=\"default\"\r\n          key=\"close\"\r\n          onClick={onClose}>\r\n          {<FormattedMessage id=\"button.close\" />}\r\n        </Button>\r\n      </Row>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nUpdateCustomer.propTypes = propTypes;\r\n\r\nUpdateCustomer.defaultProps = defaultProps;\r\n\r\nconst UpdateCustomerForm = Form.create({ name: 'updateCustomer' })(UpdateCustomer);\r\n\r\nexport default injectIntl(UpdateCustomerForm, {});\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport moment from 'moment';\r\nimport {\r\n  Table,\r\n  Row,\r\n  Typography,\r\n  Button,\r\n  Col,\r\n  Descriptions,\r\n  Divider,\r\n  Skeleton,\r\n  Tag\r\n} from 'antd';\r\n\r\nimport WithRole from '../../../hocs/WithRole';\r\nimport { actions as customerActions } from '../store';\r\nimport UpdateCustomerDrawer from '../updateCustomer/components/UpdateCustomerDrawer';\r\n\r\n\r\nconst propTypes = {\r\n  match: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired,\r\n\r\n  project: PropTypes.shape({}),\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  loading: false,\r\n  customer: null,\r\n  joinedProjects: [],\r\n};\r\n\r\nconst ButtonEditCustomer = ({ handleEditCustomerDrawer, customer }) => {\r\n  return (\r\n    <Button icon=\"edit\" type=\"primary\" disabled={!customer} onClick={handleEditCustomerDrawer}>\r\n      <FormattedMessage id=\"button.update\" />\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst CustomerDetail = ({\r\n  customer,\r\n  joinedProjects,\r\n  loading,\r\n  history,\r\n  getCustomer\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const handleEditCustomerDrawer = () => {\r\n    setDrawerVisible(!drawerVisible);\r\n  };\r\n\r\n    // Handle control open/close update customer drawer\r\n  const handleControlDrawer = () => {\r\n    setDrawerVisible(!drawerVisible);\r\n    dispatch(customerActions.updateCustomerCleanError());\r\n    dispatch(customerActions.updateCustomerCleanData());\r\n  };\r\n\r\n  const onSelectProject = (item) => {\r\n    history.push(`/project/detail/${item.id}`);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.name\" />,\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.start_time\" />,\r\n      dataIndex: 'start_time',\r\n      key: 'start_time',\r\n      render: (date) => {\r\n        return moment(date).format('DD/MM/YYYY')\r\n      }\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.end_time\" />,\r\n      dataIndex: 'end_time',\r\n      key: 'end_time',\r\n      render: (date) => {\r\n        return moment(date).format('DD/MM/YYYY');\r\n      }\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.totalMember\" />,\r\n      dataIndex: 'project_member_detail.length',\r\n      key: 'total',\r\n    },\r\n    {\r\n      title: <FormattedMessage id=\"projects.detail.member.status\" />,\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (status) => {\r\n        switch (status) {\r\n          case 'running':\r\n            return (\r\n              <Tag color=\"#108ee9\">\r\n                <FormattedMessage id=\"projects.status.running\" />\r\n              </Tag>\r\n            );\r\n          case 'completed':\r\n            return (\r\n              <Tag color=\"#87d068\">\r\n                <FormattedMessage id=\"projects.status.completed\" />\r\n              </Tag>\r\n            );\r\n          case 'stopped':\r\n            return (\r\n              <Tag color=\"#f5222D\">\r\n                <FormattedMessage id=\"projects.status.stopped\" />\r\n              </Tag>\r\n            );\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row style={{ marginBottom: 75 }}>\r\n        <Skeleton active loading={loading} paragraph={{ rows: 4 }}>\r\n          <Row>\r\n            <Col span={12}>\r\n              <Descriptions title={customer && customer.name ? customer.name : ''} column={1}>\r\n                <Descriptions.Item label={<FormattedMessage id=\"customerDetail.email\" />}>\r\n                  {customer ? customer.email : ''}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label={<FormattedMessage id=\"customerDetail.address\" />}>\r\n                  {customer ? customer.address : ''}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label={<FormattedMessage id=\"customerDetail.phoneNumber\" />}>\r\n                  {customer ? customer.phone_number : ''}\r\n                </Descriptions.Item>\r\n              </Descriptions>\r\n            </Col>\r\n          </Row>\r\n        </Skeleton>\r\n        <Row>\r\n          <WithRole\r\n            type={['admin', 'manager']}\r\n            component={ButtonEditCustomer}\r\n            customer={customer}\r\n            handleEditCustomerDrawer={handleEditCustomerDrawer}\r\n          />\r\n        </Row>\r\n\r\n        <Divider />\r\n        <Row>\r\n          <Row>\r\n            <Col span={12} style={{ display: 'flex' }}>\r\n              <Typography.Title level={4}>\r\n                <FormattedMessage id=\"customerDetail.currentProjects.title\" />\r\n              </Typography.Title>\r\n            </Col>\r\n          </Row>\r\n          <Table\r\n            columns={columns}\r\n            rowKey={(record) => record.id}\r\n            dataSource={joinedProjects ? joinedProjects : []}\r\n            loading={loading}\r\n            onRow={(item) => ({\r\n              onClick: () => onSelectProject(item)\r\n            })}\r\n          />\r\n        </Row>\r\n        {drawerVisible && (\r\n        <UpdateCustomerDrawer\r\n          drawerVisible={drawerVisible}\r\n          onClose={() => handleControlDrawer()}\r\n          customer={customer}\r\n          getCustomer={getCustomer}\r\n        />\r\n      )}\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nCustomerDetail.propTypes = propTypes;\r\nCustomerDetail.defaultProps = defaultProps;\r\n\r\nexport default injectIntl(CustomerDetail, {});\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Row, Popconfirm, Button, Icon } from 'antd';\r\nimport { css } from 'emotion';\r\n\r\nimport { actions as layoutActions } from '../modules/layout/store';\r\nimport { actions as customerActions } from '../modules/customer/store';\r\nimport HeaderTitle from '../components/Content/HeaderTitle';\r\nimport CustomerDetail from '../modules/customer/customerDetail/customerDetail';\r\nimport ErrorNotification from '../components/Notification/Error';\r\nimport SuccessNotification from '../components/Notification/Success';\r\nimport WithRole from '../hocs/WithRole';\r\n\r\nconst propTypes = {\r\n  match: PropTypes.shape({}).isRequired,\r\n  history: PropTypes.shape({}).isRequired,\r\n  intl: PropTypes.shape({}).isRequired\r\n};\r\n\r\nconst styles = {\r\n  footer: css`\r\n    position: absolute !important;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n  `\r\n};\r\n\r\nconst ButtonRemoveCustomer = ({ loading, match }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Popconfirm\r\n      title={<FormattedMessage id=\"customerDetail.removeCustomer.confirm.remove\" />}\r\n      onConfirm={\r\n        () =>\r\n          dispatch(\r\n            customerActions.removeCustomer({\r\n              path: 'customers/remove',\r\n              param: match.params.id\r\n            })\r\n          )\r\n        // eslint-disable-next-line react/jsx-curly-newline\r\n      }\r\n      okText={<FormattedMessage id=\"button.confirm.yes\" />}\r\n      cancelText={<FormattedMessage id=\"button.confirm.no\" />}>\r\n      <Button style={{ marginRight: 15 }} type=\"danger\" disabled={loading}>\r\n        <Icon type={loading ? 'loading' : 'delete'} />\r\n        <FormattedMessage id=\"customerDetail.removeCustomer\" />\r\n      </Button>\r\n    </Popconfirm>\r\n  );\r\n};\r\n\r\nconst CustomerDetailPage = ({ match, history, intl }) => {\r\n  const dispatch = useDispatch();\r\n  const { customer, projectsOfCustomer, loading, removeCustomerResult, removeCustomerError, removeCustomerErrors } = useSelector(\r\n    (state) => state.customers\r\n  );\r\n\r\n\r\n  const cleanError = useCallback(() => {\r\n    dispatch(customerActions.cleanError(false));\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    dispatch(layoutActions.selectItem(['customers']));\r\n  }, [dispatch])\r\n\r\n  const getCustomer = useCallback(() => {\r\n    dispatch(\r\n      customerActions.getCustomer({\r\n        param: match.params.id,\r\n        path: 'customers'\r\n      })\r\n    );\r\n  }, [dispatch, match])\r\n\r\n  useEffect(() => {\r\n    // get project detail\r\n    dispatch(\r\n      customerActions.getCustomer({\r\n        param: match.params.id,\r\n        path: 'customers'\r\n      })\r\n    );\r\n    // get joined projects\r\n    dispatch(\r\n      customerActions.getProjectsByCustomer({\r\n        path: `customers/${match.params.id}/projects`\r\n      })\r\n    );\r\n  }, [dispatch, match.params.id]);\r\n\r\n\r\n  // Handle showing notification after remove customer\r\n  useEffect(() => {\r\n    // show success notification\r\n    if (removeCustomerResult) {\r\n      const title = intl.formatMessage({ id: 'notification.success' });\r\n      const message = intl.formatMessage({ id: removeCustomerResult.message });\r\n      SuccessNotification(title, message);\r\n      // clean data\r\n      dispatch(customerActions.removeCustomerCleanData(false));\r\n      history.push('/customers');\r\n    }\r\n  }, [dispatch, intl, removeCustomerResult, history]);\r\n\r\n  // Showing error if remove customer failure\r\n  useEffect(() => {\r\n    if (removeCustomerError) {\r\n      const title = intl.formatMessage({ id: 'notification.error' });\r\n      const message = intl.formatMessage({\r\n        id: removeCustomerErrors.message\r\n          ? removeCustomerErrors.message\r\n          : 'customers.removeCustomer.message.error'\r\n      });\r\n      ErrorNotification(title, message);\r\n      // clean error\r\n      dispatch(customerActions.removeCustomerCleanError(false));\r\n    }\r\n  }, [dispatch, intl, removeCustomerError, removeCustomerErrors]);\r\n\r\n  return (\r\n    <Row>\r\n      <Row>\r\n        <HeaderTitle title={<FormattedMessage id=\"customerDetail.title\" />} />\r\n      </Row>\r\n      <Row>\r\n        <CustomerDetail\r\n          customer={customer}\r\n          loading={loading}\r\n          cleanError={cleanError}\r\n          match={match}\r\n          joinedProjects={projectsOfCustomer ? projectsOfCustomer.listProject : null}\r\n          history={history}\r\n          getCustomer={getCustomer}\r\n        />\r\n      </Row>\r\n      <Row className={styles.footer} type=\"flex\" justify=\"start\">\r\n        <WithRole\r\n          type={['admin']}\r\n          component={ButtonRemoveCustomer}\r\n          match={match}\r\n          loading={loading}\r\n        />\r\n      </Row>\r\n    </Row>\r\n  );\r\n};\r\n\r\nCustomerDetailPage.propTypes = propTypes;\r\n\r\nexport default injectIntl(CustomerDetailPage, {});\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport RouteNormal from './hocs/RouteNormal';\r\nimport RouteWithManager from './hocs/RouteWithManager';\r\nimport RouteWithAdmin from './hocs/RouteWithAdmin';\r\n\r\nimport Dashboard from './pages/Dashbroad.page';\r\nimport ProjectPage from './pages/Projects.page';\r\nimport ProjectDetail from './pages/ProjectDetail.page';\r\nimport ProjectMemberHistory from './pages/ProjectMemberHistory.page';\r\nimport LoginPage from './pages/Login.page';\r\nimport ListMemberPage from './pages/ListMember.page';\r\nimport Customerpage from './pages/Customers.page';\r\nimport NotFound from './pages/NotFound';\r\nimport CallbackOAuth from './pages/CallbackOAuth';\r\nimport UsersPage from './pages/User.page';\r\nimport SettingPage from './pages/Setting.page';\r\nimport CustomerDetail from './pages/CustomerDetail.page';\r\n\r\n\r\nfunction AppRoutes() {\r\n  return (\r\n    <Switch>\r\n      <Route component={LoginPage} path=\"/login\"></Route>\r\n      <Route component={CallbackOAuth} path=\"/callback\" />\r\n\r\n      <RouteWithAdmin component={Dashboard} path=\"/\" exact></RouteWithAdmin>\r\n      <RouteWithAdmin component={UsersPage} path=\"/admin/roles\"></RouteWithAdmin>\r\n      <RouteWithAdmin component={SettingPage} path=\"/admin/setting\"></RouteWithAdmin>\r\n\r\n\r\n      <RouteNormal component={ProjectPage} path=\"/project\" exact></RouteNormal>\r\n      <RouteNormal component={ProjectDetail} path=\"/project/detail/:id\"></RouteNormal>\r\n      <RouteNormal component={ProjectMemberHistory} path=\"/project/memberHistory/:id\"></RouteNormal>\r\n\r\n      <RouteWithManager component={Customerpage} path=\"/customers\" exact></RouteWithManager>\r\n\r\n      <RouteWithManager component={ListMemberPage} path=\"/member/list\" exact></RouteWithManager>\r\n      <RouteWithManager component={CustomerDetail} path=\"/customer/detail/:id\" exact></RouteWithManager>\r\n\r\n      <RouteNormal component={NotFound} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default AppRoutes;\r\n","export const languageOptions = [\r\n  {\r\n    id: 'vi',\r\n    value: 'languageSwitcher.vi'\r\n  },\r\n  {\r\n    id: 'en',\r\n    value: 'languageSwitcher.en'\r\n  }\r\n];\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { actions } from '../store';\r\nimport { Select } from 'antd';\r\nimport { languageOptions } from './options';\r\n\r\nconst LanguageSwitcher = () => {\r\n  const dispatch = useDispatch();\r\n  const { locale } = useSelector((state) => state.languageSwitcher);\r\n\r\n  const defaultValue = () => {\r\n    const { id } = languageOptions.find((item) => item.id === locale);\r\n    return id;\r\n  };\r\n\r\n  const handleChangeLanguage = (value) => {\r\n    dispatch(actions.switchLanguage(value));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Select\r\n        style={{ width: 140 }}\r\n        defaultValue={defaultValue()}\r\n        onChange={(value) => handleChangeLanguage(value)}>\r\n        {languageOptions.map((item, index) => (\r\n          <Select.Option key={index} value={item.id}>\r\n            <FormattedMessage id={item.value} />\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default LanguageSwitcher;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../store';\r\nimport { Layout, Icon, Row } from 'antd';\r\nimport LanguageSwitcher from '../../languageSwitcher/components/LanguagaSwitcher';\r\nimport { css } from 'emotion';\r\n\r\nconst styles = {\r\n  header: css`\r\n    align-items: center;\r\n    display: flex;\r\n    padding: 0px 24px;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 2;\r\n  `,\r\n  trigger: css`\r\n    color: #fff !important;\r\n    font-size: 25px;\r\n    &:hover {\r\n      color: #1890ff !important;\r\n    }\r\n  `,\r\n  leftContents: css`\r\n    flex: 1;\r\n  `,\r\n  rightContents: css`\r\n    flex: 1;\r\n    justify-content: flex-end;\r\n  `\r\n};\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch();\r\n  const layoutCheck = useSelector((state) => state.layout);\r\n  const { isCollapsed } = useSelector((state) => state.layoutSlider);\r\n\r\n  const toggle = () => {\r\n    dispatch(actions.setCollapse(!isCollapsed));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {layoutCheck.isShow && (\r\n        <Layout.Header className={styles.header}>\r\n          <Row className={styles.leftContents}>\r\n            <Icon\r\n              className={styles.trigger}\r\n              type={isCollapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={() => toggle()}\r\n            />\r\n          </Row>\r\n          <Row type=\"flex\" className={styles.rightContents}>\r\n            <LanguageSwitcher />\r\n          </Row>\r\n        </Layout.Header>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Menu, Icon } from 'antd';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction CustomMenu(props) {\r\n  const { key, to, typeIcon, message, ...rest } = props;\r\n\r\n  return (\r\n    <Menu.Item key={key} {...rest}>\r\n      <Link to={to}>\r\n        <Icon type={typeIcon} />\r\n        <FormattedMessage id={message} />\r\n      </Link>\r\n    </Menu.Item>\r\n  );\r\n}\r\n\r\n\r\nexport default CustomMenu;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../store';\r\nimport { Layout, Menu, Icon } from 'antd';\r\nimport { css } from 'emotion';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport CustomMenu from './CustomMenu';\r\nimport WithRole from '../../../hocs/WithRole';\r\nimport Cookies from 'js-cookie';\r\nimport { authApi } from '../../../api/auth/authApi';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst styles = {\r\n  sider: css`\r\n    width: 200px;\r\n    margin-top: 64px;\r\n    background-color: #fff;\r\n  `,\r\n  menu: css`\r\n    height: 100%;\r\n    border-right: 0;\r\n    width: 200px !important;\r\n    position: fixed\r\n  `,\r\n  menu_collapse: css`\r\n    height: 100%;\r\n    border-right: 0;\r\n    position: fixed\r\n  `,\r\n  logo: css`\r\n    height: 56px;\r\n    background-color: transparent;\r\n    margin: 4px;\r\n  `,\r\n  //change style when collapse\r\n  user: css`\r\n    position: fixed;\r\n    bottom: 0;\r\n    width: 200px\r\n  `,\r\n  user_collapse: css`\r\n    position: fixed;\r\n    bottom: 0;\r\n  `\r\n};\r\nconst Sider = () => {\r\n  const {\r\n    user: { staff_code },\r\n    user\r\n  } = useSelector((state) => state.auth);\r\n  const dispacth = useDispatch();\r\n  const layoutCheck = useSelector((state) => state.layout);\r\n  const { selectedItem, selectedSubMenu, isCollapsed } = useSelector((state) => state.layoutSlider);\r\n  const handleSelectSubMenu = (selectedKeys) => {\r\n    dispacth(actions.selectSubMenu(selectedKeys));\r\n  };\r\n  const handleLogout = () => {\r\n    localStorage.clear();\r\n    Cookies.remove('access-token');\r\n    authApi.logout(staff_code);\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <>\r\n      {layoutCheck.isShow && (\r\n        <Layout.Sider className={styles.sider} trigger={null} collapsible collapsed={isCollapsed}>\r\n          <Menu\r\n            mode=\"inline\"\r\n            theme=\"dark\"\r\n            className={isCollapsed ? styles.menu_collapse : styles.menu}\r\n            selectedKeys={selectedItem}\r\n            openKeys={selectedSubMenu}\r\n            onOpenChange={(selectedKeys) => handleSelectSubMenu(selectedKeys)}>\r\n            <WithRole\r\n              component={CustomMenu}\r\n              key=\"dashboard\"\r\n              to=\"/\"\r\n              typeIcon=\"pie-chart\"\r\n              message=\"dashboard.title\"\r\n              type={['admin']}></WithRole>\r\n            <WithRole\r\n              component={CustomMenu}\r\n              key=\"project\"\r\n              to=\"/project\"\r\n              typeIcon=\"project\"\r\n              message=\"projects.title\"\r\n              type={['admin', 'manager', 'normal']}\r\n            />\r\n            <WithRole\r\n              component={CustomMenu}\r\n              key=\"customers\"\r\n              to=\"/customers\"\r\n              typeIcon=\"team\"\r\n              message=\"customers.title\"\r\n              type={['admin', 'manager']}\r\n            />\r\n            <WithRole\r\n              component={CustomMenu}\r\n              key=\"member\"\r\n              to=\"/member/list\"\r\n              typeIcon=\"smile\"\r\n              message=\"members.title\"\r\n              type={['admin', 'manager']}\r\n            />\r\n            <WithRole\r\n              component={CustomMenu}\r\n              key=\"roles\"\r\n              to=\"/admin/roles\"\r\n              typeIcon=\"user\"\r\n              message=\"users.title\"\r\n              type={['admin']}\r\n            />\r\n            <WithRole\r\n              key=\"sub1-2\"\r\n              title={\r\n                <span>\r\n                  <Icon type=\"setting\" />\r\n                  <FormattedMessage id=\"setting.title\" />\r\n                </span>\r\n              }\r\n              component={SubMenu}\r\n              type={['admin']}>\r\n              <WithRole\r\n                component={CustomMenu}\r\n                key=\"setting\"\r\n                to=\"/admin/setting\"\r\n                typeIcon=\"project\"\r\n                message=\"setting.customfield.title\"\r\n                type={['admin']}\r\n              />\r\n            </WithRole>\r\n            <WithRole\r\n              key=\"logout\"\r\n              title={<span>\r\n                <Icon type=\"user\" />\r\n                {isCollapsed ? null : user.full_name}\r\n              </span>}\r\n              component={SubMenu}\r\n              className={isCollapsed ? styles.user_collapse : styles.user}\r\n              type={['admin', 'manager', 'normal']}>\r\n              <WithRole\r\n                component={CustomMenu}\r\n                to=\"\"\r\n                typeIcon=\"logout\"\r\n                onClick={handleLogout}\r\n                key=\"logout-option\"\r\n                message=\"logout.title\"\r\n                type={['admin', 'manager', 'normal']}\r\n              />\r\n            </WithRole>\r\n          </Menu>\r\n        </Layout.Sider>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sider;\r\n","import React from 'react';\r\nimport { Router } from 'react-router-dom';\r\nimport { ConfigProvider, Layout as AntdLayout } from 'antd';\r\nimport { IntlProvider } from 'react-intl';\r\nimport { useSelector } from 'react-redux';\r\nimport { history } from './store';\r\nimport AppLocale from './languageProvider';\r\nimport { css } from 'emotion';\r\n\r\nimport AppRoutes from './AppRoutes';\r\nimport Header from './modules/layout/components/Header';\r\nimport Sider from './modules/layout/components/Sider';\r\n\r\nconst App = () => {\r\n  const { locale } = useSelector((state) => state.languageSwitcher);\r\n  const layoutCheck = useSelector((state) => state.layout);\r\n  const currentAppLocale = AppLocale[locale];\r\n\r\n  const styles = {\r\n    container: css`\r\n      min-height: 100vh !important;\r\n    `,\r\n    content: css`\r\n      background: #fff;\r\n      padding: 24px;\r\n      margin: 0;\r\n      minheight: 280px;\r\n      border-radius: 3px;\r\n    `\r\n  };\r\n\r\n  return (\r\n    <ConfigProvider locale={currentAppLocale.antd}>\r\n      <IntlProvider locale={currentAppLocale.locale} messages={currentAppLocale.messages}>\r\n        <Router history={history}>\r\n          <AntdLayout className={styles.container}>\r\n            <Sider/>\r\n            <Header />\r\n            <AntdLayout style={{ padding: layoutCheck.isShow ? '88px 24px 24px 24px' : '0' }}>\r\n              {/* <BackTop style={{ right: '15px' }} visibilityHeight={250} /> */}\r\n              <AntdLayout.Content className={layoutCheck.isShow ? styles.content : null}>\r\n                <AppRoutes></AppRoutes>\r\n              </AntdLayout.Content>\r\n            </AntdLayout>\r\n          </AntdLayout>\r\n        </Router>\r\n      </IntlProvider>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { ConfigProvider } from 'antd';\r\nimport Provider from 'react-redux/es/components/Provider';\r\nimport store from './store';\r\nimport App from './App';\r\nimport AppLocale from './languageProvider';\r\n\r\nReactDOM.render(\r\n  <ConfigProvider locale={AppLocale.vi.antd}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </ConfigProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}